using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Threading;
using System.Web.SessionState;
using System.Web.UI;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using DocumentFormat.OpenXml.Bibliography;
using DocumentFormat.OpenXml.Wordprocessing;

/// <summary>
/// Summary description for DataLayer
/// </summary>
public partial class DataLayer : Page, IRequiresSessionState
{
    #region Pensioners Entry Status
    public DataSet get_Pensioners_Data_Entry_Summery(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    Zone_Id,
	                    Zone_Name,
	                    Circle_Id,
	                    Circle_Name, 
	                    Division_Name, 
	                    Division_Id,
	                    PensionMaster_PensionDivision, 
	                    count(PensionMaster_Id) Total_Pensoners
                    from tbl_PensionMaster
                    join tbl_Division on Division_Id = PensionMaster_PensionDivision
                    join tbl_Circle on Circle_Id = Division_CircleId
                    join tbl_Zone on Zone_Id = Circle_ZoneId
                    where PensionMaster_Status = 1 ";
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        strQuery += @"group by Zone_Id, Zone_Name, Circle_Id, Circle_Name, Division_Name, Division_Id, PensionMaster_PensionDivision 
                      order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Circle Marking Deduction
    public DataSet get_tbl_CircleMarkingDeduction(int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Name, 
                        Circle_Name, 
                        Zone_Id, 
                        Circle_Id,
						CircleMarkingDeduction_Id, 
                        CircleMarkingDeduction_Value, 
                        CircleMarkingDeduction_Status, 
                        CircleMarkingDeduction_CircleId
                    from tbl_Circle 
					left join tbl_Zone on Zone_Id = Circle_ZoneId                     
                    left join 
                    (
                        select 
                            * 
                        from tbl_CircleMarkingDeduction
                        where CircleMarkingDeduction_Status = 1 and CircleMarkingDeduction_Month = MonthCondition and CircleMarkingDeduction_Year = YearCondition 
                    ) tbl_CircleMarkingDeduction on Circle_Id = CircleMarkingDeduction_CircleId    
                    where Circle_Status = 1 and Zone_Status = 1 
                    order by Zone_Name, Circle_Name";

        strQuery = strQuery.Replace("MonthCondition", Month.ToString());
        strQuery = strQuery.Replace("YearCondition", Year.ToString());
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_CircleMarkingDeduction(List<tbl_CircleMarkingDeduction> obj_tbl_CircleMarkingDeduction_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                for (int i = 0; i < obj_tbl_CircleMarkingDeduction_Li.Count; i++)
                {
                    Update_tbl_CircleMarkingDeduction(obj_tbl_CircleMarkingDeduction_Li[i], trans, cn);
                    Insert_tbl_CircleMarkingDeduction(obj_tbl_CircleMarkingDeduction_Li[i], trans, cn);
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_CircleMarkingDeduction(tbl_CircleMarkingDeduction obj_tbl_CircleMarkingDeduction, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_CircleMarkingDeduction( [CircleMarkingDeduction_AddedBy], [CircleMarkingDeduction_AddedOn], [CircleMarkingDeduction_Value], [CircleMarkingDeduction_Status], [CircleMarkingDeduction_Month], [CircleMarkingDeduction_Year], [CircleMarkingDeduction_CircleId]) values('" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_AddedBy + "', getdate(), '" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Value + "','" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Status + "','" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Month + "','" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Year + "','" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_CircleId + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_CircleMarkingDeduction(tbl_CircleMarkingDeduction obj_tbl_CircleMarkingDeduction, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_CircleMarkingDeduction set  CircleMarkingDeduction_Status = 0, CircleMarkingDeduction_ModifiedOn = getDate(), CircleMarkingDeduction_ModifiedBy = '" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_AddedBy + "' where CircleMarkingDeduction_Month = '" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Month + "' and CircleMarkingDeduction_Year = '" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_Year + "' and CircleMarkingDeduction_CircleId = '" + obj_tbl_CircleMarkingDeduction.CircleMarkingDeduction_CircleId + "' and CircleMarkingDeduction_Status = 1 ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Master Circle New Work Added
    public DataSet get_tbl_CircleNewWorkAdded(int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Name, 
                        Circle_Name, 
                        Zone_Id, 
                        Circle_Id,
						CircleNewWorkAdded_Id, 
                        CircleNewWorkAdded_Value, 
                        CircleNewWorkAdded_Status, 
                        CircleNewWorkAdded_CircleId
                    from tbl_Circle 
					left join tbl_Zone on Zone_Id = Circle_ZoneId                     
                    left join 
                    (
                        select 
                            * 
                        from tbl_CircleNewWorkAdded
                        where CircleNewWorkAdded_Status = 1 and CircleNewWorkAdded_Month = MonthCondition and CircleNewWorkAdded_Year = YearCondition 
                    ) tbl_CircleNewWorkAdded on Circle_Id = CircleNewWorkAdded_CircleId    
                    where Circle_Status = 1 and Zone_Status = 1 
                    order by Zone_Name, Circle_Name";

        strQuery = strQuery.Replace("MonthCondition", Month.ToString());
        strQuery = strQuery.Replace("YearCondition", Year.ToString());
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_CircleNewWorkAdded(List<tbl_CircleNewWorkAdded> obj_tbl_CircleNewWorkAdded_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                for (int i = 0; i < obj_tbl_CircleNewWorkAdded_Li.Count; i++)
                {
                    Update_tbl_CircleNewWorkAdded(obj_tbl_CircleNewWorkAdded_Li[i], trans, cn);
                    Insert_tbl_CircleNewWorkAdded(obj_tbl_CircleNewWorkAdded_Li[i], trans, cn);
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_CircleNewWorkAdded(tbl_CircleNewWorkAdded obj_tbl_CircleNewWorkAdded, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_CircleNewWorkAdded( [CircleNewWorkAdded_AddedBy], [CircleNewWorkAdded_AddedOn], [CircleNewWorkAdded_Value], [CircleNewWorkAdded_Status], [CircleNewWorkAdded_Month], [CircleNewWorkAdded_Year], [CircleNewWorkAdded_CircleId]) values('" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_AddedBy + "', getdate(), '" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Value + "','" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Status + "','" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Month + "','" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Year + "','" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_CircleId + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_CircleNewWorkAdded(tbl_CircleNewWorkAdded obj_tbl_CircleNewWorkAdded, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_CircleNewWorkAdded set  CircleNewWorkAdded_Status = 0, CircleNewWorkAdded_ModifiedOn = getDate(), CircleNewWorkAdded_ModifiedBy = '" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_AddedBy + "' where CircleNewWorkAdded_Month = '" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Month + "' and CircleNewWorkAdded_Year = '" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_Year + "' and CircleNewWorkAdded_CircleId = '" + obj_tbl_CircleNewWorkAdded.CircleNewWorkAdded_CircleId + "' and CircleNewWorkAdded_Status = 1 ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region HRMS Data Verification Summery
    public DataSet get_HRMS_Data_Verification_Summery(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select * from (
                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    tbl_Division.Division_Id,
	                    Zone_Name, 
	                    Circle_Name, 
	                    Division_Name, 
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_HRMSEmployeeDetails.Is_VerifiedF, 0) = 1 then 1 else 0 end)
                    from tbl_HRMSEmployeeDetails 
                    join tbl_HRMSEmployeeJuridiction on tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_Status = 1
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where tbl_HRMSEmployeeDetails.HRMSEmployee_Status = 1 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId, 0) > 0
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Division.Division_Id, Zone_Name, Circle_Name, Division_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    Division_Id = 0,
	                    Zone_Name, 
	                    Circle_Name, 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_HRMSEmployeeDetails.Is_VerifiedF, 0) = 1 then 1 else 0 end)
                    from tbl_HRMSEmployeeDetails 
                    join tbl_HRMSEmployeeJuridiction on tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_Status = 1
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where tbl_HRMSEmployeeDetails.HRMSEmployee_Status = 1 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId, 0) = 0 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) > 0
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, Zone_Name, Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    Circle_Id = 0,
	                    Division_Id = 0,
	                    Zone_Name, 
	                    Circle_Name = '', 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_HRMSEmployeeDetails.Is_VerifiedF, 0) = 1 then 1 else 0 end)
                    from tbl_HRMSEmployeeDetails 
                    join tbl_HRMSEmployeeJuridiction on tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_Status = 1
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId
                    where tbl_HRMSEmployeeDetails.HRMSEmployee_Status = 1 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) = 0 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId, 0) = 0 and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId, 0) > 0
                    group by tbl_Zone.Zone_Id, Zone_Name 
                    ) tData where 1 = 1";
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Salary Register Summery
    public DataSet get_Salary_Register_Summery(int Zone_Id, int Circle_Id, int Division_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select * from (
                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    tbl_Division.Division_Id,
	                    tbl_Zone.Zone_Name, 
	                    tbl_Circle.Circle_Name, 
	                    tbl_Division.Division_Name, 
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Division.Division_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Name, tbl_Division.Division_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    Division_Id = 0,
	                    tbl_Zone.Zone_Name, 
	                    tbl_Circle.Circle_Name, 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMS_Salary_Details.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    Circle_Id = 0,
	                    Division_Id = 0,
	                    tbl_Zone.Zone_Name, 
	                    Circle_Name = '', 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMS_Salary_Details.Zone_Id
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name 
                    ) tData where 1 = 1";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());

        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Salary_Register_Details_All(int Zone_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select * from (
                    select 
	                    tbl_Zone.Zone_Id Zone_Id_F,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Name, 
	                    tbl_Division.Division_Name,
	                    HRMS_Salary_Details_Id,
						HRMS_Salary_Details_HRMSEmployee_Id,
						Division,
						Class,
						Name,
						Designation_Id,
						Designation,
						Emp_Code,
						DOB,
						DOJ,
						Aadhar_No,
						PAN,
						PRAN_No,
						Basic,
						Grade_Pay,
						DA,
						HRA,
						MA,
						Personal_Pay,
						Special_Pay,
						Other_All,
						Gross_Sal,
						Employer_NPS_cont,
						Employer_NPS_cont_arr,
						Total_Gross_Sal,
						GPF,
						GPF_Adv,
						GIS,
						Deduction_Total_HQ,
						Income_Tax,
						NPS_Employee,
						NPS_Employee_Arr,
						Deduction_Total_Paid,
						HRA1,
						Colony_Maintance,
						Motor_Vehicle_Deduction,
						Other_Deduction,
						Deduction_Total_Not_Paid,
						Total_Deduction,
						Net_Salary,
						Net_Salary_Employee,
						Account_No,
						IFSC_Code,
						Is_Verified,
						HRMS_Employee_Code,
						Verified_On,
						Is_VerifiedF,
						Verified_OnF,
						DOR,
						GPF_No 
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond 

                    union all

                    select 
	                    tbl_Zone.Zone_Id Zone_Id_F,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Name, 
	                    Division_Name = '',
	                    HRMS_Salary_Details_Id,
						HRMS_Salary_Details_HRMSEmployee_Id,
						Division,
						Class,
						Name,
						Designation_Id,
						Designation,
						Emp_Code,
						DOB,
						DOJ,
						Aadhar_No,
						PAN,
						PRAN_No,
						Basic,
						Grade_Pay,
						DA,
						HRA,
						MA,
						Personal_Pay,
						Special_Pay,
						Other_All,
						Gross_Sal,
						Employer_NPS_cont,
						Employer_NPS_cont_arr,
						Total_Gross_Sal,
						GPF,
						GPF_Adv,
						GIS,
						Deduction_Total_HQ,
						Income_Tax,
						NPS_Employee,
						NPS_Employee_Arr,
						Deduction_Total_Paid,
						HRA1,
						Colony_Maintance,
						Motor_Vehicle_Deduction,
						Other_Deduction,
						Deduction_Total_Not_Paid,
						Total_Deduction,
						Net_Salary,
						Net_Salary_Employee,
						Account_No,
						IFSC_Code,
						Is_Verified,
						HRMS_Employee_Code,
						Verified_On,
						Is_VerifiedF,
						Verified_OnF,
						DOR,
						GPF_No 
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMS_Salary_Details.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond 

                    union all

                    select 
	                    tbl_Zone.Zone_Id Zone_Id_F,
	                    tbl_Zone.Zone_Name,
	                    Circle_Name = '', 
	                    Division_Name = '',
	                    HRMS_Salary_Details_Id,
						HRMS_Salary_Details_HRMSEmployee_Id,
						Division,
						Class,
						Name,
						Designation_Id,
						Designation,
						Emp_Code,
						DOB,
						DOJ,
						Aadhar_No,
						PAN,
						PRAN_No,
						Basic,
						Grade_Pay,
						DA,
						HRA,
						MA,
						Personal_Pay,
						Special_Pay,
						Other_All,
						Gross_Sal,
						Employer_NPS_cont,
						Employer_NPS_cont_arr,
						Total_Gross_Sal,
						GPF,
						GPF_Adv,
						GIS,
						Deduction_Total_HQ,
						Income_Tax,
						NPS_Employee,
						NPS_Employee_Arr,
						Deduction_Total_Paid,
						HRA1,
						Colony_Maintance,
						Motor_Vehicle_Deduction,
						Other_Deduction,
						Deduction_Total_Not_Paid,
						Total_Deduction,
						Net_Salary,
						Net_Salary_Employee,
						Account_No,
						IFSC_Code,
						Is_Verified,
						HRMS_Employee_Code,
						Verified_On,
						Is_VerifiedF,
						Verified_OnF,
						DOR,
						GPF_No 
                    from tbl_HRMS_Salary_Details 
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMS_Salary_Details.Zone_Id
                    where HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond 
                    ) tData where 1 = 1 ";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id_F = '" + Zone_Id + "'";
        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name, Class, Emp_Code, Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Salary_Register_Details_Verification(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    Zone_Name,
	                    Circle_Name, 
	                    Division_Name,
	                    tbl_HRMSEmployeeDetails.HRMSEmployee_Id, 
                        tbl_HRMSEmployeeDetails.HRMSEmployee_Name,
                        Designation = '',
                        Class = '',
                        tbl_HRMSEmployeeDetails.HRMSEmployee_SpouseName,
                        tbl_HRMSEmployeeDetails.HRMSEmployee_FatherName,
                        DOB = convert(char(10), tbl_HRMSEmployeeDetails.HRMSEmployee_DOB, 103),
                        AppointmentDate = convert(char(10), tbl_HRMSEmployeeDetails.HRMSEmployee_AppointmentDate, 103),
                        DOJ = convert(char(10), tbl_HRMSEmployeeDetails.HRMSEmployee_JoinDateInService, 103),
                        tbl_HRMSEmployeeDetails.HRMSEmployee_DepartmentalEmployeeCode,
                        tbl_HRMSEmployeeDetails.HRMSEmployee_HRMSCode,
                        tbl_HRMSEmployeeDetails.HRMSEmployee_AadharNo,
                        tbl_HRMSEmployeeDetails.HRMSEmployee_PANNo,
                        Is_Verified = tbl_HRMSEmployeeDetails.Is_VerifiedF,
                        DOR = convert(char(10), tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_RetirementDate, 103), 
                        tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_GPF,
                        tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_PRAAN, 
                        tbl_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_AccountNo, 
                        tbl_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_IFSC_Code
                    from tbl_HRMSEmployeeDetails
					join tbl_HRMSEmployeeJuridiction on tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_Status = 1
					left join tbl_HRMSEmployeeBankDetails on HRMSEmployeeBankDetails_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and HRMSEmployeeBankDetails_Status = 1
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId
                    left join tbl_Circle on tbl_Circle.Circle_Id = case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) = 0 then Division_CircleId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId end
                    left join tbl_Zone on tbl_Zone.Zone_Id = case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId, 0) = 0 then Circle_ZoneId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId end
                    where tbl_HRMSEmployeeDetails.HRMSEmployee_Status = 1 ";
        if (Zone_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId, 0) = 0 then Circle_ZoneId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_ZoneId end) = '" + Zone_Id + "'";
            if (Circle_Id > 0)
            {
                strQuery += " and (case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) = 0 then Division_CircleId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId end) = '" + Circle_Id + "'";
                if (Division_Id > 0)
                {
                    strQuery += " and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId = '" + Division_Id + "'";
                }
                else
                {
                    strQuery += " and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId, 0) = 0";
                }
            }
            else
            {
                strQuery += " and isnull((case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) = 0 then Division_CircleId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId end), 0) = 0";
            }
        }
        else if (Circle_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId, 0) = 0 then Division_CircleId else tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_CircleId end) = '" + Circle_Id + "'";
            if (Division_Id > 0)
            {
                strQuery += " and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId = '" + Division_Id + "'";
            }
            else
            {
                strQuery += " and isnull(tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId, 0) = 0";
            }
        }
        else if (Division_Id > 0)
        {
            strQuery += " and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_DivisionId = '" + Division_Id + "'";
        }
        else
        {

        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name, HRMSEmployee_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Salary_Register_Details(int Zone_Id, int Circle_Id, int Division_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Name, 
	                    tbl_Division.Division_Name,
	                    HRMS_Salary_Details_Id,
						HRMS_Salary_Details_HRMSEmployee_Id,
						Division,
						Class,
						Name,
						Designation_Id,
						Designation,
						Emp_Code,
						DOB,
						DOJ,
						Aadhar_No,
						PAN,
						PRAN_No,
						Basic,
						Grade_Pay,
						DA,
						HRA,
						MA,
						Personal_Pay,
						Special_Pay,
						Other_All,
						Gross_Sal,
						Employer_NPS_cont,
						Employer_NPS_cont_arr,
						Total_Gross_Sal,
						GPF,
						GPF_Adv,
						GIS,
						Deduction_Total_HQ,
						Income_Tax,
						NPS_Employee,
						NPS_Employee_Arr,
						Deduction_Total_Paid,
						HRA1,
						Colony_Maintance,
						Motor_Vehicle_Deduction,
						Other_Deduction,
						Deduction_Total_Not_Paid,
						Total_Deduction,
						Net_Salary,
						Net_Salary_Employee,
						Account_No,
						IFSC_Code,
						Is_Verified,
						HRMS_Employee_Code,
						Verified_On,
						Is_VerifiedF,
						Verified_OnF,
						DOR,
						GPF_No 
                    from tbl_HRMS_Salary_Details
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = case when isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 then Division_CircleId else tbl_HRMS_Salary_Details.Circle_Id end
                    left join tbl_Zone on tbl_Zone.Zone_Id = case when isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_HRMS_Salary_Details.Zone_Id end
                    where HRMS_Salary_Details_Status = 1 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_HRMS_Salary_Details.Zone_Id end) = '" + Zone_Id + "'";
            if (Circle_Id > 0)
            {
                strQuery += " and (case when isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 then Division_CircleId else tbl_HRMS_Salary_Details.Circle_Id end) = '" + Circle_Id + "'";
                if (Division_Id > 0)
                {
                    strQuery += " and tbl_HRMS_Salary_Details.Division_Id = '" + Division_Id + "'";
                }
                else
                {
                    strQuery += " and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0";
                }
            }
            else
            {
                strQuery += " and isnull((case when isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 then Division_CircleId else tbl_HRMS_Salary_Details.Circle_Id end), 0) = 0";
            }
        }
        else if (Circle_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 then Division_CircleId else tbl_HRMS_Salary_Details.Circle_Id end) = '" + Circle_Id + "'";
            if (Division_Id > 0)
            {
                strQuery += " and tbl_HRMS_Salary_Details.Division_Id = '" + Division_Id + "'";
            }
            else
            {
                strQuery += " and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0";
            }
        }
        else if (Division_Id > 0)
        {
            strQuery += " and tbl_HRMS_Salary_Details.Division_Id = '" + Division_Id + "'";
        }
        else
        {

        }
        strQuery += "order by tbl_Zone.Zone_Name, tbl_Circle.Circle_Name, tbl_Division.Division_Name, Class, Emp_Code, Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Update_Salary_Verification(string Account_No, string IFSC_Code, string HRMS_Employee_Code, string DOB, string DOJ, string DOR, string PANNo, string AadharNo, string PRANNo, string GPFNo, int HRMSEmployee_Id)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; Update  tbl_HRMSEmployeeDetails set HRMSEmployee_DOB = convert(date, '" + DOB + "', 103), HRMSEmployee_JoinDateInService = convert(date, '" + DOJ + "', 103), HRMSEmployee_HRMSCode = '" + HRMS_Employee_Code + "', HRMSEmployee_AadharNo = '" + AadharNo + "', HRMSEmployee_PANNo = '" + PANNo + "', Is_VerifiedF = 1, Verified_OnF = getdate() where HRMSEmployee_Id = '" + HRMSEmployee_Id + "' ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    strQuery = " set dateformat dmy; Update  tbl_HRMSEmployeeJuridiction set HRMSEmployeeJuridiction_RetirementDate = convert(date, '" + DOR + "', 103), HRMSEmployeeJuridiction_GPF = '" + GPFNo + "', HRMSEmployeeJuridiction_PRAAN = '" + PRANNo + "', Is_VerifiedF = 1, Verified_OnF = getdate() where HRMSEmployeeJuridiction_HRMSEmployee_Id = '" + HRMSEmployee_Id + "' and HRMSEmployeeJuridiction_Status = 1 ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    strQuery = " set dateformat dmy; Update  tbl_HRMSEmployeeBankDetails set HRMSEmployeeBankDetails_AccountNo = '" + Account_No + "', HRMSEmployeeBankDetails_IFSC_Code = '" + IFSC_Code + "', Is_VerifiedF = 1, Verified_OnF = getdate() where HRMSEmployeeBankDetails_HRMSEmployee_Id = '" + HRMSEmployee_Id + "' and HRMSEmployeeBankDetails_Status = 1 ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }

    public bool Update_Salary_Verification(int HRMS_Salary_Details_Id, int VerifiedStatus)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; update tbl_HRMS_Salary_Details set Is_Verified = '" + VerifiedStatus + "', Verified_On = getdate() where HRMS_Salary_Details_Id = '" + HRMS_Salary_Details_Id + "' ";
                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }

    public bool Delete_HRMS_Salary_Details(int HRMSEmployee_Id, int person_Id)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; Update  tbl_HRMSEmployeeDetails set HRMSEmployeeBankDetails_Status = 0, HRMSEmployee_ModifiedBy = '" + person_Id + "', HRMSEmployee_ModifiedOn = getdate() where HRMS_Salary_Details_Id = '" + HRMSEmployee_Id + "' ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }

    public bool Delete_HRMS_Salary_Details_For_Month(int HRMS_Salary_Details_Id, int person_Id)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; Update  tbl_HRMS_Salary_Details set HRMS_Salary_Details_Status = 0, HRMS_Salary_Details_ModifiedBy = '" + person_Id + "', HRMS_Salary_Details_ModifiedOn = getdate() where HRMS_Salary_Details_Id = '" + HRMS_Salary_Details_Id + "' ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }

    public bool Insert_HRMS_Salary_Data(DataTable dt, int Zone_Id, int Circle_Id, int Division_id, ref string msg)
    {
        DataSet ds = new DataSet();
        bool flag = false;
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            int i = 0;
            string _Cell = "";
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDt(dt))
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        tbl_HRMS_Salary_Details obj_tbl_HRMS_Salary_Details = new tbl_HRMS_Salary_Details();
                        obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_AddedBy = Convert.ToInt32(Session["Person_Id"].ToString());
                        obj_tbl_HRMS_Salary_Details.Zone_Id = Zone_Id;
                        obj_tbl_HRMS_Salary_Details.Circle_Id = Circle_Id;
                        obj_tbl_HRMS_Salary_Details.Division_Id = Division_id;
                        try
                        {
                            _Cell = "Division";
                            obj_tbl_HRMS_Salary_Details.Division = dt.Rows[i]["Division"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Class";
                            obj_tbl_HRMS_Salary_Details.Class = dt.Rows[i]["Class"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Name";
                            obj_tbl_HRMS_Salary_Details.Name = dt.Rows[i]["Name"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Designation";
                            obj_tbl_HRMS_Salary_Details.Designation = dt.Rows[i]["Designation"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Emp_Code";
                            obj_tbl_HRMS_Salary_Details.Emp_Code = dt.Rows[i]["Emp_Code"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "DOB";
                            obj_tbl_HRMS_Salary_Details.DOB = dt.Rows[i]["DOB"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "DOJ";
                            obj_tbl_HRMS_Salary_Details.DOJ = dt.Rows[i]["DOJ"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Aadhar_No";
                            obj_tbl_HRMS_Salary_Details.Aadhar_No = dt.Rows[i]["Aadhar_No"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "PAN";
                            obj_tbl_HRMS_Salary_Details.PAN = dt.Rows[i]["PAN"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Basic";
                            obj_tbl_HRMS_Salary_Details.Basic = Convert.ToDecimal(dt.Rows[i]["Basic"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Grade_Pay";
                            obj_tbl_HRMS_Salary_Details.Grade_Pay = Convert.ToDecimal(dt.Rows[i]["Grade_Pay"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "DA";
                            obj_tbl_HRMS_Salary_Details.DA = Convert.ToDecimal(dt.Rows[i]["DA"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "HRA";
                            obj_tbl_HRMS_Salary_Details.HRA = Convert.ToDecimal(dt.Rows[i]["HRA"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "MA";
                            obj_tbl_HRMS_Salary_Details.MA = Convert.ToDecimal(dt.Rows[i]["MA"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Personal_Pay";
                            obj_tbl_HRMS_Salary_Details.Personal_Pay = Convert.ToDecimal(dt.Rows[i]["Personal_Pay"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Special_Pay";
                            obj_tbl_HRMS_Salary_Details.Special_Pay = Convert.ToDecimal(dt.Rows[i]["Special_Pay"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Other_All";
                            obj_tbl_HRMS_Salary_Details.Other_All = Convert.ToDecimal(dt.Rows[i]["Other_All"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Gross_Sal";
                            obj_tbl_HRMS_Salary_Details.Gross_Sal = Convert.ToDecimal(dt.Rows[i]["Gross_Sal"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Employer_NPS_cont";
                            obj_tbl_HRMS_Salary_Details.Employer_NPS_cont = Convert.ToDecimal(dt.Rows[i]["Employer_NPS_cont"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Employer_NPS_cont_arr";
                            obj_tbl_HRMS_Salary_Details.Employer_NPS_cont_arr = Convert.ToDecimal(dt.Rows[i]["Employer_NPS_cont_arr"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Total_Gross_Sal";
                            obj_tbl_HRMS_Salary_Details.Total_Gross_Sal = Convert.ToDecimal(dt.Rows[i]["Total_Gross_Sal"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "GPF";
                            obj_tbl_HRMS_Salary_Details.GPF = Convert.ToDecimal(dt.Rows[i]["GPF"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "GPF_Adv";
                            obj_tbl_HRMS_Salary_Details.GPF_Adv = Convert.ToDecimal(dt.Rows[i]["GPF_Adv"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "GIS";
                            obj_tbl_HRMS_Salary_Details.GIS = Convert.ToDecimal(dt.Rows[i]["GIS"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Deduction_Total_HQ";
                            obj_tbl_HRMS_Salary_Details.Deduction_Total_HQ = Convert.ToDecimal(dt.Rows[i]["Deduction_Total_HQ"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Income_Tax";
                            obj_tbl_HRMS_Salary_Details.Income_Tax = Convert.ToDecimal(dt.Rows[i]["Income_Tax"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "NPS_Employee";
                            obj_tbl_HRMS_Salary_Details.NPS_Employee = Convert.ToDecimal(dt.Rows[i]["NPS_Employee"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "NPS_Employee_Arr";
                            obj_tbl_HRMS_Salary_Details.NPS_Employee_Arr = Convert.ToDecimal(dt.Rows[i]["NPS_Employee_Arr"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Deduction_Total_Paid";
                            obj_tbl_HRMS_Salary_Details.Deduction_Total_Paid = Convert.ToDecimal(dt.Rows[i]["Deduction_Total_Paid"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "HRA1";
                            obj_tbl_HRMS_Salary_Details.HRA1 = Convert.ToDecimal(dt.Rows[i]["HRA1"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Colony_Maintance";
                            obj_tbl_HRMS_Salary_Details.Colony_Maintance = Convert.ToDecimal(dt.Rows[i]["Colony_Maintance"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Motor_Vehicle_Deduction";
                            obj_tbl_HRMS_Salary_Details.Motor_Vehicle_Deduction = Convert.ToDecimal(dt.Rows[i]["Motor_Vehicle_Deduction"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Other_Deduction";
                            obj_tbl_HRMS_Salary_Details.Other_Deduction = Convert.ToDecimal(dt.Rows[i]["Other_Deduction"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Deduction_Total_Not_Paid";
                            obj_tbl_HRMS_Salary_Details.Deduction_Total_Not_Paid = Convert.ToDecimal(dt.Rows[i]["Deduction_Total_Not_Paid"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Total_Deduction";
                            obj_tbl_HRMS_Salary_Details.Total_Deduction = Convert.ToDecimal(dt.Rows[i]["Total_Deduction"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Net_Salary";
                            obj_tbl_HRMS_Salary_Details.Net_Salary = Convert.ToDecimal(dt.Rows[i]["Net_Salary"].ToString());
                        }
                        catch
                        { }

                        obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Status = 1;

                        Insert_tbl_HRMS_Salary_Details(obj_tbl_HRMS_Salary_Details, trans, cn);
                    }
                }
                msg = "";
                flag = true;
                trans.Commit();
                cn.Close();
            }
            catch (Exception ex)
            {
                msg = "Row: " + (i + 1).ToString() + " Cell: " + _Cell + Environment.NewLine + ex.Message;
                flag = false;
                trans.Rollback();
                cn.Close();
            }
        }
        return flag;
    }

    private void Insert_tbl_HRMS_Salary_Details(tbl_HRMS_Salary_Details obj_tbl_HRMS_Salary_Details, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_HRMS_Salary_Details ([Aadhar_No],[Account_No],[Basic],[Circle_Id],[Class],[Colony_Maintance],[DA],[Deduction_Total_HQ],[Deduction_Total_Not_Paid],[Deduction_Total_Paid],[Designation],[Designation_Id],[Division],[Division_Id],[DOB],[DOJ], [DOR],[Emp_Code],[Employer_NPS_cont],[GIS],[GPF],[GPF_Adv], [GPF_No],[Grade_Pay],[Gross_Sal],[HRA],[HRA1],[HRMS_Employee_Code],[HRMS_Salary_Details_AddedBy],[HRMS_Salary_Details_AddedOn], [HRMS_Salary_Details_HRMSEmployee_Id], [HRMS_Salary_Details_Month],[HRMS_Salary_Details_Status], [HRMS_Salary_Details_Year],[IFSC_Code],[Income_Tax],[MA],[Motor_Vehicle_Deduction],[Name],[Net_Salary],[Net_Salary_Employee],[NPS_Employee],[Other_All],[Other_Deduction],[PAN],[Personal_Pay],[PRAN_No],[Special_Pay],[Total_Deduction],[Total_Gross_Sal],[Zone_Id], [Zone_Name], [Circle_Name], [Employer_NPS_cont_arr], [NPS_Employee_Arr]) values (N'" + obj_tbl_HRMS_Salary_Details.Aadhar_No + "',N'" + obj_tbl_HRMS_Salary_Details.Account_No + "','" + obj_tbl_HRMS_Salary_Details.Basic + "','" + obj_tbl_HRMS_Salary_Details.Circle_Id + "',N'" + obj_tbl_HRMS_Salary_Details.Class + "','" + obj_tbl_HRMS_Salary_Details.Colony_Maintance + "','" + obj_tbl_HRMS_Salary_Details.DA + "','" + obj_tbl_HRMS_Salary_Details.Deduction_Total_HQ + "','" + obj_tbl_HRMS_Salary_Details.Deduction_Total_Not_Paid + "','" + obj_tbl_HRMS_Salary_Details.Deduction_Total_Paid + "',N'" + obj_tbl_HRMS_Salary_Details.Designation + "',N'" + obj_tbl_HRMS_Salary_Details.Designation_Id + "',N'" + obj_tbl_HRMS_Salary_Details.Division + "','" + obj_tbl_HRMS_Salary_Details.Division_Id + "',N'" + obj_tbl_HRMS_Salary_Details.DOB + "',N'" + obj_tbl_HRMS_Salary_Details.DOJ + "', N'" + obj_tbl_HRMS_Salary_Details.DOR + "','" + obj_tbl_HRMS_Salary_Details.Emp_Code + "','" + obj_tbl_HRMS_Salary_Details.Employer_NPS_cont + "','" + obj_tbl_HRMS_Salary_Details.GIS + "','" + obj_tbl_HRMS_Salary_Details.GPF + "','" + obj_tbl_HRMS_Salary_Details.GPF_Adv + "', '" + obj_tbl_HRMS_Salary_Details.GPF_No + "','" + obj_tbl_HRMS_Salary_Details.Grade_Pay + "','" + obj_tbl_HRMS_Salary_Details.Gross_Sal + "','" + obj_tbl_HRMS_Salary_Details.HRA + "','" + obj_tbl_HRMS_Salary_Details.HRA1 + "','" + obj_tbl_HRMS_Salary_Details.HRMS_Employee_Code + "','" + obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_AddedBy + "', getdate(), '" + obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_HRMSEmployee_Id + "', '" + obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Month + "','" + obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Status + "', '" + obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Year + "',N'" + obj_tbl_HRMS_Salary_Details.IFSC_Code + "','" + obj_tbl_HRMS_Salary_Details.Income_Tax + "','" + obj_tbl_HRMS_Salary_Details.MA + "','" + obj_tbl_HRMS_Salary_Details.Motor_Vehicle_Deduction + "',N'" + obj_tbl_HRMS_Salary_Details.Name + "','" + obj_tbl_HRMS_Salary_Details.Net_Salary + "', '" + obj_tbl_HRMS_Salary_Details.Net_Salary_Employee + "','" + obj_tbl_HRMS_Salary_Details.NPS_Employee + "','" + obj_tbl_HRMS_Salary_Details.Other_All + "','" + obj_tbl_HRMS_Salary_Details.Other_Deduction + "',N'" + obj_tbl_HRMS_Salary_Details.PAN + "','" + obj_tbl_HRMS_Salary_Details.Personal_Pay + "', '" + obj_tbl_HRMS_Salary_Details.PRAN_No + "','" + obj_tbl_HRMS_Salary_Details.Special_Pay + "','" + obj_tbl_HRMS_Salary_Details.Total_Deduction + "','" + obj_tbl_HRMS_Salary_Details.Total_Gross_Sal + "','" + obj_tbl_HRMS_Salary_Details.Zone_Id + "', '" + obj_tbl_HRMS_Salary_Details.Zone_Name + "', '" + obj_tbl_HRMS_Salary_Details.Circle_Name + "', '" + obj_tbl_HRMS_Salary_Details.Employer_NPS_cont_arr + "', '" + obj_tbl_HRMS_Salary_Details.NPS_Employee_Arr + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_HRMS_Salary_Details(int Month, int Year, int HRMSEmployee_Id, int Zone_Id, int Circle_Id, int Division_Id, int AddedBy, SqlTransaction trans, SqlConnection cn)
    {
        string JurisdictionCond = "";
        if (Division_Id > 0)
        {
            JurisdictionCond = "D";
        }
        if (Circle_Id > 0 && Division_Id == 0)
        {
            JurisdictionCond = "C";
        }
        if (Zone_Id > 0 && Circle_Id == 0 && Division_Id == 0)
        {
            JurisdictionCond = "Z";
        }
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_HRMS_Salary_Details set HRMS_Salary_Details_Status = 0, HRMS_Salary_Details_ModifiedOn = getdate(), HRMS_Salary_Details_ModifiedBy = '" + AddedBy + "' where HRMS_Salary_Details_HRMSEmployee_Id = '" + HRMSEmployee_Id + "' and HRMS_Salary_Details_Month = '" + Month + "' and HRMS_Salary_Details_Year = '" + Year + "'";
        if (JurisdictionCond == "Z")
        {
            strQuery += " and Zone_Id = " + Zone_Id.ToString();
        }
        if (JurisdictionCond == "C")
        {
            strQuery += " and Circle_Id = " + Circle_Id.ToString();
        }
        if (JurisdictionCond == "D")
        {
            strQuery += " and Division_Id = " + Division_Id.ToString();
        }
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Salary Statement
    public DataSet get_Salary_Register_Statement_Zone_Wise(int Zone_Id, int Month, int Year, string Class)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    tData.Zone_Id,
	                    tData.Zone_Name,
	                    Total_Employee = sum(isnull(Total_Employee, 0)),
	                    Basic = convert(decimal(18, 2), sum(isnull(Basic, 0)) / 100000),
	                    Grade_Pay = convert(decimal(18, 2), sum(isnull(Grade_Pay, 0)) / 100000),
	                    DA = convert(decimal(18, 2), sum(isnull(DA, 0)) / 100000),
	                    HRA = convert(decimal(18, 2), sum(isnull(HRA, 0)) / 100000),
	                    MA = convert(decimal(18, 2), sum(isnull(MA, 0)) / 100000),
	                    Personal_Pay = convert(decimal(18, 2), sum(isnull(Personal_Pay, 0)) / 100000),
	                    Special_Pay = convert(decimal(18, 2), sum(isnull(Special_Pay, 0)) / 100000),
	                    Other_All = convert(decimal(18, 2), sum(isnull(Other_All, 0)) / 100000),
	                    Gross_Sal = convert(decimal(18, 2), sum(isnull(Gross_Sal, 0)) / 100000),
	                    Employer_NPS_cont = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont, 0)) / 100000),
	                    Employer_NPS_cont_arr = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont_arr, 0)) / 100000),
	                    Total_Gross_Sal = convert(decimal(18, 2), sum(isnull(Total_Gross_Sal, 0)) / 100000),
	                    GPF = convert(decimal(18, 2), sum(isnull(GPF, 0)) / 100000),
	                    GPF_Adv = convert(decimal(18, 2), sum(isnull(GPF_Adv, 0)) / 100000),
	                    GIS = convert(decimal(18, 2), sum(isnull(GIS, 0)) / 100000),
	                    Deduction_Total_HQ = convert(decimal(18, 2), sum(isnull(Deduction_Total_HQ, 0)) / 100000),
	                    Income_Tax = convert(decimal(18, 2), sum(isnull(Income_Tax, 0)) / 100000),
	                    NPS_Employee = convert(decimal(18, 2), sum(isnull(NPS_Employee, 0)) / 100000),
	                    NPS_Employee_Arr = convert(decimal(18, 2), sum(isnull(NPS_Employee_Arr, 0)) / 100000),
	                    Deduction_Total_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Paid, 0)) / 100000),
	                    HRA1 = convert(decimal(18, 2), sum(isnull(HRA1, 0)) / 100000),
	                    Colony_Maintance = convert(decimal(18, 2), sum(isnull(Colony_Maintance, 0)) / 100000),
	                    Motor_Vehicle_Deduction = convert(decimal(18, 2), sum(isnull(Motor_Vehicle_Deduction, 0)) / 100000),
	                    Other_Deduction = convert(decimal(18, 2), sum(isnull(Other_Deduction, 0)) / 100000),
	                    Deduction_Total_Not_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Not_Paid, 0)) / 100000),
	                    Total_Deduction = convert(decimal(18, 2), sum(isnull(Total_Deduction, 0)) / 100000),
	                    Net_Salary = convert(decimal(18, 2), sum(isnull(Net_Salary, 0)) / 100000), 
                        Net_Salary_Employee = convert(decimal(18, 2), sum(isnull(Net_Salary_Employee, 0)) / 100000) 

                    from (
                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond ClassCondition
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMS_Salary_Details.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond ClassCondition
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMS_Salary_Details.Zone_Id
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond ClassCondition
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name
                    ) tData where 1 = 1 Zone_IdCond group by tData.Zone_Id, tData.Zone_Name
                    order by tData.Zone_Name";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", "and tData.Zone_Id = '" + Zone_Id.ToString() + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Class != "")
        {
            strQuery = strQuery.Replace("ClassCondition", "and isnull(Class, '') in (" + Class.ToString() + ")");
        }
        else
        {
            strQuery = strQuery.Replace("ClassCondition", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Salary_Register_Statement_Circle_Wise(int Zone_Id, int Circle_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    tData.Zone_Id,
	                    tData.Zone_Name,
	                    tData.Circle_Id,
	                    tData.Circle_Name,
	                    Total_Employee = sum(isnull(Total_Employee, 0)),
	                    Basic = convert(decimal(18, 2), sum(isnull(Basic, 0)) / 100000),
	                    Grade_Pay = convert(decimal(18, 2), sum(isnull(Grade_Pay, 0)) / 100000),
	                    DA = convert(decimal(18, 2), sum(isnull(DA, 0)) / 100000),
	                    HRA = convert(decimal(18, 2), sum(isnull(HRA, 0)) / 100000),
	                    MA = convert(decimal(18, 2), sum(isnull(MA, 0)) / 100000),
	                    Personal_Pay = convert(decimal(18, 2), sum(isnull(Personal_Pay, 0)) / 100000),
	                    Special_Pay = convert(decimal(18, 2), sum(isnull(Special_Pay, 0)) / 100000),
	                    Other_All = convert(decimal(18, 2), sum(isnull(Other_All, 0)) / 100000),
	                    Gross_Sal = convert(decimal(18, 2), sum(isnull(Gross_Sal, 0)) / 100000),
	                    Employer_NPS_cont = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont, 0)) / 100000),
	                    Employer_NPS_cont_arr = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont_arr, 0)) / 100000),
	                    Total_Gross_Sal = convert(decimal(18, 2), sum(isnull(Total_Gross_Sal, 0)) / 100000),
	                    GPF = convert(decimal(18, 2), sum(isnull(GPF, 0)) / 100000),
	                    GPF_Adv = convert(decimal(18, 2), sum(isnull(GPF_Adv, 0)) / 100000),
	                    GIS = convert(decimal(18, 2), sum(isnull(GIS, 0)) / 100000),
	                    Deduction_Total_HQ = convert(decimal(18, 2), sum(isnull(Deduction_Total_HQ, 0)) / 100000),
	                    Income_Tax = convert(decimal(18, 2), sum(isnull(Income_Tax, 0)) / 100000),
	                    NPS_Employee = convert(decimal(18, 2), sum(isnull(NPS_Employee, 0)) / 100000),
	                    NPS_Employee_Arr = convert(decimal(18, 2), sum(isnull(NPS_Employee_Arr, 0)) / 100000),
	                    Deduction_Total_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Paid, 0)) / 100000),
	                    HRA1 = convert(decimal(18, 2), sum(isnull(HRA1, 0)) / 100000),
	                    Colony_Maintance = convert(decimal(18, 2), sum(isnull(Colony_Maintance, 0)) / 100000),
	                    Motor_Vehicle_Deduction = convert(decimal(18, 2), sum(isnull(Motor_Vehicle_Deduction, 0)) / 100000),
	                    Other_Deduction = convert(decimal(18, 2), sum(isnull(Other_Deduction, 0)) / 100000),
	                    Deduction_Total_Not_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Not_Paid, 0)) / 100000),
	                    Total_Deduction = convert(decimal(18, 2), sum(isnull(Total_Deduction, 0)) / 100000),
	                    Net_Salary = convert(decimal(18, 2), sum(isnull(Net_Salary, 0)) / 100000), 
	                    Net_Salary_Employee = convert(decimal(18, 2), sum(isnull(Net_Salary_Employee, 0)) / 100000) 
                    from (
                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Id,
	                    tbl_Circle.Circle_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Id, tbl_Circle.Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Id,
	                    tbl_Circle.Circle_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMS_Salary_Details.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Id, tbl_Circle.Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    Circle_Id = 0,
	                    Circle_Name = '',
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMS_Salary_Details.Zone_Id
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name
                    ) tData where 1 = 1 WhereConditionZone WhereConditionCircle group by tData.Zone_Id, tData.Zone_Name, tData.Circle_Id, tData.Circle_Name";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery = strQuery.Replace("WhereConditionZone", "and isnull(tData.Zone_Id, 0) = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("WhereConditionZone", "");
        }
        if (Circle_Id > 0)
        {
            strQuery = strQuery.Replace("WhereConditionCircle", "and tData.Circle_Id = '" + Circle_Id.ToString() + "'");
        }
        else
        {
            strQuery = strQuery.Replace("WhereConditionCircle", "");
        }
        strQuery += " order by tData.Zone_Name, Circle_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Salary_Register_Statement_Division_Wise(int Zone_Id, int Circle_Id, int Division_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    tData.Zone_Id,
	                    tData.Zone_Name,
	                    tData.Circle_Id,
	                    tData.Circle_Name,
	                    tData.Division_Id,
	                    tData.Division_Name,
	                    Total_Employee = sum(isnull(Total_Employee, 0)),
	                    Basic = convert(decimal(18, 2), sum(isnull(Basic, 0)) / 100000),
	                    Grade_Pay = convert(decimal(18, 2), sum(isnull(Grade_Pay, 0)) / 100000),
	                    DA = convert(decimal(18, 2), sum(isnull(DA, 0)) / 100000),
	                    HRA = convert(decimal(18, 2), sum(isnull(HRA, 0)) / 100000),
	                    MA = convert(decimal(18, 2), sum(isnull(MA, 0)) / 100000),
	                    Personal_Pay = convert(decimal(18, 2), sum(isnull(Personal_Pay, 0)) / 100000),
	                    Special_Pay = convert(decimal(18, 2), sum(isnull(Special_Pay, 0)) / 100000),
	                    Other_All = convert(decimal(18, 2), sum(isnull(Other_All, 0)) / 100000),
	                    Gross_Sal = convert(decimal(18, 2), sum(isnull(Gross_Sal, 0)) / 100000),
	                    Employer_NPS_cont = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont, 0)) / 100000),
	                    Employer_NPS_cont_arr = convert(decimal(18, 2), sum(isnull(Employer_NPS_cont_arr, 0)) / 100000),
	                    Total_Gross_Sal = convert(decimal(18, 2), sum(isnull(Total_Gross_Sal, 0)) / 100000),
	                    GPF = convert(decimal(18, 2), sum(isnull(GPF, 0)) / 100000),
	                    GPF_Adv = convert(decimal(18, 2), sum(isnull(GPF_Adv, 0)) / 100000),
	                    GIS = convert(decimal(18, 2), sum(isnull(GIS, 0)) / 100000),
	                    Deduction_Total_HQ = convert(decimal(18, 2), sum(isnull(Deduction_Total_HQ, 0)) / 100000),
	                    Income_Tax = convert(decimal(18, 2), sum(isnull(Income_Tax, 0)) / 100000),
	                    NPS_Employee = convert(decimal(18, 2), sum(isnull(NPS_Employee, 0)) / 100000),
	                    NPS_Employee_Arr = convert(decimal(18, 2), sum(isnull(NPS_Employee_Arr, 0)) / 100000),
	                    Deduction_Total_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Paid, 0)) / 100000),
	                    HRA1 = convert(decimal(18, 2), sum(isnull(HRA1, 0)) / 100000),
	                    Colony_Maintance = convert(decimal(18, 2), sum(isnull(Colony_Maintance, 0)) / 100000),
	                    Motor_Vehicle_Deduction = convert(decimal(18, 2), sum(isnull(Motor_Vehicle_Deduction, 0)) / 100000),
	                    Other_Deduction = convert(decimal(18, 2), sum(isnull(Other_Deduction, 0)) / 100000),
	                    Deduction_Total_Not_Paid = convert(decimal(18, 2), sum(isnull(Deduction_Total_Not_Paid, 0)) / 100000),
	                    Total_Deduction = convert(decimal(18, 2), sum(isnull(Total_Deduction, 0)) / 100000),
	                    Net_Salary = convert(decimal(18, 2), sum(isnull(Net_Salary, 0)) / 100000), 
	                    Net_Salary_Employee = convert(decimal(18, 2), sum(isnull(Net_Salary_Employee, 0)) / 100000) 
                    from (
                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Id,
	                    tbl_Circle.Circle_Name,
						tbl_Division.Division_Id,
	                    tbl_Division.Division_Name,
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)),
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Division on tbl_Division.Division_Id = tbl_HRMS_Salary_Details.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Id, tbl_Circle.Circle_Name, tbl_Division.Division_Id, tbl_Division.Division_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Id,
	                    tbl_Circle.Circle_Name,
						Division_Id = 0,
						Division_Name = '',
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_HRMS_Salary_Details.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Id, tbl_Circle.Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id,
	                    tbl_Zone.Zone_Name,
	                    Circle_Id = 0,
	                    Circle_Name = '',
						Division_Id = 0,
						Division_Name = '',
	                    count(*) Total_Employee,
	                    Basic = sum(isnull(Basic, 0)),
	                    Grade_Pay = sum(isnull(Grade_Pay, 0)),
	                    DA = sum(isnull(DA, 0)),
	                    HRA = sum(isnull(HRA, 0)),
	                    MA = sum(isnull(MA, 0)),
	                    Personal_Pay = sum(isnull(Personal_Pay, 0)),
	                    Special_Pay = sum(isnull(Special_Pay, 0)),
	                    Other_All = sum(isnull(Other_All, 0)),
	                    Gross_Sal = sum(isnull(Gross_Sal, 0)),
	                    Employer_NPS_cont = sum(isnull(Employer_NPS_cont, 0)),
	                    Employer_NPS_cont_arr = sum(isnull(Employer_NPS_cont_arr, 0)),
	                    Total_Gross_Sal = sum(isnull(Total_Gross_Sal, 0)),
	                    GPF = sum(isnull(GPF, 0)),
	                    GPF_Adv = sum(isnull(GPF_Adv, 0)),
	                    GIS = sum(isnull(GIS, 0)),
	                    Deduction_Total_HQ = sum(isnull(Deduction_Total_HQ, 0)),
	                    Income_Tax = sum(isnull(Income_Tax, 0)),
	                    NPS_Employee = sum(isnull(NPS_Employee, 0)),
	                    NPS_Employee_Arr = sum(isnull(NPS_Employee_Arr, 0)),
	                    Deduction_Total_Paid = sum(isnull(Deduction_Total_Paid, 0)),
	                    HRA1 = sum(isnull(HRA1, 0)),
	                    Colony_Maintance = sum(isnull(Colony_Maintance, 0)),
	                    Motor_Vehicle_Deduction = sum(isnull(Motor_Vehicle_Deduction, 0)),
	                    Other_Deduction = sum(isnull(Other_Deduction, 0)),
	                    Deduction_Total_Not_Paid = sum(isnull(Deduction_Total_Not_Paid, 0)),
	                    Total_Deduction = sum(isnull(Total_Deduction, 0)),
	                    Net_Salary = sum(isnull(Net_Salary, 0)), 
	                    Net_Salary_Employee = sum(isnull(Net_Salary_Employee, 0))
                    from tbl_HRMS_Salary_Details
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_HRMS_Salary_Details.Zone_Id
                    where isnull(Is_Verified, 0) = 1 and HRMS_Salary_Details_Status = 1 and isnull(tbl_HRMS_Salary_Details.Circle_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Division_Id, 0) = 0 and isnull(tbl_HRMS_Salary_Details.Zone_Id, 0) > 0 and HRMS_Salary_Details_Month = MonthCond and HRMS_Salary_Details_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name
                    ) tData where 1 = 1 WhereConditionZone WhereConditionCircle WhereConditionDivision 
					group by tData.Zone_Id, tData.Zone_Name, tData.Circle_Id, tData.Circle_Name, tData.Division_Id, tData.Division_Name";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery = strQuery.Replace("WhereConditionZone", "and isnull(tData.Zone_Id, 0) = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("WhereConditionZone", "");
        }
        if (Circle_Id > 0)
        {
            strQuery = strQuery.Replace("WhereConditionCircle", "and isnull(tData.Circle_Id, 0) = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("WhereConditionCircle", "");
        }
        if (Division_Id > 0)
        {
            strQuery = strQuery.Replace("WhereConditionDivision", "and isnull(tData.Division_Id, 0) = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("WhereConditionDivision", "");
        }
        strQuery += " order by tData.Zone_Name, tData.Circle_Name, tData.Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Vendor Regisration
    public bool get_Vendor_Details(string MobileNo, ref int Person_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    * 
                    from tbl_PersonDetail
                    join tbl_PersonJuridiction on Person_Id = PersonJuridiction_PersonId
                    where Person_Status = 1 and PersonJuridiction_Status = 1 and PersonJuridiction_UserTypeId = 5 and (Person_Mobile1 = '" + MobileNo + "' or Person_Mobile2 = '" + MobileNo + "')";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
            Person_Id = Convert.ToInt32(ds.Tables[0].Rows[0]["Person_Id"].ToString());
            return true;
        }
        catch
        {
            Person_Id = 0;
            ds = null;
            return false;
        }
    }

    public bool Insert_tbl_Vendor(tbl_Vendor obj_tbl_Vendor)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Insert_tbl_Vendor(obj_tbl_Vendor, trans, cn);
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_Vendor(tbl_Vendor obj_tbl_Vendor, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Vendor ( [Vendor_AddedBy],[Vendor_AddedOn],[Vendor_Name],[Vendor_Status],[Vendor_FormName],[Vendor_MobileNo], [Vendor_MobileNo2],[Vendor_GSTIN],[Vendor_Password], [Vendor_Person_Id], [Vendor_MobileNo1], [Vendor_Type], [Vendor_FirmNameJV]) values('" + obj_tbl_Vendor.Vendor_AddedBy + "', getdate(), N'" + obj_tbl_Vendor.Vendor_Name + "','" + obj_tbl_Vendor.Vendor_Status + "', '" + obj_tbl_Vendor.Vendor_FirmName + "', '" + obj_tbl_Vendor.Vendor_MobileNo + "', '" + obj_tbl_Vendor.Vendor_MobileNo2 + "', '" + obj_tbl_Vendor.Vendor_GSTIN + "', '" + obj_tbl_Vendor.Vendor_Password + "', '" + obj_tbl_Vendor.Vendor_Person_Id + "', '" + obj_tbl_Vendor.Vendor_MobileNo1 + "', '" + obj_tbl_Vendor.Vendor_Type + "', '" + obj_tbl_Vendor.Vendor_FirmNameJV + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    public DataSet get_Vendor_Details_Login(string MobileNo, string Password)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    *, 
                        ServerDate = convert(char(10), getdate(), 103)
                    from tbl_Vendor
                    where Vendor_Status = 1 AND Vendor_Password = '" + Password + "' and (Vendor_MobileNo = '" + MobileNo + "' or Vendor_MobileNo1 = '" + MobileNo + "' or Vendor_MobileNo2 = '" + MobileNo + "') ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
            return ds;
        }
        catch
        {
            ds = null;
            return ds;
        }
    }
    #endregion

    #region Get Shadow EMB Details
    public DataSet get_tbl_ProjectWorkPkgVendorWise(int Vendor_Id, int Project_Id)
    {
        string SanctionedCost = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
						ProjectWorkPkg_Id,
						ProjectWorkPkg_Work_Id,
                        ProjectWorkPkg_Code, 
						ProjectWorkPkg_Name,
                        ProjectWorkPkg_Name_Code = isnull(ProjectWorkPkg_Code, '') + ' - ' + ProjectWorkPkg_Name,
						ProjectWorkPkg_AgreementAmount,
                        ProjectWorkPkg_AgreementAmount_RS = convert(decimal(18,0), (Isnull(ProjectWorkPkg_AgreementAmount,0)*100000)), 
                        tbl_ProjectWorkPkgDoc.ProjectWorkPkg_Agreement_Path,
						ProjectWorkPkg_Agreement_Date = convert(char(10), ProjectWorkPkg_Agreement_Date, 103),
                        ProjectWorkPkg_Due_Date = convert(char(10), ProjectWorkPkg_Due_Date, 103), 
                        ProjectWorkPkg_Start_Date = convert(char(10), ProjectWorkPkg_Start_Date, 103), 
						ProjectWorkPkg_Agreement_No,
						ProjectWorkPkg_Vendor_Id,
						ProjectWorkPkg_Staff_Id,
						Vendor_Name = Vendor.Person_Name,
						Vendor_Mobile = Vendor.Person_Mobile1,
						List_ReportingStaff_JEAPE_Name,
						List_ReportingStaff_AEPE_Name,
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode,
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DistrictId, 
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
                        ProjectWorkPkg_LockedOn, 
                        ProjectWorkPkg_Locked_By,
                        Total_BOQ = convert(varchar, isnull(t_PackageBOQ.Total_Approved, '0')) +' / ' + convert(varchar, isnull(t_PackageBOQ.Total_BOQ, '0')), 
                        Total_EMB = convert(varchar, isnull(t_PackageEMB.Total_Approved, '0')) +' / ' + convert(varchar, isnull(t_PackageEMB.Total_EMB, '0')),
                        isnull(ProjectWorkPkg_LastRABillNo,'0') as ProjectWorkPkg_LastRABillNo,
                        ProjectWorkPkg_ApprovalFile_Path, 
                        ProjectWorkPkg_LastRABillDate = convert(char(10), ProjectWorkPkg_LastRABillDate, 103), 
                        ProjectWorkPkg_LastRABillNo,
                        tbl_ProjectWorkPkgDoc.ProjectWorkPkg_Agreement_Path,
                        tbl_ProjectWorkPkgDoc.ProjectWorkPkg_Mobelization_Path,
                        tbl_ProjectWorkPkgDoc.ProjectWorkPkg_BankGurantee_Path,
                        tbl_ProjectWorkPkgDoc.ProjectWorkPkg_PerformanceSecurity_Path, 
						tbl_ProjectWorkPkgDoc.Agreement, 
						tbl_ProjectWorkPkgDoc.BankGurantee,
						tbl_ProjectWorkPkgDoc.Mobelization,
						tbl_ProjectWorkPkgDoc.PerformanceSecurity,
						tbl_ProjectWorkPkgDoc.LD,
						tbl_ProjectWorkPkgDoc.FC,
						tbl_ProjectWorkPkgDoc.TE,
                        ProjectWorkPkg_GST = isnull(ProjectWorkPkg_GST, 'Exclude GST'),			
                        ProjectWorkPkg_Percent = case when isnull(ProjectWorkPkg_Percent, 0) = 0 then 12 else ProjectWorkPkg_Percent end,		
                        ProjectWorkPkg_ExtendDate = case when ProjectWorkPkg_ExtendDate is null then convert(char(10), ProjectWorkPkg_Due_Date, 103) else convert(char(10), ProjectWorkPkg_ExtendDate, 103) end, 
                        ProjectWorkPkg_PhysicallyCompleted
                    from tbl_ProjectWorkPkg
                    join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
					left join tbl_PersonDetail Vendor on Vendor.Person_Id = ProjectWorkPkg_Vendor_Id
					left join tbl_PersonDetail Staff on Staff.Person_Id = ProjectWorkPkg_Staff_Id

                    left join (select PackageBOQ_Package_Id, Total_BOQ = count(*), Total_Approved = sum(case when isnull(tbl_PackageBOQ_Approval.PackageBOQ_Approval_Id, 0) > 1 then 1 else 0 end) from tbl_PackageBOQ left join (select ROW_NUMBER() over (partition by PackageBOQ_Approval_PackageBOQ_Id order by PackageBOQ_Approval_Id desc) rrr, PackageBOQ_Approval_Id, PackageBOQ_Approval_PackageBOQ_Id, PackageBOQ_Approval_Date = convert(char(10), PackageBOQ_Approval_Date, 103), PackageBOQ_Approval_No, PackageBOQ_Approval_Comments, PackageBOQ_Approval_Approved_Qty, PackageBOQ_DocumentPath, PackageBOQ_Approval_Person_Id from tbl_PackageBOQ_Approval where PackageBOQ_Approval_Status = 1) tbl_PackageBOQ_Approval on PackageBOQ_Approval_PackageBOQ_Id = PackageBOQ_Id and rrr = 1 where PackageBOQ_Status = 1 group by PackageBOQ_Package_Id) t_PackageBOQ on PackageBOQ_Package_Id = ProjectWorkPkg_Id
                    
                    left join (select PackageEMB_Package_Id, Total_EMB = count(*), Total_Approved = sum(case when isnull(tbl_PackageEMB_Approval.PackageEMB_Approval_Id, 0) > 1 then 1 else 0 end) from tbl_PackageEMB left join (select ROW_NUMBER() over (partition by PackageEMB_Approval_PackageEMB_Id order by PackageEMB_Approval_Id desc) rrr, PackageEMB_Approval_Id, PackageEMB_Approval_PackageEMB_Id, PackageEMB_Approval_Date = convert(char(10), PackageEMB_Approval_Date, 103), PackageEMB_Approval_No, PackageEMB_Approval_Comments, PackageEMB_Approval_Approved_Qty, PackageEMB_DocumentPath, PackageEMB_Approval_Person_Id from tbl_PackageEMB_Approval where PackageEMB_Approval_Status = 1) tbl_PackageEMB_Approval on PackageEMB_Approval_PackageEMB_Id = PackageEMB_Id and rrr = 1 where PackageEMB_Status = 1 group by PackageEMB_Package_Id) t_PackageEMB on PackageEMB_Package_Id = ProjectWorkPkg_Id

					left join 
					(
						select 
							ProjectWorkPkgDoc_WorkPkg_Id, 
							Agreement = sum(case when ProjectWorkPkgDoc_TypeId in (14, 15, 16, 17, 18) then 1 else 0 end),
							BankGurantee = sum(case when ProjectWorkPkgDoc_TypeId = 20 then 1 else 0 end),
							Mobelization = sum(case when ProjectWorkPkgDoc_TypeId = 22 then 1 else 0 end),
							PerformanceSecurity = max(case when ProjectWorkPkgDoc_TypeId = 21 then 1 else 0 end), 
							LD = max(case when ProjectWorkPkgDoc_TypeId = 24 then 1 else 0 end),
							FC = max(case when ProjectWorkPkgDoc_TypeId = 26 then 1 else 0 end),
							TE = max(case when ProjectWorkPkgDoc_TypeId = 19 then 1 else 0 end),
							ProjectWorkPkg_Agreement_Path = max(case when ProjectWorkPkgDoc_TypeId = 14 then ProjectWorkPkgDoc_Path else '' end),
							ProjectWorkPkg_BankGurantee_Path = max(case when ProjectWorkPkgDoc_TypeId = 20 then ProjectWorkPkgDoc_Path else '' end),
							ProjectWorkPkg_Mobelization_Path = max(case when ProjectWorkPkgDoc_TypeId = 22 then ProjectWorkPkgDoc_Path else '' end),
							LD_Path = max(case when ProjectWorkPkgDoc_TypeId = 24 then ProjectWorkPkgDoc_Path else '' end),
							ProjectWorkPkg_PerformanceSecurity_Path = max(case when ProjectWorkPkgDoc_TypeId = 21 then ProjectWorkPkgDoc_Path else '' end),
							ProjectWorkPkg_BG_No = max(case when ProjectWorkPkgDoc_TypeId = 20 then ProjectWorkPkgDoc_DocumentNo else '' end),
							ProjectWorkPkg_MobilizationAdvanceAmount = sum(case when ProjectWorkPkgDoc_TypeId = 22 then isnull(ProjectWorkPkgDoc_Amount, 0) else 0 end)
						from tbl_ProjectWorkPkgDoc 
						where ProjectWorkPkgDoc_Status = 1
						group by ProjectWorkPkgDoc_WorkPkg_Id
					) tbl_ProjectWorkPkgDoc on ProjectWorkPkg_Id = ProjectWorkPkgDoc_WorkPkg_Id 

                    left join(
                               SELECT	ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id,
			                                        STUFF((SELECT ', ' + CAST(Person_Name AS VARCHAR(100)) [text()]
                                                    FROM tbl_ProjectWorkPkg_ReportingStaff_JE_APE
													inner join tbl_PersonDetail on Person_Id=ProjectWorkPkg_ReportingStaff_JE_APE_Person_Id
									                WHERE ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id = t.ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id and tbl_ProjectWorkPkg_ReportingStaff_JE_APE.ProjectWorkPkg_ReportingStaff_JE_APE_Status = 1
                                                    FOR XML PATH(''), TYPE)
                                                .value('.','NVARCHAR(MAX)'),1,2,' ') as List_ReportingStaff_JEAPE_Name
	                                        FROM tbl_ProjectWorkPkg_ReportingStaff_JE_APE t
                                            where t.ProjectWorkPkg_ReportingStaff_JE_APE_Status = 1
	                                        GROUP BY ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id                          
                            ) tbl_ProjectWorkPkg_ReportingStaff_JE_APE on ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id=ProjectWorkPkg_Id
                    left join(
                               SELECT	ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id,
			                                        STUFF((SELECT ', ' + CAST(Person_Name AS VARCHAR(100)) [text()]
                                                    FROM tbl_ProjectWorkPkg_ReportingStaff_AE_PE
													inner join tbl_PersonDetail on Person_Id=ProjectWorkPkg_ReportingStaff_AE_PE_Person_Id
									                WHERE ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id = t.ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id and tbl_ProjectWorkPkg_ReportingStaff_AE_PE.ProjectWorkPkg_ReportingStaff_AE_PE_Status = 1
                                                    FOR XML PATH(''), TYPE)
                                                .value('.','NVARCHAR(MAX)'),1,2,' ') as List_ReportingStaff_AEPE_Name
	                                        FROM tbl_ProjectWorkPkg_ReportingStaff_AE_PE t
                                            where t.ProjectWorkPkg_ReportingStaff_AE_PE_Status = 1
	                                        GROUP BY ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id                          
                            ) tbl_ProjectWorkPkg_ReportingStaff_AE_PE on ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id=ProjectWorkPkg_Id

                    where ProjectWorkPkg_Status = 1 and ProjectWork_Status = 1  ";
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (Vendor_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Vendor_Id = '" + Vendor_Id + "'";
        }
        if (Project_Id != 0)
        {
            strQuery += " and ProjectWork_Project_Id = '" + Project_Id + "'";
        }
        strQuery += " order by ProjectWork_Name, ProjectWorkPkg_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Shadow EMB
    public bool Insert_tbl_PackageEMB_Shadow(tbl_PackageEMB_Master obj_tbl_PackageEMB_Master, List<tbl_PackageEMB> obj_tbl_PackageEMB_Li, int Scheme_Id, string Format_Type)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (obj_tbl_PackageEMB_Master != null && obj_tbl_PackageEMB_Master.PackageEMB_Master_Id == 0)
                {
                    if (obj_tbl_PackageEMB_Master.PackageEMB_Master_VoucherNo == "")
                    {
                        obj_tbl_PackageEMB_Master.PackageEMB_Master_VoucherNo = get_tbl_TransactionNos(VoucherTypes.EMB, obj_tbl_PackageEMB_Master.PackageEMB_Master_Package_Id, trans, cn);
                    }
                    obj_tbl_PackageEMB_Master.PackageEMB_Master_Id = Insert_tbl_PackageEMB_Master1(obj_tbl_PackageEMB_Master, trans, cn);
                }
                for (int i = 0; i < obj_tbl_PackageEMB_Li.Count; i++)
                {
                    if (obj_tbl_PackageEMB_Master != null)
                    {
                        obj_tbl_PackageEMB_Li[i].PackageEMB_PackageEMB_Master_Id = obj_tbl_PackageEMB_Master.PackageEMB_Master_Id;
                    }
                    if (obj_tbl_PackageEMB_Li[i].PackageEMB_Id == 0)
                    {
                        obj_tbl_PackageEMB_Li[i].PackageEMB_Id = Insert_tbl_PackageEMB1(obj_tbl_PackageEMB_Li[i], trans, cn);
                    }
                    else
                    {
                        if (obj_tbl_PackageEMB_Li[i].PackageEMB_Qty == 0)
                        {
                            Delete_tbl_PackageEMB1(obj_tbl_PackageEMB_Li[i], trans, cn);
                        }
                        else if (obj_tbl_PackageEMB_Li[i].PackageEMB_Is_Approved == 0)
                        {
                            Update_tbl_PackageEMB1(obj_tbl_PackageEMB_Li[i], trans, cn);
                        }
                    }

                    if (obj_tbl_PackageEMB_Li[i].PackageEMB_PackageBOQ_Id > 0 && obj_tbl_PackageEMB_Li[i].PackageEMB_TotalAmount == 0 && Format_Type != "N")
                    {
                        DataSet ds1 = new DataSet();
                        string strQuery = "";
                        strQuery = " select PackageEMB_TotalAmount = [dbo].[FN_PackageEMB_Total_Amount](" + obj_tbl_PackageEMB_Li[i].PackageEMB_PackageBOQ_Id + ", " + obj_tbl_PackageEMB_Li[i].PackageEMB_Qty + ")";
                        ds1 = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                        if (AllClasses.CheckDataSet(ds1))
                        {
                            try
                            {
                                obj_tbl_PackageEMB_Li[i].PackageEMB_TotalAmount = Convert.ToDecimal(ds1.Tables[0].Rows[0]["PackageEMB_TotalAmount"].ToString());
                            }
                            catch
                            {
                                obj_tbl_PackageEMB_Li[i].PackageEMB_TotalAmount = 0;
                            }

                            strQuery = "";
                            strQuery = " set dateformat dmy; Update tbl_PackageEMB1 set PackageEMB_TotalAmount = '" + obj_tbl_PackageEMB_Li[i].PackageEMB_TotalAmount + "' where  PackageEMB_Id = '" + obj_tbl_PackageEMB_Li[i].PackageEMB_Id + "' ";
                            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                        }
                    }
                }

                if (Format_Type != "N" && obj_tbl_PackageEMB_Master != null && obj_tbl_PackageEMB_Master.PackageEMB_Master_Id > 0 && obj_tbl_PackageEMB_Master.PackageEMB_Master_Total_Amount == 0)
                {
                    DataSet ds1 = new DataSet();
                    string strQuery = "";
                    strQuery = " select PackageEMB_Master_Total_Amount = [dbo].[FN_PackageEMB_Master_Total_Amount](" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Id + ")";
                    ds1 = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    if (AllClasses.CheckDataSet(ds1))
                    {
                        try
                        {
                            obj_tbl_PackageEMB_Master.PackageEMB_Master_Total_Amount = Convert.ToDecimal(ds1.Tables[0].Rows[0]["PackageEMB_Master_Total_Amount"].ToString());
                        }
                        catch
                        {
                            obj_tbl_PackageEMB_Master.PackageEMB_Master_Total_Amount = 0;
                        }

                        strQuery = "";
                        strQuery = " set dateformat dmy; Update tbl_PackageEMB_Master1 set PackageEMB_Master_Total_Amount = '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Total_Amount + "' where  PackageEMB_Master_Id = '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Id + "' ";
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    }
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private int Insert_tbl_PackageEMB_Master1(tbl_PackageEMB_Master obj_tbl_PackageEMB_Master, SqlTransaction trans, SqlConnection cn)
    {
        DataSet dsInsert = new DataSet();
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_PackageEMB_Master1 ([PackageEMB_Master_AddedBy],[PackageEMB_Master_AddedOn],[PackageEMB_Master_Date],[PackageEMB_Master_Narration],[PackageEMB_Master_Package_Id],[PackageEMB_Master_Status],[PackageEMB_Master_VoucherNo], [PackageEMB_Master_RA_BillNo], [PackageEMB_Master_ProcessType], [PackageEMB_Master_Total_Amount], [PackageEMB_Master_Type], [PackageEMB_Master_IsItemWiseGST]) values ('" + obj_tbl_PackageEMB_Master.PackageEMB_Master_AddedBy + "', getdate(), convert(date, '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Date + "', 103), N'" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Narration + "','" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Package_Id + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Status + "', N'" + obj_tbl_PackageEMB_Master.PackageEMB_Master_VoucherNo + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_RA_BillNo + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_ProcessType + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Total_Amount + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_Type + "', '" + obj_tbl_PackageEMB_Master.PackageEMB_Master_IsItemWiseGST + "'); Select @@Identity";

        int ret_type = 0;
        if (trans == null)
        {
            try
            {
                dsInsert = ExecuteSelectQuery(strQuery);
                ret_type = Convert.ToInt32(dsInsert.Tables[0].Rows[0][0].ToString());
            }
            catch
            {
                ret_type = 0;
            }
        }
        else
        {
            dsInsert = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
            ret_type = Convert.ToInt32(dsInsert.Tables[0].Rows[0][0].ToString());
        }
        return ret_type;
    }

    private int Insert_tbl_PackageEMB1(tbl_PackageEMB obj_tbl_PackageEMB, SqlTransaction trans, SqlConnection cn)
    {
        DataSet ds = new DataSet();
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PackageEMB1 ([PackageEMB_AddedBy],[PackageEMB_AddedOn],[PackageEMB_Length],[PackageEMB_Breadth],[PackageEMB_Package_Id],[PackageEMB_Qty],[PackageEMB_Height],[PackageEMB_Contents],[PackageEMB_Specification],[PackageEMB_Status],[PackageEMB_Unit_Id], [PackageEMB_PackageBOQ_Id], [PackageEMB_PackageEMB_Master_Id], [PackageEMB_QtyExtra], [PackageEMB_PercentageToBeReleased], PackageEMB_GSTType,PackageEMB_GSTPercenatge,PackageEMB_PackageBOQ_OrderNo, PackageEMB_RateEstimated, PackageEMB_RateQuoted, PackageEMB_TotalAmount, PackageEMB_Qty_UpToDate, PackageEMB_RateEstimated_T, PackageEMB_RateQuoted_T, PackageEMB_TotalGST, PackageEMB_Amount,PackageEMB_SincePrevQty,PackageEMB_SincePrevAmount) values ('" + obj_tbl_PackageEMB.PackageEMB_AddedBy + "', getdate(),'" + obj_tbl_PackageEMB.PackageEMB_Length + "','" + obj_tbl_PackageEMB.PackageEMB_Breadth + "','" + obj_tbl_PackageEMB.PackageEMB_Package_Id + "','" + obj_tbl_PackageEMB.PackageEMB_Qty + "','" + obj_tbl_PackageEMB.PackageEMB_Height + "','" + obj_tbl_PackageEMB.PackageEMB_Contents + "',N'" + obj_tbl_PackageEMB.PackageEMB_Specification + "','" + obj_tbl_PackageEMB.PackageEMB_Status + "','" + obj_tbl_PackageEMB.PackageEMB_Unit_Id + "', '" + obj_tbl_PackageEMB.PackageEMB_PackageBOQ_Id + "', '" + obj_tbl_PackageEMB.PackageEMB_PackageEMB_Master_Id + "', '" + obj_tbl_PackageEMB.PackageEMB_QtyExtra + "', '" + obj_tbl_PackageEMB.PackageEMB_PercentageToBeReleased + "', '" + obj_tbl_PackageEMB.PackageEMB_GSTType + "', '" + obj_tbl_PackageEMB.PackageEMB_GSTPercenatge + "', '" + obj_tbl_PackageEMB.PackageEMB_PackageBOQ_OrderNo + "', '" + obj_tbl_PackageEMB.PackageEMB_RateEstimated + "', '" + obj_tbl_PackageEMB.PackageEMB_RateQuoted + "', '" + obj_tbl_PackageEMB.PackageEMB_TotalAmount + "', '" + obj_tbl_PackageEMB.PackageEMB_Qty_UpToDate + "', '" + obj_tbl_PackageEMB.PackageEMB_RateEstimated_T + "', '" + obj_tbl_PackageEMB.PackageEMB_RateQuoted_T + "', '" + obj_tbl_PackageEMB.PackageEMB_TotalGST + "', '" + obj_tbl_PackageEMB.PackageEMB_Amount + "', '" + obj_tbl_PackageEMB.PackageEMB_SincePrevQty + "', '" + obj_tbl_PackageEMB.PackageEMB_SincePrevAmount + "'); Select @@Identity";
        if (trans == null)
        {
            try
            {
                ds = ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
    }

    private void Delete_tbl_PackageEMB1(tbl_PackageEMB obj_tbl_PackageEMB, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_PackageEMB1 set [PackageEMB_ModifiedBy] = '" + obj_tbl_PackageEMB.PackageEMB_AddedBy + "', [PackageEMB_ModifiedOn] = getdate(),  PackageEMB_Status =0 where [PackageEMB_Status] = 1 and [PackageEMB_Id] = '" + obj_tbl_PackageEMB.PackageEMB_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_PackageEMB1(tbl_PackageEMB obj_tbl_PackageEMB, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_PackageEMB1 set [PackageEMB_ModifiedBy] = '" + obj_tbl_PackageEMB.PackageEMB_AddedBy + "', [PackageEMB_ModifiedOn] = getdate(),  [PackageEMB_Length] = '" + obj_tbl_PackageEMB.PackageEMB_Length + "', [PackageEMB_Breadth] = '" + obj_tbl_PackageEMB.PackageEMB_Breadth + "', [PackageEMB_Qty] = '" + obj_tbl_PackageEMB.PackageEMB_Qty + "', [PackageEMB_Contents] = '" + obj_tbl_PackageEMB.PackageEMB_Contents + "', [PackageEMB_Height] = '" + obj_tbl_PackageEMB.PackageEMB_Height + "', [PackageEMB_QtyExtra] = '" + obj_tbl_PackageEMB.PackageEMB_QtyExtra + "', [PackageEMB_Specification] = N'" + obj_tbl_PackageEMB.PackageEMB_Specification + "', [PackageEMB_Unit_Id] = '" + obj_tbl_PackageEMB.PackageEMB_Unit_Id + "', [PackageEMB_Package_Id] = '" + obj_tbl_PackageEMB.PackageEMB_Package_Id + "', PackageEMB_PackageBOQ_Id = '" + obj_tbl_PackageEMB.PackageEMB_PackageBOQ_Id + "', PackageEMB_PackageEMB_Master_Id = '" + obj_tbl_PackageEMB.PackageEMB_PackageEMB_Master_Id + "', PackageEMB_PercentageToBeReleased = '" + obj_tbl_PackageEMB.PackageEMB_PercentageToBeReleased + "', PackageEMB_GSTType = '" + obj_tbl_PackageEMB.PackageEMB_GSTType + "', PackageEMB_GSTPercenatge = '" + obj_tbl_PackageEMB.PackageEMB_GSTPercenatge + "', PackageEMB_PackageBOQ_OrderNo = '" + obj_tbl_PackageEMB.PackageEMB_PackageBOQ_OrderNo + "', PackageEMB_RateEstimated = '" + obj_tbl_PackageEMB.PackageEMB_RateEstimated + "', PackageEMB_RateQuoted = '" + obj_tbl_PackageEMB.PackageEMB_RateQuoted + "', PackageEMB_Qty_UpToDate = '" + obj_tbl_PackageEMB.PackageEMB_Qty_UpToDate + "', PackageEMB_RateEstimated_T = '" + obj_tbl_PackageEMB.PackageEMB_RateEstimated_T + "', PackageEMB_RateQuoted_T = '" + obj_tbl_PackageEMB.PackageEMB_RateQuoted_T + "', PackageEMB_TotalGST = '" + obj_tbl_PackageEMB.PackageEMB_TotalGST + "', PackageEMB_Amount = '" + obj_tbl_PackageEMB.PackageEMB_Amount + "', PackageEMB_TotalAmount = '" + obj_tbl_PackageEMB.PackageEMB_TotalAmount + "' where [PackageEMB_Status] = 1 and [PackageEMB_Id] = '" + obj_tbl_PackageEMB.PackageEMB_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public DataSet get_tbl_PackageEMBShadow_Approve_Summery(int Work_Id, string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ProjectWorkPkg_Id, string Project_Code, string Package_Code, int Organisation_Id, int Designation_Id, int PackageEMB_Master_Id, string RA_BillNo, bool ShowOnlyEMB, string fromDate, string tillDate, int TAT_Range, bool Is_Phase1_Filter, int ULB_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    Total_EMB = count(PackageEMB_Master_Id), 
                        PackageEMB_Master_Total_Amount = sum(isnull(case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end, 0))
                    from tbl_PackageEMB_Master1
                    left join
                    (
	                    select 
		                    PackageEMB_PackageEMB_Master_Id, 
		                    Total_Items = COUNT(*), 
		                    Total_Amount = SUM(isnull(PackageEMB_TotalAmount, 0))
	                    from tbl_PackageEMB1
                        where PackageEMB_Status = 1
                        group by PackageEMB_PackageEMB_Master_Id
                    ) tbl_PackageEMB on PackageEMB_PackageEMB_Master_Id = PackageEMB_Master_Id
                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageEMB_Master_Package_Id
                    join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where PackageEMB_Master_Status = 1 and ProjectWorkPkg_Status = 1 and ProjectWork_Status = 1 ";
        if (PackageEMB_Master_Id > 0)
        {
            strQuery += " and PackageEMB_Master_Id = '" + PackageEMB_Master_Id + "'";
        }
        if (Work_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Work_Id = '" + Work_Id + "'";
        }
        if (Is_Phase1_Filter)
        {
            strQuery += " and isnull(ProjectWork_Is_Phase_1, 0) = 1";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in (" + Project_Id + ")";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0 && Division_Id == 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0 && Division_Id == 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            //strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
            strQuery += "and (ProjectWork_DivisionId in (" + Division_Id + ") or ProjectWorkPkg_Id in (select ProjectAdditionalArea_ProjectWorkPkg_Id from tbl_ProjectAdditionalArea where ProjectAdditionalArea_Status = 1 and ProjectAdditionalArea_DevisionId = '" + Division_Id + "'))";
        }
        if (Project_Code != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + Project_Code + "%'";
        }
        if (Package_Code != "")
        {
            strQuery += " and ProjectWorkPkg_Code like '%" + Package_Code + "%'";
        }
        if (ProjectWorkPkg_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Id = '" + ProjectWorkPkg_Id + "'";
        }
        if (RA_BillNo != "")
        {
            strQuery += " and PackageEMB_Master_RA_BillNo in ('" + RA_BillNo + "')";
        }
        if (fromDate != "")
        {
            strQuery += " and convert(date, PackageEMB_Master_Date, 103) >= convert(date, '" + fromDate + "', 103) and convert(date, PackageEMB_Master_Date, 103) <= convert(date, '" + tillDate + "', 103) ";
        }
        if (ShowOnlyEMB)
        {
            strQuery += " and isnull(PackageEMB_Master_Id_EMB, 0) = 0 ";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_PackageEMBShadow_Approve(int Work_Id, string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ProjectWorkPkg_Id, string Project_Code, string Package_Code, int Organisation_Id, int Designation_Id, int PackageEMB_Master_Id, string RA_BillNo, bool ShowOnlyEMB, string fromDate, string tillDate, int TAT_Range, bool Is_Phase1_Filter, int ULB_Id)
    {
        string SanctionedCost = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    PackageEMB_Master_Id,
	                    PackageEMB_Master_Date = CONVERT(char(10), PackageEMB_Master_Date, 103),
	                    PackageEMB_Master_VoucherNo,
	                    PackageEMB_Master_RA_BillNo,
	                    PackageEMB_Master_Narration,
	                    PackageEMB_Master_Package_Id, 
	                    Total_Items, 
	                    ProjectWorkPkg_Id,
	                    ProjectWorkPkg_Work_Id,
                        ProjectWorkPkg_Code, 
	                    ProjectWorkPkg_Name,
                        ProjectWorkPkg_Name_Code = isnull(ProjectWorkPkg_Code, '') + ' - ' + ProjectWorkPkg_Name,
	                    ProjectWorkPkg_AgreementAmount,
	                    ProjectWorkPkg_Agreement_Date = convert(char(10), ProjectWorkPkg_Agreement_Date, 103),
                        ProjectWorkPkg_Due_Date = convert(char(10), ProjectWorkPkg_Due_Date, 103), 
                        ProjectWorkPkg_Start_Date = convert(char(10), ProjectWorkPkg_Start_Date, 103), 
	                    ProjectWorkPkg_Agreement_No,
	                    ProjectWorkPkg_Vendor_Id,
	                    ProjectWorkPkg_Staff_Id,
	                    Vendor_Name = Vendor.Person_Name,
	                    Vendor_Mobile = Vendor.Person_Mobile1,
	                    List_ReportingStaff_JEAPE_Name,
						List_ReportingStaff_AEPE_Name,
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode,
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        PackageEMB_Master_ProcessType,
	                    ULB_Name, 
	                    Jurisdiction_Name_Eng, 
	                    Division_Name, 
	                    Circle_Name, 
	                    Zone_Name, 
	                    ProjectWork_DistrictId, 
	                    ProjectWork_ULB_Id, 
	                    ProjectWork_DivisionId, 
	                    Division_CircleId, 
                        ProjectWorkPkg_LockedOn, 
                        ProjectWorkPkg_Locked_By, 
	                    Designation_Current = '', 
	                    Organisation_Current = '', 
	                    PackageEMBApproval_Next_Designation_Id = 0, 
	                    PackageEMBApproval_Next_Organisation_Id = 0, 
	                    PackageEMBApproval_Date = '', 
	                    PackageEMBApproval_Status_Id = 0,

                        InvoiceStatus_Name = '',
		                Designation_DesignationName = '', 
	                    OfficeBranch_Name = '',
                        Invoice_Status = '', 
                        Fund_Allocated = convert(decimal(18,2), (isnull(ttbl_FinancialTrans.FinancialTrans_TransAmount, 0) / 100000)),
                        ProjectWorkPkg_Vendor_Id, 
                        Total_Amount = case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end, 
                        PackageEMB_Master_Total_Amount = case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end, 
                        PackageEMBApproval_AddedOn = '',
                        Date_Diff_Action = 0, 
                        PackageEMB_Master_Type, 
                        PackageEMB_Master_IsItemWiseGST
                    from tbl_PackageEMB_Master1
                    left join
                    (
	                    select 
		                    PackageEMB_PackageEMB_Master_Id, 
		                    Total_Items = COUNT(*), 
		                    Total_Amount = SUM(isnull(PackageEMB_TotalAmount, 0))
	                    from tbl_PackageEMB1
	                    where PackageEMB_Status = 1
	                    GROUP by PackageEMB_PackageEMB_Master_Id
                    ) tbl_PackageEMB on PackageEMB_PackageEMB_Master_Id = PackageEMB_Master_Id
                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageEMB_Master_Package_Id
                    join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join tbl_PersonDetail Vendor on Vendor.Person_Id = ProjectWorkPkg_Vendor_Id
                    left join tbl_PersonDetail Staff on Staff.Person_Id = ProjectWorkPkg_Staff_Id
                    left join 
                    (
                        select ROW_NUMBER() over (partition by FinancialTrans_Work_Id, FinancialTrans_Package_Id, FinancialTrans_TransType order by FinancialTrans_Id asc) rrr, FinancialTrans_Work_Id, FinancialTrans_Package_Id, FinancialTrans_TransAmount from tbl_FinancialTrans where FinancialTrans_Status = 1 and FinancialTrans_TransType = 'C'
                    )ttbl_FinancialTrans on ttbl_FinancialTrans.FinancialTrans_Work_Id=ProjectWork_Id and FinancialTrans_Package_Id=ProjectWorkPkg_Id and ttbl_FinancialTrans.rrr = 1

                     left join(
                        SELECT	ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id,
			                                STUFF((SELECT ', ' + CAST(Person_Name AS VARCHAR(100)) [text()]
                                            FROM tbl_ProjectWorkPkg_ReportingStaff_JE_APE
											inner join tbl_PersonDetail on Person_Id=ProjectWorkPkg_ReportingStaff_JE_APE_Person_Id
									        WHERE ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id = t.ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id and tbl_ProjectWorkPkg_ReportingStaff_JE_APE.ProjectWorkPkg_ReportingStaff_JE_APE_Status = 1
                                            FOR XML PATH(''), TYPE)
                                        .value('.','NVARCHAR(MAX)'),1,2,' ') as List_ReportingStaff_JEAPE_Name
	                                FROM tbl_ProjectWorkPkg_ReportingStaff_JE_APE t
                                    where t.ProjectWorkPkg_ReportingStaff_JE_APE_Status = 1
	                                GROUP BY ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id                          
                    ) tbl_ProjectWorkPkg_ReportingStaff_JE_APE on ProjectWorkPkg_ReportingStaff_JE_APE_ProjectWorkPkg_Id=ProjectWorkPkg_Id
                    left join(
                        SELECT	ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id,
			                                STUFF((SELECT ', ' + CAST(Person_Name AS VARCHAR(100)) [text()]
                                            FROM tbl_ProjectWorkPkg_ReportingStaff_AE_PE
											inner join tbl_PersonDetail on Person_Id=ProjectWorkPkg_ReportingStaff_AE_PE_Person_Id
									        WHERE ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id = t.ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id and tbl_ProjectWorkPkg_ReportingStaff_AE_PE.ProjectWorkPkg_ReportingStaff_AE_PE_Status = 1
                                            FOR XML PATH(''), TYPE)
                                        .value('.','NVARCHAR(MAX)'),1,2,' ') as List_ReportingStaff_AEPE_Name
	                                FROM tbl_ProjectWorkPkg_ReportingStaff_AE_PE t
                                    where t.ProjectWorkPkg_ReportingStaff_AE_PE_Status = 1
	                                GROUP BY ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id                          
                    ) tbl_ProjectWorkPkg_ReportingStaff_AE_PE on ProjectWorkPkg_ReportingStaff_AE_PE_ProjectWorkPkg_Id=ProjectWorkPkg_Id
                    where PackageEMB_Master_Status = 1 and ProjectWorkPkg_Status = 1 and ProjectWork_Status = 1 ";
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (PackageEMB_Master_Id > 0)
        {
            strQuery += " and PackageEMB_Master_Id = '" + PackageEMB_Master_Id + "'";
        }
        if (Work_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Work_Id = '" + Work_Id + "'";
        }
        if (Is_Phase1_Filter)
        {
            strQuery += " and isnull(ProjectWork_Is_Phase_1, 0) = 1";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in (" + Project_Id + ")";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0 && Division_Id == 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0 && Division_Id == 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            //strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
            strQuery += "and (ProjectWork_DivisionId in (" + Division_Id + ") or ProjectWorkPkg_Id in (select ProjectAdditionalArea_ProjectWorkPkg_Id from tbl_ProjectAdditionalArea where ProjectAdditionalArea_Status = 1 and ProjectAdditionalArea_DevisionId = '" + Division_Id + "'))";
        }
        if (Project_Code != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + Project_Code + "%'";
        }
        if (Package_Code != "")
        {
            strQuery += " and ProjectWorkPkg_Code like '%" + Package_Code + "%'";
        }
        if (ProjectWorkPkg_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Id = '" + ProjectWorkPkg_Id + "'";
        }
        if (ShowOnlyEMB)
        {
            strQuery += " and isnull(PackageEMB_Master_Id_EMB, 0) = 0 ";
        }
        if (RA_BillNo != "")
        {
            strQuery += " and PackageEMB_Master_RA_BillNo in ('" + RA_BillNo + "')";
        }
        if (fromDate != "")
        {
            strQuery += " and convert(date, PackageEMB_Master_Date, 103) >= convert(date, '" + fromDate + "', 103) and convert(date, PackageEMB_Master_Date, 103) <= convert(date, '" + tillDate + "', 103) ";
        }
        strQuery += " order by ProjectWork_Name, ProjectWorkPkg_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Inventory Unit
    public DataSet get_tbl_InventoryUnit()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        InventoryUnit_Id,
        InventoryUnit_Name,
        InventoryUnit_AddedOn,
        InventoryUnit_AddedBy,
        InventoryUnit_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=InventoryUnit_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=InventoryUnit_ModifiedOn
        from tbl_InventoryUnit left join tbl_PersonDetail on Person_Id=InventoryUnit_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=InventoryUnit_ModifiedBy
        where InventoryUnit_Status=1 order by InventoryUnit_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_InventoryUnit(tbl_InventoryUnit obj_tbl_InventoryUnit, int InventoryUnit_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyInventoryUnit(obj_tbl_InventoryUnit.InventoryUnit_Name, InventoryUnit_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (InventoryUnit_Id == 0)
                {
                    Insert_tbl_InventoryUnit(obj_tbl_InventoryUnit, trans, cn);
                }
                else
                {
                    obj_tbl_InventoryUnit.InventoryUnit_Id = InventoryUnit_Id;
                    Update_tbl_InventoryUnit(obj_tbl_InventoryUnit, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyInventoryUnit(string InventoryUnitName, string InventoryUnit_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_InventoryUnit  where InventoryUnit_Status = 1 and  InventoryUnit_Name = '" + InventoryUnitName + "' ";
        if (InventoryUnit_Id != "0")
        {
            strQuery += " AND InventoryUnit_Id  <> '" + InventoryUnit_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_InventoryUnit(tbl_InventoryUnit obj_tbl_InventoryUnit, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_InventoryUnit( [InventoryUnit_AddedBy],[InventoryUnit_AddedOn],[InventoryUnit_Name],[InventoryUnit_Status] ) values('" +
            obj_tbl_InventoryUnit.InventoryUnit_AddedBy + "', getdate(), N'" +
            obj_tbl_InventoryUnit.InventoryUnit_Name + "','" +
            obj_tbl_InventoryUnit.InventoryUnit_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_InventoryUnit(tbl_InventoryUnit obj_tbl_InventoryUnit, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_InventoryUnit set  InventoryUnit_Name = N'" + obj_tbl_InventoryUnit.InventoryUnit_Name + "',InventoryUnit_ModifiedOn = getDate(),InventoryUnit_ModifiedBy = '" + obj_tbl_InventoryUnit.InventoryUnit_AddedBy + "' where InventoryUnit_Id = '" + obj_tbl_InventoryUnit.InventoryUnit_Id + "' and InventoryUnit_Status = '" + obj_tbl_InventoryUnit.InventoryUnit_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_InventoryUnit(int InventoryUnit_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_InventoryUnit set   InventoryUnit_Status = 0,InventoryUnit_ModifiedBy='" + person_Id + "',InventoryUnit_ModifiedOn=getdate() where InventoryUnit_Id = '" + InventoryUnit_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region NPS Passbook Details
    public DataSet get_tbl_NPSPassbookDetails(int Person_Id, int Year, int Basic)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = "select top 1 Basic = (NPSPassbookDetails_EmployeeContribution * 10) from tbl_NPSPassbookDetails where NPSPassbookDetails_Status=1 and NPSPassbookDetails_HRMS_Employee_Id='" + Person_Id + "' and NPSPassbookDetails_Year = " + Year + "";
        ds = ExecuteSelectQuery(strQuery);
        if (AllClasses.CheckDataSet(ds))
        {
            try
            {
                Basic = Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
            }
            catch
            {

            }
        }

        string SelectCond = @"
                        NPSPassbookDetails_HRMS_Employee_Id = isnull(p.NPSPassbookDetails_HRMS_Employee_Id, " + Person_Id + "), NPSPassbookDetails_EmployeeContribution = isnull(p.NPSPassbookDetails_EmployeeContribution, " + (Basic * 0.1) + "), NPSPassbookDetails_EmployerContribution = isnull(p.NPSPassbookDetails_EmployerContribution, " + (Basic * 0.14) + "), NPSPassbookDetails_TotalAmount = isnull(p.NPSPassbookDetails_TotalAmount, (isnull(p.NPSPassbookDetails_EmployeeContribution, " + (Basic * 0.1) + ") + isnull(p.NPSPassbookDetails_EmployerContribution, " + (Basic * 0.14) + "))), NPSPassbookDetails_Year = isnull(p.NPSPassbookDetails_Year, " + Year + ")";

        strQuery = @"set dateformat dmy; 
                    select 
                        Month_Id,
                        Month_MonthName,
                        Month_FinancialOrder,
                        SelectCondReplace
                     from tbl_Month
                     left join
                     (
                      select
                          ROW_NUMBER() over (partition by NPSPassbookDetails_MonthId order by NPSPassbookDetails_Id desc) nn,
                            NPSPassbookDetails_Id,
                            NPSPassbookDetails_HRMS_Employee_Id,
                            NPSPassbookDetails_EmployeeContribution,
                            NPSPassbookDetails_EmployerContribution,
                            NPSPassbookDetails_TotalAmount,
                            NPSPassbookDetails_AddedOn,
                            NPSPassbookDetails_AddedBy,
                            NPSPassbookDetails_ModifiedOn,
                            NPSPassbookDetails_ModifiedBy,
                            NPSPassbookDetails_MonthId,
                            NPSPassbookDetails_Year,
                            NPSPassbookDetails_Status
                        from tbl_NPSPassbookDetails
                        where NPSPassbookDetails_Status=1 Person_IdCond YearCond
                    ) as p on p.NPSPassbookDetails_MonthId=Month_Id and p.nn=1
                    where Month_Status = 1
                    order by Month_FinancialOrder";
        strQuery = strQuery.Replace("SelectCondReplace", SelectCond);
        if (Person_Id > 0)
        {
            strQuery = strQuery.Replace("Person_IdCond", "and NPSPassbookDetails_HRMS_Employee_Id ='" + Person_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Person_IdCond", "");
        }
        if (Year > 0)
        {
            strQuery = strQuery.Replace("YearCond", "and NPSPassbookDetails_Year ='" + Year + "'");
        }
        else
        {
            strQuery = strQuery.Replace("YearCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_NPSPassbookDetails(List<tbl_NPSPassbookDetails> obj_tbl_NPSPassbookDetails_Li, ref string Msg, int HRMSEmployee_Id, int Person_Id, int Year_Val)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {

                Update_tbl_NPSPassbookDetails(Year_Val, Person_Id, HRMSEmployee_Id, trans, cn);
                for (int i = 0; i < obj_tbl_NPSPassbookDetails_Li.Count; i++)
                {
                    obj_tbl_NPSPassbookDetails_Li[i].NPSPassbookDetails_HRMS_Employee_Id = HRMSEmployee_Id;
                    Insert_tbl_NPSPassbookDetails(obj_tbl_NPSPassbookDetails_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;

            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private void Insert_tbl_NPSPassbookDetails(tbl_NPSPassbookDetails obj_tbl_NPSPassbookDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = "set dateformat dmy; insert into tbl_NPSPassbookDetails([NPSPassbookDetails_EmployeeContribution],[NPSPassbookDetails_EmployerContribution],[NPSPassbookDetails_TotalAmount],[NPSPassbookDetails_AddedOn],[NPSPassbookDetails_AddedBy],[NPSPassbookDetails_Status],[NPSPassbookDetails_MonthId],[NPSPassbookDetails_HRMS_Employee_Id],[NPSPassbookDetails_Year]) values('" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_EmployeeContribution + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_EmployerContribution + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_TotalAmount + "',getdate(),'" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_AddedBy + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_Status + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_MonthId + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_HRMS_Employee_Id + "','" + obj_tbl_NPSPassbookDetails.NPSPassbookDetails_Year + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    private void Update_tbl_NPSPassbookDetails(int Year_Val, int Person_Id, int HRMSEmployee_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_NPSPassbookDetails set [NPSPassbookDetails_Status] = 0,[NPSPassbookDetails_ModifiedOn]=getdate(),[NPSPassbookDetails_ModifiedBy]='" + Person_Id + "' where [NPSPassbookDetails_HRMS_Employee_Id] = '" + HRMSEmployee_Id + "' and [NPSPassbookDetails_Year]='" + Year_Val + "' and [NPSPassbookDetails_Status] = 1";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Master Religion
    public DataSet get_tbl_Religion()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        Religion_Id,
        Religion_Name,
        Religion_AddedOn,
        Religion_AddedBy,
        Religion_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=Religion_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=Religion_ModifiedOn
        from tbl_Religion left join tbl_PersonDetail on Person_Id=Religion_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Religion_ModifiedBy
        where Religion_Status=1 order by Religion_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Religion(tbl_Religion obj_tbl_Religion, int Religion_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyPayBand(obj_tbl_Religion.Religion_Name, Religion_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Religion_Id == 0)
                {
                    Insert_tbl_Religion(obj_tbl_Religion, trans, cn);
                }
                else
                {
                    obj_tbl_Religion.Religion_Id = Religion_Id;
                    Update_tbl_Religion(obj_tbl_Religion, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyReligion(string Religion_Name, string Religion_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Religion  where Religion_Status = 1 and  Religion_Name = '" + Religion_Name + "' ";
        if (Religion_Id != "0")
        {
            strQuery += " AND Religion_Id  <> '" + Religion_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Religion(tbl_Religion obj_tbl_Religion, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Religion( [Religion_AddedBy],[Religion_AddedOn],[Religion_Name],[Religion_Status] ) values('" +
            obj_tbl_Religion.Religion_AddedBy + "', getdate(), N'" +
            obj_tbl_Religion.Religion_Name + "','" +
            obj_tbl_Religion.Religion_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Religion(tbl_Religion obj_tbl_Religion, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Religion set  Religion_Name = N'" +
            obj_tbl_Religion.Religion_Name + "',Religion_ModifiedOn = getDate(), Religion_ModifiedBy = '" +
            obj_tbl_Religion.Religion_AddedBy + "' where Religion_Id = '" +
            obj_tbl_Religion.Religion_Id + "' and Religion_Status = '" +
            obj_tbl_Religion.Religion_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Religion(int Religion_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Religion set   Religion_Status = 0, Religion_ModifiedBy='" +
                person_Id + "',Religion_ModifiedOn=getdate() where Religion_Id = '" + Religion_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Caste
    public DataSet get_tbl_Caste()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        Caste_Id,
        Caste_Name,
        Caste_AddedOn,
        Caste_AddedBy,
        Caste_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=Caste_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=Caste_ModifiedOn
        from tbl_Caste left join tbl_PersonDetail on Person_Id=Caste_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Caste_ModifiedBy
        where Caste_Status=1 order by Caste_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Caste(tbl_Caste obj_tbl_Caste, int Caste_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyPayBand(obj_tbl_Caste.Caste_Name, Caste_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Caste_Id == 0)
                {
                    Insert_tbl_Caste(obj_tbl_Caste, trans, cn);
                }
                else
                {
                    obj_tbl_Caste.Caste_Id = Caste_Id;
                    Update_tbl_Caste(obj_tbl_Caste, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyCaste(string Caste_Name, string Caste_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Caste where Caste_Status = 1 and  Caste_Name = '" + Caste_Name + "' ";
        if (Caste_Id != "0")
        {
            strQuery += " AND Caste_Id  <> '" + Caste_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Caste(tbl_Caste obj_tbl_Caste, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Caste( [Caste_AddedBy],[Caste_AddedOn],[Caste_Name],[Caste_Status] ) values('" +
            obj_tbl_Caste.Caste_AddedBy + "', getdate(), N'" +
            obj_tbl_Caste.Caste_Name + "','" +
            obj_tbl_Caste.Caste_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Caste(tbl_Caste obj_tbl_Caste, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Caste set  Caste_Name = N'" +
            obj_tbl_Caste.Caste_Name + "',Caste_ModifiedOn = getDate(), Caste_ModifiedBy = '" +
            obj_tbl_Caste.Caste_AddedBy + "' where Caste_Id = '" +
            obj_tbl_Caste.Caste_Id + "' and Caste_Status = '" +
            obj_tbl_Caste.Caste_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Caste(int Caste_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Caste  set   Caste_Status = 0, Caste_ModifiedBy='" +
                person_Id + "',Caste_ModifiedOn=getdate() where Caste_Id = '" + Caste_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }


    #endregion

    #region Master Inventory Category
    public DataSet get_tbl_Inventory_Category()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        Inventory_Category_Id,
        Inventory_Category_Name,
        Inventory_Category_AddedOn,
        Inventory_Category_AddedBy,
        Inventory_Category_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=Inventory_Category_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=Inventory_Category_ModifiedOn
        from tbl_Inventory_Category left join tbl_PersonDetail on Person_Id=Inventory_Category_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Inventory_Category_ModifiedBy
        where Inventory_Category_Status=1 order by Inventory_Category_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Inventory_Category(tbl_Inventory_Category obj_tbl_Inventory_Category, int Inventory_Category_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyInventory_Category(obj_tbl_Inventory_Category.Inventory_Category_Name, Inventory_Category_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Inventory_Category_Id == 0)
                {
                    Insert_tbl_Inventory_Category(obj_tbl_Inventory_Category, trans, cn);
                }
                else
                {
                    obj_tbl_Inventory_Category.Inventory_Category_Id = Inventory_Category_Id;
                    Update_tbl_Inventory_Category(obj_tbl_Inventory_Category, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyInventory_Category(string Inventory_CategoryName, string Inventory_Category_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Inventory_Category  where Inventory_Category_Status = 1 and  Inventory_Category_Name = '" + Inventory_CategoryName + "' ";
        if (Inventory_Category_Id != "0")
        {
            strQuery += " AND Inventory_Category_Id  <> '" + Inventory_Category_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Inventory_Category(tbl_Inventory_Category obj_tbl_Inventory_Category, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Inventory_Category( [Inventory_Category_AddedBy],[Inventory_Category_AddedOn],[Inventory_Category_Name],[Inventory_Category_Status] ) values('" +
            obj_tbl_Inventory_Category.Inventory_Category_AddedBy + "', getdate(), N'" +
            obj_tbl_Inventory_Category.Inventory_Category_Name + "','" +
            obj_tbl_Inventory_Category.Inventory_Category_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Inventory_Category(tbl_Inventory_Category obj_tbl_Inventory_Category, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Inventory_Category set  Inventory_Category_Name = N'" + obj_tbl_Inventory_Category.Inventory_Category_Name + "',Inventory_Category_ModifiedOn = getDate(),Inventory_Category_ModifiedBy = '" + obj_tbl_Inventory_Category.Inventory_Category_AddedBy + "' where Inventory_Category_Id = '" + obj_tbl_Inventory_Category.Inventory_Category_Id + "' and Inventory_Category_Status = '" + obj_tbl_Inventory_Category.Inventory_Category_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Inventory_Category(int Inventory_Category_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Inventory_Category set   Inventory_Category_Status = 0,Inventory_Category_ModifiedBy='" + person_Id + "',Inventory_Category_ModifiedOn=getdate() where Inventory_Category_Id = '" + Inventory_Category_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Inventory Type
    public DataSet get_tbl_Inventory_Type()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        Inventory_Type_Id,
        Inventory_Type_Name,
        Inventory_Type_AddedOn,
        Inventory_Type_AddedBy,
        Inventory_Type_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=Inventory_Type_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=Inventory_Type_ModifiedOn
        from tbl_Inventory_Type left join tbl_PersonDetail on Person_Id=Inventory_Type_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Inventory_Type_ModifiedBy
        where Inventory_Type_Status=1 order by Inventory_Type_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Inventory_Type(tbl_Inventory_Type obj_tbl_Inventory_Type, int Inventory_Type_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyInventory_Type(obj_tbl_Inventory_Type.Inventory_Type_Name, Inventory_Type_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Inventory_Type_Id == 0)
                {
                    Insert_tbl_Inventory_Type(obj_tbl_Inventory_Type, trans, cn);
                }
                else
                {
                    obj_tbl_Inventory_Type.Inventory_Type_Id = Inventory_Type_Id;
                    Update_tbl_Inventory_Type(obj_tbl_Inventory_Type, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyInventory_Type(string Inventory_TypeName, string Inventory_Type_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Inventory_Type  where Inventory_Type_Status = 1 and  Inventory_Type_Name = '" + Inventory_TypeName + "' ";
        if (Inventory_Type_Id != "0")
        {
            strQuery += " AND Inventory_Type_Id  <> '" + Inventory_Type_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Inventory_Type(tbl_Inventory_Type obj_tbl_Inventory_Type, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Inventory_Type( [Inventory_Type_AddedBy],[Inventory_Type_AddedOn],[Inventory_Type_Name],[Inventory_Type_Status] ) values('" +
            obj_tbl_Inventory_Type.Inventory_Type_AddedBy + "', getdate(), N'" +
            obj_tbl_Inventory_Type.Inventory_Type_Name + "','" +
            obj_tbl_Inventory_Type.Inventory_Type_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Inventory_Type(tbl_Inventory_Type obj_tbl_Inventory_Type, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Inventory_Type set  Inventory_Type_Name = N'" + obj_tbl_Inventory_Type.Inventory_Type_Name + "',Inventory_Type_ModifiedOn = getDate(),Inventory_Type_ModifiedBy = '" + obj_tbl_Inventory_Type.Inventory_Type_AddedBy + "' where Inventory_Type_Id = '" + obj_tbl_Inventory_Type.Inventory_Type_Id + "' and Inventory_Type_Status = '" + obj_tbl_Inventory_Type.Inventory_Type_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Inventory_Type(int Inventory_Type_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Inventory_Type set   Inventory_Type_Status = 0,Inventory_Type_ModifiedBy='" + person_Id + "',Inventory_Type_ModifiedOn=getdate() where Inventory_Type_Id = '" + Inventory_Type_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Inventory Company
    public DataSet get_tbl_Inventory_Company()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        Inventory_Company_Id,
        Inventory_Company_Name,
        Inventory_Company_AddedOn,
        Inventory_Company_AddedBy,
        Inventory_Company_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=Inventory_Company_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=Inventory_Company_ModifiedOn
        from tbl_Inventory_Company left join tbl_PersonDetail on Person_Id=Inventory_Company_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Inventory_Company_ModifiedBy
        where Inventory_Company_Status=1 order by Inventory_Company_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Inventory_Company(tbl_Inventory_Company obj_tbl_Inventory_Company, int Inventory_Company_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyInventory_Company(obj_tbl_Inventory_Company.Inventory_Company_Name, Inventory_Company_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Inventory_Company_Id == 0)
                {
                    Insert_tbl_Inventory_Company(obj_tbl_Inventory_Company, trans, cn);
                }
                else
                {
                    obj_tbl_Inventory_Company.Inventory_Company_Id = Inventory_Company_Id;
                    Update_tbl_Inventory_Company(obj_tbl_Inventory_Company, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyInventory_Company(string Inventory_CompanyName, string Inventory_Company_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Inventory_Company  where Inventory_Company_Status = 1 and  Inventory_Company_Name = '" + Inventory_CompanyName + "' ";
        if (Inventory_Company_Id != "0")
        {
            strQuery += " AND Inventory_Company_Id  <> '" + Inventory_Company_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Inventory_Company(tbl_Inventory_Company obj_tbl_Inventory_Company, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Inventory_Company( [Inventory_Company_AddedBy],[Inventory_Company_AddedOn],[Inventory_Company_Name],[Inventory_Company_Status] ) values('" +
            obj_tbl_Inventory_Company.Inventory_Company_AddedBy + "', getdate(), N'" +
            obj_tbl_Inventory_Company.Inventory_Company_Name + "','" +
            obj_tbl_Inventory_Company.Inventory_Company_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Inventory_Company(tbl_Inventory_Company obj_tbl_Inventory_Company, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Inventory_Company set  Inventory_Company_Name = N'" + obj_tbl_Inventory_Company.Inventory_Company_Name + "',Inventory_Company_ModifiedOn = getDate(),Inventory_Company_ModifiedBy = '" + obj_tbl_Inventory_Company.Inventory_Company_AddedBy + "' where Inventory_Company_Id = '" + obj_tbl_Inventory_Company.Inventory_Company_Id + "' and Inventory_Company_Status = '" + obj_tbl_Inventory_Company.Inventory_Company_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Inventory_Company(int Inventory_Company_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Inventory_Company set   Inventory_Company_Status = 0,Inventory_Company_ModifiedBy='" + person_Id + "',Inventory_Company_ModifiedOn=getdate() where Inventory_Company_Id = '" + Inventory_Company_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master SAC/HSN Code
    public DataSet get_tbl_HSN_Code()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        HSN_Code_Id,
        HSN_Code_Name,
        HSN_Code_AddedOn,
        HSN_Code_AddedBy,
        HSN_Code_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=HSN_Code_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=HSN_Code_ModifiedOn
        from tbl_HSN_Code left join tbl_PersonDetail on Person_Id=HSN_Code_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=HSN_Code_ModifiedBy
        where HSN_Code_Status=1 order by HSN_Code_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_HSN_Code(tbl_HSN_Code obj_tbl_HSN_Code, int HSN_Code_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyHSN_Code(obj_tbl_HSN_Code.HSN_Code_Name, HSN_Code_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (HSN_Code_Id == 0)
                {
                    Insert_tbl_HSN_Code(obj_tbl_HSN_Code, trans, cn);
                }
                else
                {
                    obj_tbl_HSN_Code.HSN_Code_Id = HSN_Code_Id;
                    Update_tbl_HSN_Code(obj_tbl_HSN_Code, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyHSN_Code(string HSN_CodeName, string HSN_Code_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_HSN_Code  where HSN_Code_Status = 1 and  HSN_Code_Name = '" + HSN_CodeName + "' ";
        if (HSN_Code_Id != "0")
        {
            strQuery += " AND HSN_Code_Id  <> '" + HSN_Code_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_HSN_Code(tbl_HSN_Code obj_tbl_HSN_Code, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_HSN_Code( [HSN_Code_AddedBy],[HSN_Code_AddedOn],[HSN_Code_Name],[HSN_Code_Status] ) values('" +
            obj_tbl_HSN_Code.HSN_Code_AddedBy + "', getdate(), N'" +
            obj_tbl_HSN_Code.HSN_Code_Name + "','" +
            obj_tbl_HSN_Code.HSN_Code_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_HSN_Code(tbl_HSN_Code obj_tbl_HSN_Code, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_HSN_Code set  HSN_Code_Name = N'" + obj_tbl_HSN_Code.HSN_Code_Name + "',HSN_Code_ModifiedOn = getDate(),HSN_Code_ModifiedBy = '" + obj_tbl_HSN_Code.HSN_Code_AddedBy + "' where HSN_Code_Id = '" + obj_tbl_HSN_Code.HSN_Code_Id + "' and HSN_Code_Status = '" + obj_tbl_HSN_Code.HSN_Code_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_HSN_Code(int HSN_Code_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_HSN_Code set   HSN_Code_Status = 0,HSN_Code_ModifiedBy='" + person_Id + "',HSN_Code_ModifiedOn=getdate() where HSN_Code_Id = '" + HSN_Code_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region GPF Income
    public bool Insert_tbl_GPF_Income(tbl_GPF_Income obj_GPF_Income, int GPF_Income_Id, int HRMSEmployee_Id, int Person_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Update_tbl_GPF_Income(Person_Id, HRMSEmployee_Id, trans, cn);
                //if (GPF_Income_Id == 0)
                //{
                Insert_tbl_GPF_Income(obj_GPF_Income, trans, cn);
                //}
                //else
                //{
                //    obj_GPF_Income.GPF_Income_Id = GPF_Income_Id;
                //    //Update_tbl_GPF_Income(obj_GPF_Income, trans, cn);
                //}
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private string Insert_tbl_GPF_Income(tbl_GPF_Income obj_GPF_Income, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_GPF_Income([GPF_Income_Month],[GPF_Income_Year],[GPF_Income_DepositAmount],[GPF_Income_Interest],[GPF_Income_Withdrawal],[GPF_Income_Refund],[GPF_Income_Total],[GPF_Income_AddedBy],[GPF_Income_AddedOn],[GPF_Income_Status],[GPF_Income_HRMSEmployee_Id]) values('" + obj_GPF_Income.GPF_Income_Month + "','" + obj_GPF_Income.GPF_Income_Year + "','" + obj_GPF_Income.GPF_Income_DepositAmount + "','" + obj_GPF_Income.GPF_Income_Interest + "','" + obj_GPF_Income.GPF_Income_Withdrawal + "','" + obj_GPF_Income.GPF_Income_Refund + "','" + obj_GPF_Income.GPF_Income_Total + "','" + obj_GPF_Income.GPF_Income_AddedBy + "', getdate(),'" + obj_GPF_Income.GPF_Income_Status + "','" + obj_GPF_Income.GPF_Income_HRMSEmployee_Id + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    public DataSet get_tbl_GPF_Income(int HRMSEmployee_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                     select 
                        GPF_Income_Id,
                        GPF_Income_Month,
                        GPF_Income_Year,
                        GPF_Income_DepositAmount,
                        GPF_Income_Interest,
                        GPF_Income_Withdrawal,
                        GPF_Income_Refund,
                        GPF_Income_Total,
                        GPF_Income_AddedBy,
                        GPF_Income_HRMSEmployee_Id,
                        GPF_Income_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=GPF_Income_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=GPF_Income_ModifiedOn 
                    from tbl_GPF_Income 	
                    left join tbl_PersonDetail on Person_Id=GPF_Income_ModifiedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=GPF_Income_ModifiedBy 
                    where GPF_Income_Status=1 and GPF_Income_HRMSEmployee_Id='" + HRMSEmployee_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private void Update_tbl_GPF_Income(int Person_Id, int HRMSEmployee_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_GPF_Income set [GPF_Income_Status] = 0,[GPF_Income_ModifiedOn]=getdate(),[GPF_Income_ModifiedBy]='" + Person_Id + "' where [GPF_Income_HRMSEmployee_Id] = '" + HRMSEmployee_Id + "' and [GPF_Income_Status] = 1";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    //private void Update_tbl_GPF_Income(tbl_GPF_Income obj_GPF_Income, SqlTransaction trans, SqlConnection cn)
    //{
    //    string strQuery = "";
    //    strQuery = " set dateformat dmy;Update  tbl_GPF_Income set GPF_Income_Month='" + obj_GPF_Income.GPF_Income_Month + "',GPF_Income_Year='" + obj_GPF_Income.GPF_Income_Year + "',GPF_Income_DepositAmount='" + obj_GPF_Income.GPF_Income_DepositAmount + "',GPF_Income_Interest='" + obj_GPF_Income.GPF_Income_Interest + "',GPF_Income_Withdrawal='" + obj_GPF_Income.GPF_Income_Withdrawal + "',GPF_Income_Refund='" + obj_GPF_Income.GPF_Income_Refund + "',GPF_Income_Total='" + obj_GPF_Income.GPF_Income_Total + "',GPF_Income_AddedOn = getDate(),GPF_Income_ModifiedBy = '" + obj_GPF_Income.GPF_Income_AddedBy + "' where GPF_Income_Id = '" + obj_GPF_Income.GPF_Income_Id + "' and GPF_Income_Status  '" + obj_GPF_Income.GPF_Income_Status + "' ";
    //    if (trans == null)
    //    {
    //        ExecuteSelectQuery(strQuery);
    //    }
    //    else
    //    {
    //        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
    //    }
    //}
    public bool Delete_GPF_Income(int GPF_Income_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_GPF_Income set GPF_Income_Status = 0,GPF_Income_ModifiedBy='" + person_Id + "',GPF_Income_ModifiedOn=getdate() where GPF_Income_Id = '" + GPF_Income_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }

    #endregion

    #region Master Grade Pay
    public DataSet get_tbl_GradePay(int PayScale_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        GradePay_Id,
        GradePay_Value,
        GradePay_PayScaleId,
        PayScale_Name,
        GradePay_AddedOn,
        GradePay_AddedBy,
        GradePay_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=GradePay_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=GradePay_ModifiedOn
        from tbl_GradePay left join tbl_PersonDetail on Person_Id=GradePay_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=GradePay_ModifiedBy
        left join tbl_PayScale as tbl_PayScale1 on tbl_PayScale1.PayScale_Id=GradePay_PayScaleId
        where GradePay_Status=1 PayScale_IdCond order by GradePay_Value ";
        if (PayScale_Id > 0)
        {
            strQuery = strQuery.Replace("PayScale_IdCond", "and GradePay_PayScaleId = '" + PayScale_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("PayScale_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_GradePay(tbl_GradePay obj_tbl_GradePay, int GradePay_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyGradePay(Convert.ToString(obj_tbl_GradePay.GradePay_Value), GradePay_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (GradePay_Id == 0)
                {
                    Insert_tbl_GradePay(obj_tbl_GradePay, trans, cn);
                }
                else
                {
                    obj_tbl_GradePay.GradePay_Id = GradePay_Id;
                    Update_tbl_GradePay(obj_tbl_GradePay, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyGradePay(string GradePayValue, string GradePay_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_GradePay  where GradePay_Status = 1 and  GradePay_Value = '" + GradePayValue + "' ";
        if (GradePay_Id != "0")
        {
            strQuery += " AND GradePay_Id  <> '" + GradePay_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_GradePay(tbl_GradePay obj_tbl_GradePay, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_GradePay( [GradePay_AddedBy],[GradePay_AddedOn],[GradePay_Value],[GradePay_PayScaleId],[GradePay_Status] ) values('" +
            obj_tbl_GradePay.GradePay_AddedBy + "', getdate(), N'" +
            obj_tbl_GradePay.GradePay_Value + "','" + obj_tbl_GradePay.GradePay_PayScaleId + "','" +
            obj_tbl_GradePay.GradePay_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_GradePay(tbl_GradePay obj_tbl_GradePay, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_GradePay set  GradePay_Value = N'" + obj_tbl_GradePay.GradePay_Value + "',GradePay_ModifiedOn = getDate(),GradePay_ModifiedBy = '" + obj_tbl_GradePay.GradePay_AddedBy + "' where GradePay_Id = '" + obj_tbl_GradePay.GradePay_Id + "' and GradePay_Status = '" + obj_tbl_GradePay.GradePay_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_GradePay(int GradePay_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_GradePay set   GradePay_Status = 0,GradePay_ModifiedBy='" + person_Id + "',GradePay_ModifiedOn=getdate() where GradePay_Id = '" + GradePay_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region HRMS Employee
    public bool Insert_HRMSEmployeeBasicDetails(tbl_HRMSEmployeeDetails obj_HRMSEmployeeBasicDetails, tbl_HRMSEmployeeJuridiction obj_HRMSEmployeePostingDetails, tbl_HRMSEmployeeSalaryInfo obj_HRMSEmployeeSalaryInfo, tbl_HRMSEmployeeBankDetails obj_HRMSEmployeeBankDetails, int HRMSEmployee_Id, bool UpdateLastGeneratedSal, tbl_HRMS_Salary_Details obj_tbl_HRMS_Salary_Details, List<string> _MonthYear, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (HRMSEmployee_Id == 0)
                {
                    string _HRMSEmployee_Id = Insert_HRMSEmployeeBasicDetails(obj_HRMSEmployeeBasicDetails, trans, cn);
                    obj_HRMSEmployeeBasicDetails.HRMSEmployee_Id = Convert.ToInt32(_HRMSEmployee_Id);
                }
                else
                {
                    Update_HRMSEmployeeBasicDetails(obj_HRMSEmployeeBasicDetails, trans, cn);
                }

                obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_HRMSEmployee_Id = obj_HRMSEmployeeBasicDetails.HRMSEmployee_Id;
                Update_HRMSEmployeePostingDetails(obj_HRMSEmployeePostingDetails, trans, cn);
                Insert_HRMSEmployeePostingDetails(obj_HRMSEmployeePostingDetails, trans, cn);

                obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRMSEmployee_Id = obj_HRMSEmployeeBasicDetails.HRMSEmployee_Id;
                Update_HRMSEmployeeSalaryInfo(obj_HRMSEmployeeSalaryInfo, trans, cn);
                Insert_HRMSEmployeeSalaryInfo(obj_HRMSEmployeeSalaryInfo, trans, cn);

                obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_HRMSEmployee_Id = obj_HRMSEmployeeBasicDetails.HRMSEmployee_Id;
                Update_HRMSEmployeeBankDetails(obj_HRMSEmployeeBankDetails, trans, cn);
                Insert_HRMSEmployeeBankDetails(obj_HRMSEmployeeBankDetails, trans, cn);

                if (UpdateLastGeneratedSal && _MonthYear.Count > 0)
                {
                    for (int i = 0; i < _MonthYear.Count; i++)
                    {
                        string[] _Data = _MonthYear[i].Split(new char[] { '|' });
                        obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Month = Convert.ToInt32(_Data[0]);
                        obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Year = Convert.ToInt32(_Data[1]);
                        if (obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Month > 0 && obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Year > 0)
                        {
                            Update_tbl_HRMS_Salary_Details(obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Month, obj_tbl_HRMS_Salary_Details.HRMS_Salary_Details_Year, HRMSEmployee_Id, obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_ZoneId, obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_CircleId, obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DivisionId, obj_HRMSEmployeeBasicDetails.HRMSEmployee_AddedBy, trans, cn);

                            Insert_tbl_HRMS_Salary_Details(obj_tbl_HRMS_Salary_Details, trans, cn);
                        }
                    }
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    public DataSet get_LastGeneratedSalary(int HRMSEmployee_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        try
        {
            if (HRMSEmployee_Id > 0)
            {
                strQuery = @"set dateformat dmy; 
                            select 
	                            HRMS_Salary_Details_Month, 
	                            HRMS_Salary_Details_Year, 
	                            Month_Year_Id = convert(varchar, HRMS_Salary_Details_Month) + '|' + convert(varchar, HRMS_Salary_Details_Year),
	                            Month_Year = 'Salary For ' + convert(varchar, HRMS_Salary_Details_Month) + '-' + convert(varchar, HRMS_Salary_Details_Year) 
                            from tbl_HRMS_Salary_Details where HRMS_Salary_Details_Status = 1 and isnull(Is_Verified, 0) = 0 and tbl_HRMS_Salary_Details.HRMS_Salary_Details_HRMSEmployee_Id = '" + HRMSEmployee_Id + "' order by (HRMS_Salary_Details_Month + HRMS_Salary_Details_Year) desc";
                ds = ExecuteSelectQuery(strQuery);
                if (!AllClasses.CheckDataSet(ds))
                {
                    strQuery = @"set dateformat dmy; 
						        select * from (
                                select 
	                                distinct
							        HRMS_Salary_Details_Month, 
	                                HRMS_Salary_Details_Year, 
	                                Month_Year_Id = convert(varchar, HRMS_Salary_Details_Month) + '|' + convert(varchar, HRMS_Salary_Details_Year),
	                                Month_Year = 'Salary For ' + convert(varchar, HRMS_Salary_Details_Month) + '-' + convert(varchar, HRMS_Salary_Details_Year) 
                                from tbl_HRMS_Salary_Details where HRMS_Salary_Details_Status = 1 
						        ) tData
						        order by (HRMS_Salary_Details_Month + HRMS_Salary_Details_Year) desc";
                    ds = ExecuteSelectQuery(strQuery);
                }
            }
            else
            {
                strQuery = @"set dateformat dmy; 
						    select * from (
                            select 
	                            distinct
							    HRMS_Salary_Details_Month, 
	                            HRMS_Salary_Details_Year, 
	                            Month_Year_Id = convert(varchar, HRMS_Salary_Details_Month) + '|' + convert(varchar, HRMS_Salary_Details_Year),
	                            Month_Year = 'Salary For ' + convert(varchar, HRMS_Salary_Details_Month) + '-' + convert(varchar, HRMS_Salary_Details_Year) 
                            from tbl_HRMS_Salary_Details where HRMS_Salary_Details_Status = 1 
						    ) tData
						    order by (HRMS_Salary_Details_Month + HRMS_Salary_Details_Year) desc";
                ds = ExecuteSelectQuery(strQuery);
            }
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private string Insert_HRMSEmployeeBasicDetails(tbl_HRMSEmployeeDetails obj_HRMSEmployeeBasicDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_HRMSEmployeeDetails ([HRMSEmployee_AddedBy],[HRMSEmployee_AddedOn],[HRMSEmployee_Name],[HRMSEmployee_SpouseName],[HRMSEmployee_SpecialCategory],[HRMSEmployee_FatherName],[HRMSEmployee_Gender],[HRMSEmployee_MaritalStatus],[HRMSEmployee_DOB],[HRMSEmployee_AppointmentDate],[HRMSEmployee_JoinDateInService],[HRMSEmployee_DepartmentalEmployeeCode],[HRMSEmployee_MarriageDate],[HRMSEmployee_Type],[HRMSEmployee_Spouse_eHRMSCode],[HRMSEmployee_HomeState],[HRMSEmployee_HomeDistrict],[HRMSEmployee_AreaPinCode],[HRMSEmployee_FullAddress],[HRMSEmployee_EmailId],[HRMSEmployee_MobileNo],[HRMSEmployee_Status],[HRMSEmployee_Religion],[HRMSEmployee_Caste], [HRMSEmployee_HRMSCode], [HRMSEmployee_AadharNo], [HRMSEmployee_PANNo]) values('" +
            obj_HRMSEmployeeBasicDetails.HRMSEmployee_AddedBy + "', getdate(), N'" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Name + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_SpouseName + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_SpecialCategory + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_FatherName + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Gender + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MaritalStatus + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_DOB + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AppointmentDate + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_JoinDateInService + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_DepartmentalEmployeeCode + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MarriageDate + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Type + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Spouse_eHRMSCode + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HomeState + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HomeDistrict + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AreaPinCode + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_FullAddress + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_EmailId + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MobileNo + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Status + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Religion + "','" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Caste + "', '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HRMSCode + "', '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AadharNo + "', '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_PANNo + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    private string Insert_HRMSEmployeePostingDetails(tbl_HRMSEmployeeJuridiction obj_HRMSEmployeePostingDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_HRMSEmployeeJuridiction ([HRMSEmployeeJuridiction_AddedBy],[HRMSEmployeeJuridiction_AddedOn],[HRMSEmployeeJuridiction_ZoneId],[HRMSEmployeeJuridiction_CircleId],[HRMSEmployeeJuridiction_DivisionId],[HRMSEmployeeJuridiction_DesignationId],[HRMSEmployeeJuridiction_Cadre],[HRMSEmployeeJuridiction_OrderDate],[HRMSEmployeeJuridiction_RetirementDate],[HRMSEmployeeJuridiction_JoinDateInCurrentOffice],[HRMSEmployeeJuridiction_CUGNo],[HRMSEmployeeJuridiction_Status],[HRMSEmployeeJuridiction_HRMSEmployee_Id],[HRMSEmployeeJuridiction_GPF], [HRMSEmployeeJuridiction_PRAAN]) values('" +
            obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_AddedBy + "', getdate(), N'" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_ZoneId + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_CircleId + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DivisionId + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DesignationId + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_Cadre + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_OrderDate + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_RetirementDate + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_JoinDateInCurrentOffice + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_CUGNo + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_Status + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_HRMSEmployee_Id + "','" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_GPF + "', '" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_PRAAN + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    private string Insert_HRMSEmployeeSalaryInfo(tbl_HRMSEmployeeSalaryInfo obj_HRMSEmployeeSalaryInfo, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_HRMSEmployeeSalaryInfo ([HRMSEmployeeSalaryInfo_AddedBy],[HRMSEmployeeSalaryInfo_AddedOn],[HRMSEmployeeSalaryInfo_PayScale_Id],[HRMSEmployeeSalaryInfo_GovQuarter_Alloted],[HRMSEmployeeSalaryInfo_CugNoAlloted],[HRMSEmployeeSalaryInfo_VehicleAlloted],[HRMSEmployeeSalaryInfo_CityType],[HRMSEmployeeSalaryInfo_Status],[HRMSEmployeeSalaryInfo_HRMSEmployee_Id], [HRMSEmployeeSalaryInfo_GradePay_Id], HRMSEmployeeSalaryInfo_Basic_Sal, HRMSEmployeeSalaryInfo_Grade_Pay, HRMSEmployeeSalaryInfo_DA, HRMSEmployeeSalaryInfo_HRA, HRMSEmployeeSalaryInfo_MA, HRMSEmployeeSalaryInfo_Personal_Pay, HRMSEmployeeSalaryInfo_Special_Pay, HRMSEmployeeSalaryInfo_Other_Allowance, HRMSEmployeeSalaryInfo_Gross_Salary, HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Current, HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Arrear, HRMSEmployeeSalaryInfo_Gross_Salary_Including_NPS_Contribution, HRMSEmployeeSalaryInfo_GPF, HRMSEmployeeSalaryInfo_GPF_Advance, HRMSEmployeeSalaryInfo_GIS, HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Invested_at_HQ_level, HRMSEmployeeSalaryInfo_Income_Tax, HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Current, HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Arrear, HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Paid, HRMSEmployeeSalaryInfo_HRA_For_Jal_Nigam_Colony_Employee, HRMSEmployeeSalaryInfo_Colony_Maintance, HRMSEmployeeSalaryInfo_Motor_Vehicle_Deduction, HRMSEmployeeSalaryInfo_Other_Deduction, HRMSEmployeeSalaryInfo_Total_Deduction_Not_to_be_Paid, HRMSEmployeeSalaryInfo_Total_Deduction, HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Division, HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Employee) values('" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_AddedBy + "', getdate(), N'" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_PayScale_Id + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_GovQuarter_Alloted + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_CugNoAlloted + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_VehicleAlloted + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_CityType + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Status + "','" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRMSEmployee_Id + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_GradePay_Id + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Basic_Sal + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Grade_Pay + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_DA + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRA + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_MA + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Personal_Pay + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Special_Pay + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Other_Allowance + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Gross_Salary + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Current + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Arrear + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Gross_Salary_Including_NPS_Contribution + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_GPF + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_GPF_Advance + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_GIS + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Invested_at_HQ_level + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Income_Tax + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Current + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Arrear + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Paid + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRA_For_Jal_Nigam_Colony_Employee + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Colony_Maintance + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Motor_Vehicle_Deduction + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Other_Deduction + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Total_Deduction_Not_to_be_Paid + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Total_Deduction + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Division + "', '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Employee + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private string Insert_HRMSEmployeeBankDetails(tbl_HRMSEmployeeBankDetails obj_HRMSEmployeeBankDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_HRMSEmployeeBankDetails ([HRMSEmployeeBankDetails_AddedBy],[HRMSEmployeeBankDetails_AddedOn],[HRMSEmployeeBankDetails_BankName],[HRMSEmployeeBankDetails_BranchName],[HRMSEmployeeBankDetails_AccountNo],[HRMSEmployeeBankDetails_IFSC_Code],[HRMSEmployeeBankDetails_Status],[HRMSEmployeeBankDetails_HRMSEmployee_id]) values('" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_AddedBy + "', getdate(), N'" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_BankName + "','" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_BranchName + "','" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_AccountNo + "','" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_IFSC_Code + "','" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_Status + "','" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_HRMSEmployee_Id + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    public DataSet get_tbl_HRMSEmployeeDetails(int Zone_Id, int Circle_Id, int Division_Id, int HRMSEmployeeCode, int HRMSEmployee_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select
                        HRMSEmployee_Id,
                        HRMSEmployee_Name,
                        HRMSEmployee_SpouseName,
                        HRMSEmployee_SpecialCategory,
                        HRMSEmployee_FatherName,
                        HRMSEmployee_Gender,
						HRMSEmployee_MaritalStatus,
						HRMSEmployee_DOB=case when convert(char(10), HRMSEmployee_DOB, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_DOB, 103) end,
						HRMSEmployee_AppointmentDate=case when convert(char(10), HRMSEmployee_AppointmentDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_AppointmentDate, 103) end,
						HRMSEmployee_JoinDateInService=case when convert(char(10), HRMSEmployee_JoinDateInService, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_JoinDateInService, 103) end,
						HRMSEmployee_DepartmentalEmployeeCode,
						HRMSEmployee_MarriageDate=case when convert(char(10), HRMSEmployee_MarriageDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_MarriageDate, 103) end,
						HRMSEmployee_Type,
						HRMSEmployee_Spouse_eHRMSCode,
						HRMSEmployee_HomeState,
						HRMSEmployee_HomeDistrict,
						HRMSEmployee_AreaPincode,
						HRMSEmployee_FullAddress,
						HRMSEmployee_EmailId,
						HRMSEmployee_MobileNo,	
                        HRMSEmployee_Religion,	
						HRMSEmployee_Caste,	
                        HRMSEmployee_AddedBy,
                        HRMSEmployee_AddedOn,
                        HRMSEmployee_HRMSCode,
						HRMSEmployeeJuridiction_Id,
						HRMSEmployeeJuridiction_ZoneId,
						HRMSEmployeeJuridiction_CircleId,
						HRMSEmployeeJuridiction_DivisionId, 
                        Zone_Name, 
                        Circle_Name, 
                        Division_Name
                    from tbl_HRMSEmployeeDetails
					left join tbl_HRMSEmployeeJuridiction as tbl_HRMSEmployeeJuridiction1 on tbl_HRMSEmployeeJuridiction1.HRMSEmployeeJuridiction_HRMSEmployee_Id = HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction1.HRMSEmployeeJuridiction_Status = 1
                    left join tbl_Zone as tbl_Zone1 on tbl_Zone1.Zone_Id=HRMSEmployeeJuridiction_ZoneId
                    left join tbl_Circle as tbl_Circle1 on tbl_Circle1.Circle_Id=HRMSEmployeeJuridiction_CircleId
                    left join tbl_Division as tbl_Division1 on tbl_Division1.Division_Id=HRMSEmployeeJuridiction_DivisionId
                   where HRMSEmployee_Status = 1 and HRMSEmployeeJuridiction_Status=1";
        if (Zone_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_ZoneId ='" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_CircleId ='" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_DivisionId='" + Division_Id + "'";
        }
        if (HRMSEmployeeCode > 0)
        {
            strQuery += "and HRMSEmployee_DepartmentalEmployeeCode='" + HRMSEmployeeCode + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_HRMSEmployeeEdit(int HRMSEmployee_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        HRMSEmployee_Id,
                        HRMSEmployee_Name,
                        HRMSEmployee_SpouseName,
                        SpecialCategory_Name,
                        EmployeeType_Name,
                        State_Name,
                        District_Name,
                        HRMSEmployee_SpecialCategory,
                        HRMSEmployee_FatherName,
                        HRMSEmployee_Gender,
						HRMSEmployee_MaritalStatus,
						HRMSEmployee_DOB=case when convert(char(10), HRMSEmployee_DOB, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_DOB, 103) end,
						HRMSEmployee_AppointmentDate=case when convert(char(10), HRMSEmployee_AppointmentDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_AppointmentDate, 103) end,
						HRMSEmployee_JoinDateInService=case when convert(char(10), HRMSEmployee_JoinDateInService, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_JoinDateInService, 103) end,
						HRMSEmployee_DepartmentalEmployeeCode,
						HRMSEmployee_MarriageDate=case when convert(char(10), HRMSEmployee_MarriageDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_MarriageDate, 103) end,
						HRMSEmployee_Type,
						HRMSEmployee_Spouse_eHRMSCode,
                        HRMSEmployee_HRMSCode, 
                        HRMSEmployee_AadharNo, 
                        HRMSEmployee_PANNo,
						HRMSEmployee_Religion,
						HRMSEmployee_Caste,
						HRMSEmployee_HomeState,
						HRMSEmployee_HomeDistrict,
						HRMSEmployee_AreaPincode,
						HRMSEmployee_FullAddress,
						HRMSEmployee_EmailId,
						HRMSEmployee_MobileNo,		
                        HRMSEmployee_AddedBy,
                        HRMSEmployee_AddedOn,
                        HRMSEmployee_Status
                    from tbl_HRMSEmployeeDetails
                    left join tbl_SpecialCategory as tbl_SpecialCategory1 on tbl_SpecialCategory1.SpecialCategory_Id=HRMSEmployee_SpecialCategory
                    left join tbl_EmployeeType as tbl_EmployeeType1 on tbl_EmployeeType1.EmployeeType_Id=HRMSEmployee_Type
                    left join tbl_State as tbl_State1 on tbl_State1.State_Id=HRMSEmployee_HomeState
                    left join tbl_District as tbl_District1 on tbl_District1.District_Id=HRMSEmployee_HomeDistrict
                    where HRMSEmployee_Id='" + HRMSEmployee_Id + "' and HRMSEmployee_Status=1";

        strQuery += @"select 
                        HRMSEmployeeJuridiction_Id,
                        HRMSEmployeeJuridiction_ZoneId,
                        HRMSEmployeeJuridiction_CircleId,
                        HRMSEmployeeJuridiction_DivisionId,
                        HRMSEmployeeJuridiction_DesignationId,
                        HRMSEmployeeJuridiction_Cadre,
                        HRMSEmployeeJuridiction_GPF,
                        Zone_Name,
                        Circle_Name,
                        Division_Name,
                        Designation_DesignationName,
                        Cadre_Name,
                        HRMSEmployeeJuridiction_OrderDate=case when convert(char(10), HRMSEmployeeJuridiction_OrderDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployeeJuridiction_OrderDate, 103) end,
                        HRMSEmployeeJuridiction_RetirementDate=case when convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103) end,
                        HRMSEmployeeJuridiction_JoinDateInCurrentOffice=case when convert(char(10), HRMSEmployeeJuridiction_JoinDateInCurrentOffice, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployeeJuridiction_JoinDateInCurrentOffice, 103) end,
                        HRMSEmployeeJuridiction_CUGNo,
                        HRMSEmployeeJuridiction_HRMSEmployee_Id,
                        HRMSEmployeeJuridiction_PRAAN,
                        HRMSEmployeeJuridiction_AddedBy,
                        HRMSEmployeeJuridiction_AddedOn,
                        HRMSEmployeeJuridiction_ModifiedBy,
                        HRMSEmployeeJuridiction_ModifiedOn,
                        HRMSEmployeeJuridiction_Status                             
                    from tbl_HRMSEmployeeJuridiction 
                    left join tbl_Zone as tbl_Zone1 on tbl_Zone1.Zone_Id=HRMSEmployeeJuridiction_ZoneId
                    left join tbl_Circle as tbl_Circle1 on tbl_Circle1.Circle_Id=HRMSEmployeeJuridiction_CircleId
                    left join tbl_Division as tbl_Division1 on tbl_Division1.Division_Id=HRMSEmployeeJuridiction_DivisionId
                    left join tbl_Designation as tbl_Designation1 on tbl_Designation1.Designation_Id=HRMSEmployeeJuridiction_DesignationId
                    left join tbl_Cadre as tbl_Cadre1 on tbl_Cadre1.Cadre_Id=HRMSEmployeeJuridiction_Cadre
                    where HRMSEmployeeJuridiction_HRMSEmployee_Id='" + HRMSEmployee_Id + "' and HRMSEmployeeJuridiction_Status=1";

        strQuery += @" select
                            HRMSEmployeeSalaryInfo_Id,
                            HRMSEmployeeSalaryInfo_PayScale_Id,
                            PayScale_Name,
                            PayBand_Name,
                            PayBand_Id,
                            HRMSEmployeeSalaryInfo_GovQuarter_Alloted,
                            HRMSEmployeeSalaryInfo_CugNoAlloted,
                            HRMSEmployeeSalaryInfo_VehicleAlloted,
                            HRMSEmployeeSalaryInfo_CityType,
                            HRMSEmployeeSalaryInfo_AddedBy,
                            HRMSEmployeeSalaryInfo_AddedOn,
                            HRMSEmployeeSalaryInfo_ModifiedBy,
                            HRMSEmployeeSalaryInfo_ModifiedOn,
                            HRMSEmployeeSalaryInfo_Status,
                            HRMSEmployeeSalaryInfo_HRMSEmployee_Id, 
                            HRMSEmployeeSalaryInfo_Basic_Sal,
                            HRMSEmployeeSalaryInfo_Grade_Pay,
                            HRMSEmployeeSalaryInfo_DA,
                            HRMSEmployeeSalaryInfo_HRA,
                            HRMSEmployeeSalaryInfo_MA,
                            HRMSEmployeeSalaryInfo_Personal_Pay,
                            HRMSEmployeeSalaryInfo_Special_Pay,
                            HRMSEmployeeSalaryInfo_Other_Allowance,
                            HRMSEmployeeSalaryInfo_Gross_Salary,
                            HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Current,
                            HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Arrear,
                            HRMSEmployeeSalaryInfo_Gross_Salary_Including_NPS_Contribution,
                            HRMSEmployeeSalaryInfo_GPF,
                            HRMSEmployeeSalaryInfo_GPF_Advance,
                            HRMSEmployeeSalaryInfo_GIS,
                            HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Invested_at_HQ_level,
                            HRMSEmployeeSalaryInfo_Income_Tax,
                            HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Current,
                            HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Arrear,
                            HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Paid,
                            HRMSEmployeeSalaryInfo_HRA_For_Jal_Nigam_Colony_Employee,
                            HRMSEmployeeSalaryInfo_Colony_Maintance,
                            HRMSEmployeeSalaryInfo_Motor_Vehicle_Deduction,
                            HRMSEmployeeSalaryInfo_Other_Deduction,
                            HRMSEmployeeSalaryInfo_Total_Deduction_Not_to_be_Paid,
                            HRMSEmployeeSalaryInfo_Total_Deduction,
                            HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Division,
                            HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Employee
                       from tbl_HRMSEmployeeSalaryInfo
                       left join tbl_PayScale as tbl_PayScale1 on tbl_PayScale1.PayScale_Id=HRMSEmployeeSalaryInfo_PayScale_Id
                       left join tbl_PayBand as tbl_PayBand1 on tbl_PayBand1.PayBand_Id=PayScale_PayBandId
                       where HRMSEmployeeSalaryInfo_HRMSEmployee_Id='" + HRMSEmployee_Id + "' and HRMSEmployeeSalaryInfo_Status=1";

        strQuery += @" select
                            HRMSEmployeeBankDetails_Id,
                            HRMSEmployeeBankDetails_BankName,
                            Bank_Name,
                            HRMSEmployeeBankDetails_BranchName,
                            HRMSEmployeeBankDetails_AccountNo,
                            HRMSEmployeeBankDetails_IFSC_Code,
                            HRMSEmployeeBankDetails_AddedBy,
                            HRMSEmployeeBankDetails_AddedOn,
                            HRMSEmployeeBankDetails_ModifiedBy,
                            HRMSEmployeeBankDetails_ModifiedOn,
                            HRMSEmployeeBankDetails_Status,
                            HRMSEmployeeBankDetails_HRMSEmployee_Id
                       from tbl_HRMSEmployeeBankDetails
                       left join tbl_Bank as tbl_Bank1 on tbl_Bank1.Bank_Id=HRMSEmployeeBankDetails_BankName
                       where HRMSEmployeeBankDetails_HRMSEmployee_Id='" + HRMSEmployee_Id + "' and HRMSEmployeeBankDetails_Status=1";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    private void Update_HRMSEmployeeBasicDetails(tbl_HRMSEmployeeDetails obj_HRMSEmployeeBasicDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_HRMSEmployeeDetails set HRMSEmployee_Name='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Name + "',HRMSEmployee_SpouseName='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_SpouseName + "',HRMSEmployee_SpecialCategory='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_SpecialCategory + "',HRMSEmployee_FatherName='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_FatherName + "',HRMSEmployee_Gender='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Gender + "',HRMSEmployee_MaritalStatus='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MaritalStatus + "',HRMSEmployee_DOB='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_DOB + "',HRMSEmployee_AppointmentDate='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AppointmentDate + "',HRMSEmployee_JoinDateInService='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_JoinDateInService + "',HRMSEmployee_DepartmentalEmployeeCode='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_DepartmentalEmployeeCode + "',HRMSEmployee_MarriageDate='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MarriageDate + "',HRMSEmployee_Type='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Type + "',HRMSEmployee_Spouse_eHRMSCode='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Spouse_eHRMSCode + "',HRMSEmployee_HomeState='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HomeState + "',HRMSEmployee_HomeDistrict='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HomeDistrict + "',HRMSEmployee_AreaPinCode='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AreaPinCode + "',HRMSEmployee_FullAddress='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_FullAddress + "',HRMSEmployee_EmailId='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_EmailId + "',HRMSEmployee_MobileNo='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_MobileNo + "',HRMSEmployee_ModifiedBy='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_ModifiedBy + "',HRMSEmployee_ModifiedOn=getdate(), HRMSEmployee_Caste = '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Caste + "', HRMSEmployee_Religion = '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Religion + "', HRMSEmployee_HRMSCode = '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_HRMSCode + "', HRMSEmployee_AadharNo = '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_AadharNo + "', HRMSEmployee_PANNo = '" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_PANNo + "' where HRMSEmployee_Id='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Id + "' and HRMSEmployee_Status='" + obj_HRMSEmployeeBasicDetails.HRMSEmployee_Status + "' ";

        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_HRMSEmployeePostingDetails(tbl_HRMSEmployeeJuridiction obj_HRMSEmployeePostingDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_HRMSEmployeeJuridiction set HRMSEmployeeJuridiction_Status = 0, HRMSEmployeeJuridiction_ModifiedBy = '" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_ModifiedBy + "', HRMSEmployeeJuridiction_ModifiedOn = getdate() where HRMSEmployeeJuridiction_HRMSEmployee_Id='" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_HRMSEmployee_Id + "' and HRMSEmployeeJuridiction_Status='" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_Status + "' ";

        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_HRMSEmployeeSalaryInfo(tbl_HRMSEmployeeSalaryInfo obj_HRMSEmployeeSalaryInfo, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_HRMSEmployeeSalaryInfo set HRMSEmployeeSalaryInfo_Status = '0', HRMSEmployeeSalaryInfo_ModifiedBy = '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_ModifiedBy + "', HRMSEmployeeSalaryInfo_ModifiedOn = getdate() where HRMSEmployeeSalaryInfo_HRMSEmployee_Id = '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRMSEmployee_Id + "' and HRMSEmployeeSalaryInfo_Status = '" + obj_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Status + "' ";

        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    private void Update_HRMSEmployeeBankDetails(tbl_HRMSEmployeeBankDetails obj_HRMSEmployeeBankDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_HRMSEmployeeBankDetails set HRMSEmployeeBankDetails_Status ='0', HRMSEmployeeBankDetails_ModifiedBy = '" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_ModifiedBy + "', HRMSEmployeeBankDetails_ModifiedOn = getdate() where HRMSEmployeeBankDetails_HRMSEmployee_Id = '" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_HRMSEmployee_Id + "' and HRMSEmployeeBankDetails_Status='" + obj_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_Status + "' ";

        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_HRMSEmployee(int HRMSEmployee_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_HRMSEmployeeDetails set   HRMSEmployee_Status = 0, HRMSEmployee_ModifiedBy='" + person_Id + "',HRMSEmployee_ModifiedOn=getdate() where HRMSEmployee_Id = '" + HRMSEmployee_Id + "' ";

            strQuery += " set dateformat dmy; Update tbl_HRMSEmployeeJuridiction set HRMSEmployeeJuridiction_Status=0,HRMSEmployeeJuridiction_ModifiedBy='" + person_Id + "',HRMSEmployeeJuridiction_ModifiedOn=getdate() where HRMSEmployeeJuridiction_HRMSEmployee_Id='" + HRMSEmployee_Id + "'";

            strQuery += "set dateformat dmy;Update tbl_HRMSEmployeeSalaryInfo set HRMSEmployeeSalaryInfo_Status=0,HRMSEmployeeSalaryInfo_ModifiedBy='" + person_Id + "',HRMSEmployeeSalaryInfo_ModifiedOn=getdate() where HRMSEmployeeSalaryInfo_HRMSEmployee_Id='" + HRMSEmployee_Id + "'";

            strQuery += "set dateformat dmy;Update tbl_HRMSEmployeeBankDetails set HRMSEmployeeBankDetails_Status=0,HRMSEmployeeBankDetails_ModifiedBy='" + person_Id + "',HRMSEmployeeBankDetails_ModifiedOn=getdate() where HRMSEmployeeBankDetails_HRMSEmployee_Id='" + HRMSEmployee_Id + "'";

            strQuery += "set dateformat dmy;Update tbl_HRMSEmployeeSalaryComponent set HRMSEmployeeSalaryComponent_Status=0,HRMSEmployeeSalaryComponent_ModifiedBy='" + person_Id + "',HRMSEmployeeSalaryComponent_ModifiedOn=getdate() where HRMSEmployeeSalaryComponent_HRMSEmployee_Id='" + HRMSEmployee_Id + "'";

            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }

    public bool Update_HRMSEmployeePostingDetails(tbl_HRMSEmployeeJuridiction obj_HRMSEmployeePostingDetails, bool KeepSalaryIntact)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string sql = "";
                sql = "select HRMS_Salary_Details_HRMSEmployee_Id from tbl_HRMS_Salary_Details where tbl_HRMS_Salary_Details.HRMS_Salary_Details_Id = '" + obj_HRMSEmployeePostingDetails.HRMS_Salary_Details_Id + "'";
                ds = ExecuteSelectQuerywithTransaction(cn, sql, trans);
                if (AllClasses.CheckDataSet(ds))
                {
                    sql = "select *, HRMSEmployeeJuridiction_RetirementDate1 = convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103) from tbl_HRMSEmployeeJuridiction where HRMSEmployeeJuridiction_HRMSEmployee_Id = '" + ds.Tables[0].Rows[0]["HRMS_Salary_Details_HRMSEmployee_Id"].ToString() + "'";
                    ds = ExecuteSelectQuerywithTransaction(cn, sql, trans);
                    if (AllClasses.CheckDataSet(ds))
                    {
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_HRMSEmployee_Id = Convert.ToInt32(ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_HRMSEmployee_Id"].ToString());
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_RetirementDate = ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_RetirementDate1"].ToString();
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_Cadre = ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_Cadre"].ToString();
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_CUGNo = ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_CUGNo"].ToString();
                        try
                        {
                            obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DesignationId = Convert.ToInt32(ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_DesignationId"].ToString());
                        }
                        catch
                        {
                            obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DesignationId = 0;
                        }
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_GPF = ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_GPF"].ToString();
                        obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_PRAAN = ds.Tables[0].Rows[0]["HRMSEmployeeJuridiction_PRAAN"].ToString();
                        Update_HRMSEmployeePostingDetails(obj_HRMSEmployeePostingDetails, trans, cn);
                        Insert_HRMSEmployeePostingDetails(obj_HRMSEmployeePostingDetails, trans, cn);
                        if (!KeepSalaryIntact)
                        {
                            sql = "update tbl_HRMS_Salary_Details set Is_Verified = null, Verified_On = null, Zone_Id = '" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_ZoneId + "', Circle_Id = '" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_CircleId + "', Division_Id = '" + obj_HRMSEmployeePostingDetails.HRMSEmployeeJuridiction_DivisionId + "' where HRMS_Salary_Details_Id = '" + obj_HRMSEmployeePostingDetails.HRMS_Salary_Details_Id + "'";
                            ExecuteSelectQuerywithTransaction(cn, sql, trans);
                        }
                    }
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region GPF Master
    public DataSet get_tbl_Basic_GPF_Rate()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        Basic_GPF_Rate_Id,
                        Basic_GPF_Rate,
                        Basic_GPF_Rate_EffectiveBy = convert(char(10), Basic_GPF_Rate_EffectiveBy, 103),
                        Basic_GPF_Rate_AddedOn,
                        Basic_GPF_Rate_AddedBy,
                        Basic_GPF_Rate_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=Basic_GPF_Rate_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=Basic_GPF_Rate_ModifiedOn 
                    from tbl_Basic_GPF_Rate 
                    left join tbl_PersonDetail on Person_Id=Basic_GPF_Rate_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Basic_GPF_Rate_ModifiedBy 
                    where Basic_GPF_Rate_Status=1 order by Basic_GPF_Rate ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_Basic_GPF_Rate(tbl_Basic_GPF_Rate obj_tbl_Basic_GPF_Rate, int Basic_GPF_Rate_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyBasic_GPF_Rate(obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate, Basic_GPF_Rate_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Basic_GPF_Rate_Id == 0)
                {
                    Insert_tbl_Basic_GPF_Rate(obj_tbl_Basic_GPF_Rate, trans, cn);
                }
                else
                {
                    obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_Id = Basic_GPF_Rate_Id;
                    Update_tbl_Basic_GPF_Rate(obj_tbl_Basic_GPF_Rate, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyBasic_GPF_Rate(string Basic_GPF_Rate, string Basic_GPF_Rate_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Basic_GPF_Rate  where Basic_GPF_Rate_Status = 1 and  Basic_GPF_Rate = '" + Basic_GPF_Rate + "' ";
        if (Basic_GPF_Rate_Id != "0")
        {
            strQuery += " AND Basic_GPF_Rate_Id  <> '" + Basic_GPF_Rate_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Basic_GPF_Rate(tbl_Basic_GPF_Rate obj_tbl_Basic_GPF_Rate, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Basic_GPF_Rate( [Basic_GPF_Rate_AddedBy],[Basic_GPF_Rate_AddedOn],[Basic_GPF_Rate],[Basic_GPF_Rate_EffectiveBy],[Basic_GPF_Rate_Status] ) values('" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_AddedBy + "', getdate(), N'" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate + "', convert(date, '" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_EffectiveBy + "', 103),'" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Basic_GPF_Rate(tbl_Basic_GPF_Rate obj_tbl_Basic_GPF_Rate, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Basic_GPF_Rate set  Basic_GPF_Rate = N'" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate + "',Basic_GPF_Rate_EffectiveBy= convert(date, '" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_EffectiveBy + "', 103),Basic_GPF_Rate_ModifiedOn = getDate(),Basic_GPF_Rate_ModifiedBy = '" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_AddedBy + "' where Basic_GPF_Rate_Id = '" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_Id + "' and Basic_GPF_Rate_Status = '" + obj_tbl_Basic_GPF_Rate.Basic_GPF_Rate_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Basic_GPF_Rate(int Basic_GPF_Rate_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Basic_GPF_Rate set   Basic_GPF_Rate_Status = 0,Basic_GPF_Rate_ModifiedBy='" + person_Id + "',Basic_GPF_Rate_ModifiedOn=getdate() where Basic_GPF_Rate_Id = '" + Basic_GPF_Rate_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region CM Report
    public DataSet get_tbl_ProjectWork_Special(string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, string Status, int ProjectType_Id, string ProjectCode)
    {
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        string SanctionedCost = "";
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }

        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
						ProjectWork_StartDate = convert(char(10), ProjectWork_StartDate, 103), 
						ProjectWork_EndDate = convert(char(10), ProjectWork_EndDate, 103), 
                        ProjectWork_GO_No,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        ProjectWork_ProjectType_Id,
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
						tender_cost,
						tender_cost_1,
						ProjectWorkPkg_Due_Date, 
						ProjectWorkPkg_Start_Date, 
						ProjectWorkPkg_Agreement_Date,
						Step_Count = isnull(Step_1, 0) + isnull(Step_2, 0) + isnull(Step_3, 0) + isnull(Step_4, 0) + isnull(Step_5, 0) + isnull(Step_6, 0) + isnull(Step_7, 0), 
						FPCond
                        Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)), 
                        ProjectWork_NodalDepartment_Id, 
                        ProjectWork_NodalDeptScheme_Id
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' 
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 ";
        strQuery = strQuery.Replace("FPCond", FP);
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in ( " + Project_Id + ")";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }
        if (ProjectType_Id != 0)
        {
            strQuery += " and ProjectWork_ProjectType_Id = '" + ProjectType_Id + "'";
        }
        if (ProjectCode != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'";
        }
        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region GPF Passbook Details
    public DataSet get_tbl_GPFPassbookDetails(int Person_Id, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Month_Id,
                        Month_MonthName,
                        Month_FinancialOrder,
                        Month_Status,
                        SelectColumn
                     from tbl_Month
                     joinCondition
                        where Month_Status = 1
                        order by Month_FinancialOrder";
        string sqljoin = "";
        if (Person_Id > 0)
        {
            sqljoin = @"left join
                     (
                  select
                      ROW_NUMBER() over (partition by GPFDetails_MonthId order by GPFDetails_Id desc) rrr,
                        GPFDetails_Id,
                        GPFDetails_HRMS_Employee_Id,
                        GPFDetails_Subscription,
                        GPFDetails_VoucherNo,
                        GPFDetails_VoucherDate=case when convert(char(10), GPFDetails_VoucherDate, 103) = '01/01/1900' then '' else convert(char(10), GPFDetails_VoucherDate, 103) end,
                        GPFDetails_Refund,
                        GPFDetails_Total,
                        GPFDetails_Withdrawal,
                        GPFDetails_Calculation,
                        GPFDetails_Remarks,
                        GPFDetails_TotalSubscription,
                        GPFDetails_MonthId,
                        GPFDetails_AddedBy,
                        GPFDetails_AddedOn,
                        GPFDetails_ModifiedOn,
                        GPFDetails_ModifiedBy,
                        GPFDetails_Year,
                        GPFDetails_BasicGPFRate,
                        GPFDetails_Status
                    from tbl_GPFDetails
                    where GPFDetails_Status=1 and GPFDetails_HRMS_Employee_Id='" + Person_Id + "' YearCond) as t on t.GPFDetails_MonthId=Month_Id and t.rrr=1";

            strQuery = strQuery.Replace("SelectColumn", "t.GPFDetails_MonthId,t.GPFDetails_Subscription,t.GPFDetails_VoucherNo,t.GPFDetails_VoucherDate,t.GPFDetails_Total,t.GPFDetails_Calculation,t.GPFDetails_Remarks,t.GPFDetails_TotalSubscription,t.GPFDetails_Refund,t.GPFDetails_Withdrawal,t.GPFDetails_BasicGPFRate,t.GPFDetails_AddedBy,t.GPFDetails_AddedOn,t.GPFDetails_ModifiedOn,t.GPFDetails_ModifiedBy,t.GPFDetails_Year");
        }
        else
        {
            strQuery = strQuery.Replace("SelectColumn", "GPFDetails_MonthId=0");
        }
        strQuery = strQuery.Replace("joinCondition", sqljoin);
        if (Year > 0)
        {
            strQuery = strQuery.Replace("YearCond", "and GPFDetails_Year='" + Year + "'");
        }
        else
        {
            strQuery = strQuery.Replace("YearCond", null);
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_GPFDetails(List<tbl_GPFDetails> obj_tbl_GPFDetails_Li, ref string Msg, int HRMSEmployee_Id, int Person_Id, int Year)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }

            SqlTransaction trans = cn.BeginTransaction();
            try
            {

                Update_tbl_GPFDetails(HRMSEmployee_Id, Person_Id, Year, trans, cn);
                for (int i = 0; i < obj_tbl_GPFDetails_Li.Count; i++)
                {
                    obj_tbl_GPFDetails_Li[i].GPFDetails_HRMS_Employee_Id = HRMSEmployee_Id;
                    Insert_tbl_GPFDetails(obj_tbl_GPFDetails_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;

            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_GPFDetails(tbl_GPFDetails obj_tbl_GPFDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = "set dateformat dmy; insert into tbl_GPFDetails([GPFDetails_HRMS_Employee_Id],[GPFDetails_Subscription],[GPFDetails_VoucherNo],[GPFDetails_VoucherDate],[GPFDetails_Refund],[GPFDetails_Total],[GPFDetails_Withdrawal],[GPFDetails_Calculation],[GPFDetails_Remarks],[GPFDetails_TotalSubscription],[GPFDetails_MonthId],[GPFDetails_BasicGPFRate],[GPFDetails_AddedBy],[GPFDetails_Year],[GPFDetails_Status],[GPFDetails_AddedOn]) values('" + obj_tbl_GPFDetails.GPFDetails_HRMS_Employee_Id + "','" + obj_tbl_GPFDetails.GPFDetails_Subscription + "','" + obj_tbl_GPFDetails.GPFDetails_VoucherNo + "','" + obj_tbl_GPFDetails.GPFDetails_VoucherDate + "','" + obj_tbl_GPFDetails.GPFDetails_Refund + "','" + obj_tbl_GPFDetails.GPFDetails_Total + "','" + obj_tbl_GPFDetails.GPFDetails_Withdrawal + "','" + obj_tbl_GPFDetails.GPFDetails_Calculation + "','" + obj_tbl_GPFDetails.GPFDetails_Remarks + "','" + obj_tbl_GPFDetails.GPFDetails_TotalSubscription + "','" + obj_tbl_GPFDetails.GPFDetails_MonthId + "','" + obj_tbl_GPFDetails.GPFDetails_BasicGPFRate + "','" + obj_tbl_GPFDetails.GPFDetails_AddedBy + "','" + obj_tbl_GPFDetails.GPFDetails_Year + "','" + obj_tbl_GPFDetails.GPFDetails_Status + "',getdate());Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_GPFDetails(int HRMSEmployee_Id, int Person_Id, int Year, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_GPFDetails set [GPFDetails_Status] = 0,[GPFDetails_ModifiedOn]=getdate(),[GPFDetails_ModifiedBy]='" + Person_Id + "' where [GPFDetails_HRMS_Employee_Id] = '" + HRMSEmployee_Id + "' and [GPFDetails_Year]='" + Year + "' and [GPFDetails_Status] = 1";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region EmployeeLoan
    public bool Insert_tbl_EmployeeLoan(tbl_EmployeeLoan obj_tbl_EmployeeLoan, int EmployeeLoan_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyEmployeeLoan(obj_tbl_EmployeeLoan.EmployeeLoan_EmpCode, EmployeeLoan_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (EmployeeLoan_Id == 0)
                {
                    Insert_tbl_EmployeeLoan(obj_tbl_EmployeeLoan, trans, cn);
                }
                else
                {
                    obj_tbl_EmployeeLoan.EmployeeLoan_Id = EmployeeLoan_Id;
                    Update_tbl_EmployeeLoan(obj_tbl_EmployeeLoan, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private string Insert_tbl_EmployeeLoan(tbl_EmployeeLoan obj_tbl_EmployeeLoan, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_EmployeeLoan([EmployeeLoan_EmpCode],[EmployeeLoan_Type],[EmployeeLoan_Amount],[EmployeeLoan_Month],[EmployeeLoan_RateOfInterest],[EmployeeLoan_Date],[EmployeeLoan_GrandTotal],[EmployeeLoan_AddedBy],[EmployeeLoan_AddedOn],[EmployeeLoan_Status] ) values('" + obj_tbl_EmployeeLoan.EmployeeLoan_EmpCode + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_Type + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_Amount + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_Month + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_RateOfInterest + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_Date + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_GrandTotal + "','" + obj_tbl_EmployeeLoan.EmployeeLoan_AddedBy + "', getdate(),'" + obj_tbl_EmployeeLoan.EmployeeLoan_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    private DataSet CheckDuplicacyEmployeeLoan(string EmployeeLoan_EmpCode, string EmployeeLoan_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_EmployeeLoan  where EmployeeLoan_Status = 1 and  EmployeeLoan_EmpCode = '" + EmployeeLoan_EmpCode + "' ";
        if (EmployeeLoan_Id != "0")
        {
            strQuery += " AND EmployeeLoan_Id  <> '" + EmployeeLoan_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }
    public DataSet get_tbl_EmployeeLoan(int EmployeeLoan_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                     select 
                        EmployeeLoan_Id,
                        EmployeeLoan_EmpCode,
                        EmployeeLoan_Type,
                        EmployeeLoan_Amount,
                        EmployeeLoan_Month,
                        EmployeeLoan_RateOfInterest,
                        EmployeeLoan_Date,
                        EmployeeLoan_GrandTotal,
                        EmployeeLoan_AddedBy,
                        EmployeeLoan_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=EmployeeLoan_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=EmployeeLoan_ModifiedOn 
                    from tbl_EmployeeLoan 	
                    left join tbl_PersonDetail on Person_Id=EmployeeLoan_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=EmployeeLoan_ModifiedBy 
                    where EmployeeLoan_Status=1";

        if (EmployeeLoan_Id > 0)
        {
            strQuery += "and EmployeeLoan_Id ='" + EmployeeLoan_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private void Update_tbl_EmployeeLoan(tbl_EmployeeLoan obj_tbl_EmployeeLoan, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_EmployeeLoan set EmployeeLoan_EmpCode='" + obj_tbl_EmployeeLoan.EmployeeLoan_EmpCode + "',EmployeeLoan_Type='" + obj_tbl_EmployeeLoan.EmployeeLoan_Type + "',EmployeeLoan_Amount='" + obj_tbl_EmployeeLoan.EmployeeLoan_Amount + "',EmployeeLoan_Month='" + obj_tbl_EmployeeLoan.EmployeeLoan_Month + "',EmployeeLoan_RateOfInterest='" + obj_tbl_EmployeeLoan.EmployeeLoan_RateOfInterest + "',EmployeeLoan_Date='" + obj_tbl_EmployeeLoan.EmployeeLoan_Date + "',EmployeeLoan_GrandTotal='" + obj_tbl_EmployeeLoan.EmployeeLoan_GrandTotal + "',EmployeeLoan_ModifiedOn = getDate(),EmployeeLoan_ModifiedBy = '" + obj_tbl_EmployeeLoan.EmployeeLoan_AddedBy + "' where EmployeeLoan_Id = '" + obj_tbl_EmployeeLoan.EmployeeLoan_Id + "' and EmployeeLoan_Status = '" + obj_tbl_EmployeeLoan.EmployeeLoan_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_EmployeeLoan(int EmployeeLoan_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_EmployeeLoan set   EmployeeLoan_Status = 0,EmployeeLoan_ModifiedBy='" + person_Id + "',EmployeeLoan_ModifiedOn=getdate() where EmployeeLoan_Id = '" + EmployeeLoan_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Dynamic Reporting
    public DataSet get_tbl_ProjectWork_Data_Dump_Pivot(string Scheme_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, string fromDate, string tillDate)
    {
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        string SanctionedCost = "";
        if (Client == "CNDS")
        {
            SanctionedCost = "[Budget] = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "[Budget] = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        row_number() over (order by Project_Name, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name) Sr_No,
                        tbl_ProjectWork.ProjectWork_Id, 
                        [Zone] = Zone_Name, 
						Circle = replace(replace(REPLACE(isnull(Circle_Name, ''), '-', ' '), '/', ' '), '.', ' '),
						Division = replace(replace(REPLACE(isnull(Division_Name, ''), '-', ' '), '/', ' '), '.', ' '), 
						Town = replace(replace(REPLACE(isnull(Jurisdiction_Name_Eng, ''), '-', ' '), '/', ' '), '.', ' '),                         
						Scheme = Project_Name, 
                        [SAAP Year] = ProjectWork_SAAPYear, 
						[Under NGT] = ProjectWork_UnderNGT,
                        [Project Code] = ProjectWork_ProjectCode, 
						[Project Type] = ProjectType_Name,
						[Program Name] = Program_Name,
                        [Start Date] = case when convert(char(10), ProjectWork_StartDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectWork_StartDate, 103) end, 
						[End Date] = case when convert(char(10), ProjectWork_EndDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectWork_EndDate, 103) end, 
						[GO Date] = convert(char(10), ProjectWork_GO_Date, 103), 
                        SanctionedCostCond
						[Central Share] = Funding.Central_Share, 
						[State Share] = Funding.State_Share, 
						[ULB Share] = Funding.ULB_Share, 
						[Work Cost] = case when (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) = 0 then isnull(ProjectWork_Budget, 0) else (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) end, 
						[Centage] = ProjectWork_Centage, 
						[Total Cost (Including Centage)] = case when (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) = 0 then isnull(ProjectWork_Budget, 0) else (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) end + isnull(ProjectWork_Centage, 0), 
                        [Tender Cost Including GST] = tProjectWorkPkg.tender_cost,
                        [Tender Cost Excluding GST] = tProjectWorkPkg.tender_cost_1,
                        [Central Share 1st Instalment] = tGO_Release.GO_CentralShare_1, 
						[State Share 1st Instalment] = tGO_Release.GO_StateShare_1, 
						[Centage 1st Instalment] = tGO_Release.GO_Centage_1,
						[Date 1st Instalment] = tGO_Release.GO_No_Date_1,
						[Central Share 2nd Instalment] = tGO_Release.GO_CentralShare_2, 
						[State Share 2nd Instalment] = tGO_Release.GO_StateShare_2, 
						[Centage 2nd Instalment] = tGO_Release.GO_Centage_2,
						[Date 2nd Instalment] = tGO_Release.GO_No_Date_2,
						[Central Share 3rd Instalment] = tGO_Release.GO_CentralShare_3, 
						[State Share 3rd Instalment] = tGO_Release.GO_StateShare_3, 
						[Centage 3rd Instalment] = tGO_Release.GO_Centage_3,
						[Date 3rd Instalment] = tGO_Release.GO_No_Date_3,
                        [ULB Share 1st Instalment] = tGO_ReleaseULB.GO_ULBShare_1,
						[Date ULB Share 1st Instalment] = tGO_ReleaseULB.GO_ULB_No_Date_1,
						[ULB Share 2nd Instalment] = tGO_ReleaseULB.GO_ULBShare_2, 
						[Date ULB Share 2nd Instalment] = tGO_ReleaseULB.GO_ULB_No_Date_2,
						[ULB Share 3rd Instalment] = tGO_ReleaseULB.GO_ULBShare_3,
						[Date ULB Share 3rd Instalment] = tGO_ReleaseULB.GO_ULB_No_Date_3,
						[Total Funds released against Central Share] = isnull(tGO_Release.GO_CentralShare, 0), 
						[Total Funds released against State Share] = isnull(tGO_Release.GO_StateShare, 0), 
						[Total_Funds_released_against_ULB_Share] = isnull(tGO_ReleaseULB.GO_ULBShare, 0), 
						[Total Funds released against Centage] = isnull(tGO_Release.GO_Centage, 0), 
						
						[Invoice Before ePayment] = isnull(tPrevInvoice.Amount, 0),
                        [Other Dept Before ePayment] = isnull(tPrevInvoiceADP.Amount, 0), 
						[Total No Of Invoice after ePayment Till Date] = isnull(tInvoice.Total_Invoice, 0), 
                        [Total Invoice Value after ePayment Till Date] = isnull(tInvoice.Total_Invoice_Value, 0),						
                        [Total Invoice Value Till Date (Including Deffered Invoice)] = isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoice.Amount, 0),
						[Total Invoice Deffered after ePayment Till Date] = isnull(tInvoice.Deffered_Value, 0),
                        [Total Other Dept Value Till Date] = isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoiceADP.Amount, 0), 
                        [Total No Of Invoice Previous Month] = isnull(tInvoice.Total_Invoice_Previous, 0), 
						[Total Invoice Value Previous Month] = isnull(tInvoice.Total_Invoice_Value_Previous, 0),

						[EMB Previous Month] = tFinancialBreakupPrevious.Total_Amount_N, 
						[Other Dept Previous Month] = tFinancialBreakupPrevious.Total_Value_ADP, 
						[Deduction Release Previous Month] = tFinancialBreakupPrevious.Total_Value_DR, 
						[Moblization Adv Previous Month] = tFinancialBreakupPrevious.Total_Value_MA,

                        [Total Achivment In Previous Month] = isnull(tFinancialBreakupPrevious.Total_Amount_N, 0) + isnull(tFinancialBreakupPrevious.Total_Value_ADP, 0) + isnull(tInvoice.Total_Invoice_Value_Previous, 0),

                        [Total No Of Invoice Current Month] = isnull(tInvoice.Total_Invoice_Current, 0), 
						[Total Invoice Value Current Month] = isnull(tInvoice.Total_Invoice_Value_Current, 0),

						[EMB Current Month] = tFinancialBreakup.Total_Amount_N, 
						[Other Dept Current Month] = tFinancialBreakup.Total_Value_ADP, 
						[Deduction Release Current Month] = tFinancialBreakup.Total_Value_DR, 
						[Moblization Adv Current Month] = tFinancialBreakup.Total_Value_MA,

                        [Total Achivment In Current Month] = isnull(tFinancialBreakup.Total_Amount_N, 0) + isnull(tFinancialBreakup.Total_Value_ADP, 0) + isnull(tInvoice.Total_Invoice_Value_Current, 0),
                        
                        FPCond

                        [Physical Progress (%)] = isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0), 
                        
                        Target_Date_Agreement = case when ISDATE(ProjectWorkPkg_Due_Date) = 1 then convert(date, ProjectWorkPkg_Due_Date, 103) else null end,
                        Target_Date_Agreement_Extended = case when ISDATE(ProjectWorkPkg_End_Date_Extended) = 1 then convert(date, ProjectWorkPkg_End_Date_Extended, 103) else null end, 
                        [Target Month] = case when ISDATE(tTarget.Target_Month_Year1) = 1 then convert(date, tTarget.Target_Month_Year1, 103) else null end, 
                        
                        [Stagnant Physical Progress] = case when isnull(tStPhysical.Days_Since_Update, 0) = 0 then '-' else 'Yes, ' + convert(varchar, tStPhysical.Days_Since_Update) + ' Days' end,
						[Stagnant Financial Progress] = case when isnull(tStFinancial.Days_Diff, 0) = 0 then '-' else 'Yes, ' + convert(varchar, tStFinancial.Days_Diff) + ' Days' end,

						[Total Available Limit] = isnull(tSNAStatement.SNAAccountAvailableLimit, 0), 	
						[Total In Pipeline] = isnull(tSNAStatement.SNAAccountPipelineLimit, 0),
						
						[Extension Required] = case when ISDATE(tExtenReq.Due_Date) = 1 then convert(date, tExtenReq.Due_Date, 103) else null end,
						[Extension Over] = case when ISDATE(tExtenOver.Due_Date) = 1 then convert(date, tExtenOver.Due_Date, 103) else null end
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectWork_ProjectType_Id
					left join tbl_Program on Program_Id = ProjectWork_Is_Phase_1
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkFundingPattern_ProjectWorkId, 
							Central_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 1 then ProjectWorkFundingPattern_Value else 0 end), 
							State_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 2 then ProjectWorkFundingPattern_Value else 0 end), 
							ULB_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 3 then ProjectWorkFundingPattern_Value else 0 end) 
						from tbl_ProjectWorkFundingPattern 
						where ProjectWorkFundingPattern_Status = 1 
						group by ProjectWorkFundingPattern_ProjectWorkId
					) Funding on Funding.ProjectWorkFundingPattern_ProjectWorkId = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
							GO_CentralShare_1 = max(case when rrGO = 1 then GO_CentralShare else null end),
							GO_StateShare_1 = max(case when rrGO = 1 then GO_StateShare else null end),
							GO_No_Date_1 = max(case when rrGO = 1 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_1 = max(case when rrGO = 1 then ProjectWorkGO_Centage else null end),
							GO_CentralShare_2 = max(case when rrGO = 2 then GO_CentralShare else null end),
							GO_StateShare_2 = max(case when rrGO = 2 then GO_StateShare else null end),
							GO_No_Date_2 = max(case when rrGO = 2 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_2 = max(case when rrGO = 2 then ProjectWorkGO_Centage else null end),
							GO_CentralShare_3 = max(case when rrGO = 3 then GO_CentralShare else null end),
							GO_StateShare_3 = max(case when rrGO = 3 then GO_StateShare else null end),
							GO_No_Date_3 = max(case when rrGO = 3 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_3 = max(case when rrGO = 3 then ProjectWorkGO_Centage else null end), 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage)
						from 
						(
							select 
								ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
								ProjectWorkGO_Work_Id, 
								GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
								GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
								ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
								ProjectWorkGO_GO_Number,
								ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000) 
							from tbl_ProjectWorkGO 
							where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
						) tGO_Release 
						group by ProjectWorkGO_Work_Id
					) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
                            GO_ULBShare = sum(GO_ULBShare),
							GO_ULBShare_1 = max(case when rrGO = 1 then GO_ULBShare else null end),
							GO_ULB_No_Date_1 = max(case when rrGO = 1 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_2 = max(case when rrGO = 2 then GO_ULBShare else null end),
							GO_ULB_No_Date_2 = max(case when rrGO = 2 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_3 = max(case when rrGO = 3 then GO_ULBShare else null end), 
							GO_ULB_No_Date_3 = max(case when rrGO = 3 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end), 
							GO_ULBShare_4 = max(case when rrGO = 4 then GO_ULBShare else null end),
							GO_ULB_No_Date_4 = max(case when rrGO = 4 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_5 = max(case when rrGO = 5 then GO_ULBShare else null end),
							GO_ULB_No_Date_5 = max(case when rrGO = 5 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_6 = max(case when rrGO = 6 then GO_ULBShare else null end), 
							GO_ULB_No_Date_6 = max(case when rrGO = 6 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end)
						from 
						(
							select 
								ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
								ProjectWorkGO_Work_Id, 
								GO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
								ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
								ProjectWorkGO_GO_Number
							from tbl_ProjectWorkGO 
							where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'U'
						) tGO_Release 
						group by ProjectWorkGO_Work_Id
					) tGO_ReleaseULB on tGO_ReleaseULB.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = (sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end)) / 100000, 

                            Total_Invoice_Current = sum(case when (MONTH(PackageInvoice_Date) = month(getdate()) and year(PackageInvoice_Date) = year(getdate())) then 1 else 0 end), 
							Total_Invoice_Value_Current = (sum(case when (MONTH(PackageInvoice_Date) = month(getdate()) and year(PackageInvoice_Date) = year(getdate())) then isnull(InvoiceAmount, 0) else 0 end)) / 100000, 

                            Total_Invoice_Previous = sum(case when (MONTH(PackageInvoice_Date) = month(dateadd(MM, -1, getdate())) and year(PackageInvoice_Date) = year(dateadd(MM, -1, getdate()))) then 1 else 0 end), 
							Total_Invoice_Value_Previous = (sum(case when (MONTH(PackageInvoice_Date) = month(dateadd(MM, -1, getdate())) and year(PackageInvoice_Date) = year(dateadd(MM, -1, getdate()))) then isnull(InvoiceAmount, 0) else 0 end)) / 100000, 

							Deffered_Value_Current = sum(case when (MONTH(PackageInvoice_Date) = month(getdate()) and year(PackageInvoice_Date) = year(getdate()) and isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end), 

                            Deffered_Value_Previous = sum(case when (MONTH(PackageInvoice_Date) = month(dateadd(MM, -1, getdate())) and year(PackageInvoice_Date) = year(dateadd(MM, -1, getdate())) and isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end)
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  TillDateConditionInvoice
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType = 'C' and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1)
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' 
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWork_Id,
							Total_Amount_N = sum(isnull(Total_Amount_N,0) / 100000), 
							Total_Invoice= sum(isnull(tInvoice.Total_Invoice,0) / 100000), 
							Total_Value= sum(isnull(tInvoice.Total_Value,0) / 100000), 
							Total_Invoice_ADP= sum(isnull(tADP.Total_Invoice_ADP,0) / 100000), 
							Total_Value_ADP= sum(isnull(tADP.Total_Value_ADP,0) / 100000), 
							Total_Invoice_DR= sum(isnull(tDR.Total_Invoice_DR,0) / 100000), 
							Total_Value_DR= sum(isnull(tDR.Total_Value_DR,0) / 100000), 
							Total_Invoice_MA= sum(isnull(tMA.Total_Invoice_MA,0) / 100000), 
							Total_Value_MA= sum(isnull(tMA.Total_Value_MA,0) / 100000)
						from tbl_ProjectWork
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_EMB = count(PackageEMB_Master_Id), 
								Total_EMB_N = sum(case when isnull(tbl_PackageInvoiceEMBMasterLink.PackageInvoiceEMBMasterLink_EMBMaster_Id, 0) = 0 then 1 else 0 end),
								Total_Amount = sum(isnull((case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end), 0)), 
								Total_Amount_N = sum(case when isnull(tbl_PackageInvoiceEMBMasterLink.PackageInvoiceEMBMasterLink_EMBMaster_Id, 0) = 0 then isnull((case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end), 0) else 0 end)
							from tbl_PackageEMB_Master
							left join
							(
								select 
									PackageEMB_PackageEMB_Master_Id, 
									Total_Items = COUNT(*), 
									Total_Approved = SUM(case when ISNULL(tbl_PackageEMB_Approval.PackageEMB_Approval_Id, 0) > 0 then 1 else 0 end), 
									Total_Amount = SUM(isnull(PackageEMB_TotalAmount, 0))
								from tbl_PackageEMB
								left join 
								(
									select 
										ROW_NUMBER() over (partition by PackageEMB_Approval_PackageEMB_Id order by PackageEMB_Approval_Id desc) rrr, 
										PackageEMB_Approval_Id, 
										PackageEMB_Approval_PackageEMB_Id, 
										PackageEMB_Approval_Date = convert(char(10), PackageEMB_Approval_Date, 103), 
										PackageEMB_Approval_No, 
										PackageEMB_Approval_Comments, 
										PackageEMB_Approval_Approved_Qty
									from tbl_PackageEMB_Approval 
									where PackageEMB_Approval_Status = 1
								) tbl_PackageEMB_Approval on PackageEMB_Approval_PackageEMB_Id = PackageEMB_Id and rrr = 1
								where PackageEMB_Status = 1
								GROUP by PackageEMB_PackageEMB_Master_Id
							) tbl_PackageEMB on PackageEMB_PackageEMB_Master_Id = PackageEMB_Master_Id
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageEMB_Master_Package_Id 
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageEMBApproval_PackageEMBMaster_Id order by PackageEMBApproval_Id desc) rrrrr,
									PackageEMBApproval_Next_Designation_Id,
									PackageEMBApproval_Next_Organisation_Id,
									PackageEMBApproval_Comments,
									PackageEMBApproval_AddedBy,
									PackageEMBApproval_AddedOn,
									PackageEMBApproval_Status_Id,
									PackageEMBApproval_Package_Id,
									PackageEMBApproval_PackageEMBMaster_Id,
									InvoiceStatus_Name,
									PackageEMBApproval_Date = convert(char(10), PackageEMBApproval_Date, 103),
									PackageEMBApproval_Id
								from tbl_PackageEMBApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageEMBApproval_Status_Id
								where PackageEMBApproval_Status = 1
							) tEMBApproval on tEMBApproval.PackageEMBApproval_PackageEMBMaster_Id = PackageEMB_Master_Id and tEMBApproval.rrrrr = 1
							left join (select distinct PackageInvoiceEMBMasterLink_EMBMaster_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status = 1) tbl_PackageInvoiceEMBMasterLink on PackageInvoiceEMBMasterLink_EMBMaster_Id = PackageEMB_Master_Id
							where PackageEMB_Master_Status = 1 and ProjectWorkPkg_Status = 1 and month(PackageEMB_Master_Date) = month(getdate()) and year(PackageEMB_Master_Date) = year(getdate())  
							group by ProjectWorkPkg_Work_Id
						) tEMB on tEMB.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice = count(*), 
								Total_Value = sum(isnull(InvoiceAmount, 0))
							from tbl_PackageInvoice 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id 
							join 
							(
								select 
									PackageInvoiceItem_Invoice_Id,
									Total_Line_Items = count(*),
									PackageInvoiceItem_Total_Qty = sum(isnull(PackageInvoiceItem_Total_Qty_BOQ, 0)), 
									Total_Amount = sum(isnull(Total_Amount, 0))
								from tbl_PackageInvoiceItem
								where PackageInvoiceItem_Status = 1
								group by PackageInvoiceItem_Invoice_Id
							) tPackageInvoiceItem on PackageInvoiceItem_Invoice_Id = PackageInvoice_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
									PackageInvoiceApproval_Next_Designation_Id,
									PackageInvoiceApproval_Next_Organisation_Id,
									PackageInvoiceApproval_Comments,
									PackageInvoiceApproval_AddedBy,
									PackageInvoiceApproval_AddedOn,
									PackageInvoiceApproval_Status_Id,
									PackageInvoiceApproval_Package_Id,
									PackageInvoiceApproval_PackageInvoice_Id,
									InvoiceStatus_Name,
									PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
									PackageInvoiceApproval_Id
								from tbl_PackageInvoiceApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
								where PackageInvoiceApproval_Status = 1
							) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
							where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1 and month(PackageInvoice_Date) = month(getdate()) and year(PackageInvoice_Date) = year(getdate())
							group by ProjectWorkPkg_Work_Id
						) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_ADP = count(*), 
								Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0))
							from tbl_Package_ADP 
                            join
                            (
                                select
                                    Package_ADP_Item_Package_ADP_Id,
		                            Total_Line_Items = count(*),
		                            Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                                from tbl_Package_ADP_Item
                                where Package_ADP_Item_Status = 1
                                group by Package_ADP_Item_Package_ADP_Id
                            ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
									PackageADPApproval_Next_Designation_Id,
									PackageADPApproval_Next_Organisation_Id,
									PackageADPApproval_Comments,
									PackageADPApproval_AddedBy,
									PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
									PackageADPApproval_Status_Id,
									PackageADPApproval_Package_Id,
									PackageADPApproval_Package_ADP_Id,
									InvoiceStatus_Name,
									PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
									PackageADPApproval_Id
								from tbl_PackageADPApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
								where PackageADPApproval_Status = 1
							) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
							where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_ADP_Date) = month(getdate()) and year(Package_ADP_Date) = year(getdate()) 
							group by ProjectWorkPkg_Work_Id
						) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 

						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_DR = count(*), 
								Total_Value_DR = sum(isnull(Package_DeductionRelease_TotalReleaseAmount, 0))
							from tbl_Package_DeductionRelease 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_DeductionRelease_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by Package_DeductionReleaseApproval_Package_DeductionRelease_Id order by Package_DeductionReleaseApproval_Id desc) rrrrr,
									Package_DeductionReleaseApproval_Next_Designation_Id,
									Package_DeductionReleaseApproval_Next_Organisation_Id,
									Package_DeductionReleaseApproval_Comments,
									Package_DeductionReleaseApproval_AddedBy,
									Package_DeductionReleaseApproval_AddedOn = convert(char(10), Package_DeductionReleaseApproval_AddedOn, 103),
									Package_DeductionReleaseApproval_Status_Id,
									Package_DeductionReleaseApproval_Package_Id,
									Package_DeductionReleaseApproval_Package_DeductionRelease_Id,
									InvoiceStatus_Name,
									Package_DeductionReleaseApproval_Date = convert(char(10), Package_DeductionReleaseApproval_AddedOn, 103),
									Package_DeductionReleaseApproval_Id
								from tbl_Package_DeductionReleaseApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = Package_DeductionReleaseApproval_Status_Id
								where Package_DeductionReleaseApproval_Status = 1
							) tDRApproval on tDRApproval.Package_DeductionReleaseApproval_Package_DeductionRelease_Id = Package_DeductionRelease_Id and tDRApproval.rrrrr = 1
							where Package_DeductionRelease_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_DeductionRelease_Date) = month(getdate()) and year(Package_DeductionRelease_Date) = year(getdate())
							group by ProjectWorkPkg_Work_Id
						) tDR on tDR.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_MA = count(*), 
								Total_Value_MA = sum(isnull(Package_MobilizationAdvance_TotalAmount, 0))
							from tbl_Package_MobilizationAdvance 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_MobilizationAdvance_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id order by Package_MobilizationAdvanceApproval_Id desc) rrrrr,
									Package_MobilizationAdvanceApproval_Next_Designation_Id,
									Package_MobilizationAdvanceApproval_Next_Organisation_Id,
									Package_MobilizationAdvanceApproval_Comments,
									Package_MobilizationAdvanceApproval_AddedBy,
									Package_MobilizationAdvanceApproval_AddedOn = convert(char(10), Package_MobilizationAdvanceApproval_AddedOn, 103),
									Package_MobilizationAdvanceApproval_Status_Id,
									Package_MobilizationAdvanceApproval_Package_Id,
									Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id,
									InvoiceStatus_Name,
									Package_MobilizationAdvanceApproval_Date = convert(char(10), Package_MobilizationAdvanceApproval_AddedOn, 103),
									Package_MobilizationAdvanceApproval_Id
								from tbl_Package_MobilizationAdvanceApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = Package_MobilizationAdvanceApproval_Status_Id
								where Package_MobilizationAdvanceApproval_Status = 1
							) tMAApproval on tMAApproval.Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id = Package_MobilizationAdvance_Id and tMAApproval.rrrrr = 1
							where Package_MobilizationAdvance_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_MobilizationAdvance_Date) = month(getdate()) and year(Package_MobilizationAdvance_Date) = year(getdate())
							group by ProjectWorkPkg_Work_Id
						) tMA on tMA.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id	
						where tbl_ProjectWork.ProjectWork_Status = 1 
						group by tbl_ProjectWork.ProjectWork_Id
					) tFinancialBreakup on tFinancialBreakup.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id

					left join
					(
						select 
							ProjectWork_Id,
							Total_Amount_N = sum(isnull(Total_Amount_N,0) / 100000), 
							Total_Invoice= sum(isnull(tInvoice.Total_Invoice,0) / 100000), 
							Total_Value= sum(isnull(tInvoice.Total_Value,0) / 100000), 
							Total_Invoice_ADP= sum(isnull(tADP.Total_Invoice_ADP,0) / 100000), 
							Total_Value_ADP= sum(isnull(tADP.Total_Value_ADP,0) / 100000), 
							Total_Invoice_DR= sum(isnull(tDR.Total_Invoice_DR,0) / 100000), 
							Total_Value_DR= sum(isnull(tDR.Total_Value_DR,0) / 100000), 
							Total_Invoice_MA= sum(isnull(tMA.Total_Invoice_MA,0) / 100000), 
							Total_Value_MA= sum(isnull(tMA.Total_Value_MA,0) / 100000)
						from tbl_ProjectWork
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_EMB = count(PackageEMB_Master_Id), 
								Total_EMB_N = sum(case when isnull(tbl_PackageInvoiceEMBMasterLink.PackageInvoiceEMBMasterLink_EMBMaster_Id, 0) = 0 then 1 else 0 end),
								Total_Amount = sum(isnull((case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end), 0)), 
								Total_Amount_N = sum(case when isnull(tbl_PackageInvoiceEMBMasterLink.PackageInvoiceEMBMasterLink_EMBMaster_Id, 0) = 0 then isnull((case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end), 0) else 0 end)
							from tbl_PackageEMB_Master
							left join
							(
								select 
									PackageEMB_PackageEMB_Master_Id, 
									Total_Items = COUNT(*), 
									Total_Approved = SUM(case when ISNULL(tbl_PackageEMB_Approval.PackageEMB_Approval_Id, 0) > 0 then 1 else 0 end), 
									Total_Amount = SUM(isnull(PackageEMB_TotalAmount, 0))
								from tbl_PackageEMB
								left join 
								(
									select 
										ROW_NUMBER() over (partition by PackageEMB_Approval_PackageEMB_Id order by PackageEMB_Approval_Id desc) rrr, 
										PackageEMB_Approval_Id, 
										PackageEMB_Approval_PackageEMB_Id, 
										PackageEMB_Approval_Date = convert(char(10), PackageEMB_Approval_Date, 103), 
										PackageEMB_Approval_No, 
										PackageEMB_Approval_Comments, 
										PackageEMB_Approval_Approved_Qty
									from tbl_PackageEMB_Approval 
									where PackageEMB_Approval_Status = 1
								) tbl_PackageEMB_Approval on PackageEMB_Approval_PackageEMB_Id = PackageEMB_Id and rrr = 1
								where PackageEMB_Status = 1
								GROUP by PackageEMB_PackageEMB_Master_Id
							) tbl_PackageEMB on PackageEMB_PackageEMB_Master_Id = PackageEMB_Master_Id
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageEMB_Master_Package_Id 
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageEMBApproval_PackageEMBMaster_Id order by PackageEMBApproval_Id desc) rrrrr,
									PackageEMBApproval_Next_Designation_Id,
									PackageEMBApproval_Next_Organisation_Id,
									PackageEMBApproval_Comments,
									PackageEMBApproval_AddedBy,
									PackageEMBApproval_AddedOn,
									PackageEMBApproval_Status_Id,
									PackageEMBApproval_Package_Id,
									PackageEMBApproval_PackageEMBMaster_Id,
									InvoiceStatus_Name,
									PackageEMBApproval_Date = convert(char(10), PackageEMBApproval_Date, 103),
									PackageEMBApproval_Id
								from tbl_PackageEMBApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageEMBApproval_Status_Id
								where PackageEMBApproval_Status = 1
							) tEMBApproval on tEMBApproval.PackageEMBApproval_PackageEMBMaster_Id = PackageEMB_Master_Id and tEMBApproval.rrrrr = 1
							left join (select distinct PackageInvoiceEMBMasterLink_EMBMaster_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status = 1) tbl_PackageInvoiceEMBMasterLink on PackageInvoiceEMBMasterLink_EMBMaster_Id = PackageEMB_Master_Id
							where PackageEMB_Master_Status = 1 and ProjectWorkPkg_Status = 1 and month(PackageEMB_Master_Date) = month(dateadd(MM, -1, getdate())) and year(PackageEMB_Master_Date) = year(dateadd(MM, -1, getdate()))  
							group by ProjectWorkPkg_Work_Id
						) tEMB on tEMB.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice = count(*), 
								Total_Value = sum(isnull(InvoiceAmount, 0))
							from tbl_PackageInvoice 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id 
							join 
							(
								select 
									PackageInvoiceItem_Invoice_Id,
									Total_Line_Items = count(*),
									PackageInvoiceItem_Total_Qty = sum(isnull(PackageInvoiceItem_Total_Qty_BOQ, 0)), 
									Total_Amount = sum(isnull(Total_Amount, 0))
								from tbl_PackageInvoiceItem
								where PackageInvoiceItem_Status = 1
								group by PackageInvoiceItem_Invoice_Id
							) tPackageInvoiceItem on PackageInvoiceItem_Invoice_Id = PackageInvoice_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
									PackageInvoiceApproval_Next_Designation_Id,
									PackageInvoiceApproval_Next_Organisation_Id,
									PackageInvoiceApproval_Comments,
									PackageInvoiceApproval_AddedBy,
									PackageInvoiceApproval_AddedOn,
									PackageInvoiceApproval_Status_Id,
									PackageInvoiceApproval_Package_Id,
									PackageInvoiceApproval_PackageInvoice_Id,
									InvoiceStatus_Name,
									PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
									PackageInvoiceApproval_Id
								from tbl_PackageInvoiceApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
								where PackageInvoiceApproval_Status = 1
							) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
							where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1 and month(PackageInvoice_Date) = month(dateadd(MM, -1, getdate())) and year(PackageInvoice_Date) = year(dateadd(MM, -1, getdate()))
							group by ProjectWorkPkg_Work_Id
						) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_ADP = count(*), 
								Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0))
							from tbl_Package_ADP 
                            join
                            (
                                select
                                    Package_ADP_Item_Package_ADP_Id,
		                            Total_Line_Items = count(*),
		                            Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                                from tbl_Package_ADP_Item
                                where Package_ADP_Item_Status = 1
                                group by Package_ADP_Item_Package_ADP_Id
                            ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
									PackageADPApproval_Next_Designation_Id,
									PackageADPApproval_Next_Organisation_Id,
									PackageADPApproval_Comments,
									PackageADPApproval_AddedBy,
									PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
									PackageADPApproval_Status_Id,
									PackageADPApproval_Package_Id,
									PackageADPApproval_Package_ADP_Id,
									InvoiceStatus_Name,
									PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
									PackageADPApproval_Id
								from tbl_PackageADPApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
								where PackageADPApproval_Status = 1
							) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
							where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_ADP_Date) = month(dateadd(MM, -1, getdate())) and year(Package_ADP_Date) = year(dateadd(MM, -1, getdate())) 
							group by ProjectWorkPkg_Work_Id
						) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 

						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_DR = count(*), 
								Total_Value_DR = sum(isnull(Package_DeductionRelease_TotalReleaseAmount, 0))
							from tbl_Package_DeductionRelease 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_DeductionRelease_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by Package_DeductionReleaseApproval_Package_DeductionRelease_Id order by Package_DeductionReleaseApproval_Id desc) rrrrr,
									Package_DeductionReleaseApproval_Next_Designation_Id,
									Package_DeductionReleaseApproval_Next_Organisation_Id,
									Package_DeductionReleaseApproval_Comments,
									Package_DeductionReleaseApproval_AddedBy,
									Package_DeductionReleaseApproval_AddedOn = convert(char(10), Package_DeductionReleaseApproval_AddedOn, 103),
									Package_DeductionReleaseApproval_Status_Id,
									Package_DeductionReleaseApproval_Package_Id,
									Package_DeductionReleaseApproval_Package_DeductionRelease_Id,
									InvoiceStatus_Name,
									Package_DeductionReleaseApproval_Date = convert(char(10), Package_DeductionReleaseApproval_AddedOn, 103),
									Package_DeductionReleaseApproval_Id
								from tbl_Package_DeductionReleaseApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = Package_DeductionReleaseApproval_Status_Id
								where Package_DeductionReleaseApproval_Status = 1
							) tDRApproval on tDRApproval.Package_DeductionReleaseApproval_Package_DeductionRelease_Id = Package_DeductionRelease_Id and tDRApproval.rrrrr = 1
							where Package_DeductionRelease_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_DeductionRelease_Date) = month(dateadd(MM, -1, getdate())) and year(Package_DeductionRelease_Date) = year(dateadd(MM, -1, getdate()))
							group by ProjectWorkPkg_Work_Id
						) tDR on tDR.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice_MA = count(*), 
								Total_Value_MA = sum(isnull(Package_MobilizationAdvance_TotalAmount, 0))
							from tbl_Package_MobilizationAdvance 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_MobilizationAdvance_Package_Id
							join 
							(
								select 
									ROW_NUMBER() over (partition by Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id order by Package_MobilizationAdvanceApproval_Id desc) rrrrr,
									Package_MobilizationAdvanceApproval_Next_Designation_Id,
									Package_MobilizationAdvanceApproval_Next_Organisation_Id,
									Package_MobilizationAdvanceApproval_Comments,
									Package_MobilizationAdvanceApproval_AddedBy,
									Package_MobilizationAdvanceApproval_AddedOn = convert(char(10), Package_MobilizationAdvanceApproval_AddedOn, 103),
									Package_MobilizationAdvanceApproval_Status_Id,
									Package_MobilizationAdvanceApproval_Package_Id,
									Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id,
									InvoiceStatus_Name,
									Package_MobilizationAdvanceApproval_Date = convert(char(10), Package_MobilizationAdvanceApproval_AddedOn, 103),
									Package_MobilizationAdvanceApproval_Id
								from tbl_Package_MobilizationAdvanceApproval
								left join tbl_InvoiceStatus on InvoiceStatus_Id = Package_MobilizationAdvanceApproval_Status_Id
								where Package_MobilizationAdvanceApproval_Status = 1
							) tMAApproval on tMAApproval.Package_MobilizationAdvanceApproval_Package_MobilizationAdvance_Id = Package_MobilizationAdvance_Id and tMAApproval.rrrrr = 1
							where Package_MobilizationAdvance_Status = 1 and ProjectWorkPkg_Status = 1 and month(Package_MobilizationAdvance_Date) = month(dateadd(MM, -1, getdate())) and year(Package_MobilizationAdvance_Date) = year(dateadd(MM, -1, getdate()))
							group by ProjectWorkPkg_Work_Id
						) tMA on tMA.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id	
						where tbl_ProjectWork.ProjectWork_Status = 1 
						group by tbl_ProjectWork.ProjectWork_Id
					) tFinancialBreakupPrevious on tFinancialBreakupPrevious.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id                    

                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target, 
                            ProjectWorkFinancialTarget_TargetMonth, 
							Target_Month_Year = convert(varchar, ProjectWorkFinancialTarget_Month) + '-' + convert(varchar, ProjectWorkFinancialTarget_Year), 
							Target_Month_Year1 = convert(varchar, [dbo].[DaysInMonth](RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2), convert(varchar, ProjectWorkFinancialTarget_Year))) + '/' + RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2) + '/' + convert(varchar, ProjectWorkFinancialTarget_Year) 
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    
                    left join
					(
						select 
							tbl_ProjectWork.ProjectWork_Id, 
							Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)), 
							ProjectWorkFinancialTarget_AddedOn = convert(char(10), tTarget.ProjectWorkFinancialTarget_AddedOn, 103),  
							Days_Since_Update = DATEDIFF(DD, tTarget.ProjectWorkFinancialTarget_AddedOn, getdate())
						from tbl_ProjectWork
						left join 
						(
							select 
								row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkPhysicalTarget_Target desc, ProjectWorkFinancialTarget_Id desc) rrT,
								* 
							from (
							select 
								row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id, ProjectWorkPhysicalTarget_Target order by ProjectWorkPhysicalTarget_Target, ProjectWorkFinancialTarget_Id) rrV,
								ProjectWorkFinancialTarget_Id,
								ProjectWorkFinancialTarget_ProjectWork_Id, 
								ProjectWorkFinancialTarget_Target, 
								ProjectWorkPhysicalTarget_Target, 
								ProjectWorkFinancialTarget_Month,
								ProjectWorkFinancialTarget_Year,
								ProjectWorkFinancialTarget_AddedOn,
								ProjectWorkFinancialTarget_TargetMonth
							from tbl_ProjectWorkFinancialTarget
							where ProjectWorkFinancialTarget_Status = 1 
							) tData where tData.rrV = 1
						) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and tTarget.rrT = 1
						where ProjectWork_Status = 1 and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 and isnull(ProjectWork_PhysicalCompleted, 0) = 0 and DATEDIFF(DD, tTarget.ProjectWorkFinancialTarget_AddedOn, getdate()) >= 60
					) tStPhysical on tStPhysical.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWork_Id, 
							Last_Invoice_Date = convert(char(10), tInvoice.Last_Invoice_Date, 103), 
							Days_Diff = DATEDIFF(DD, tInvoice.Last_Invoice_Date, getdate())
						from tbl_ProjectWork
						left join 
						(
							select 
								ProjectWorkPkg_Work_Id,
								Total_Invoice = count(*), 
								Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
								Last_Invoice_Date = max(PackageInvoice_Date)
							from tbl_PackageInvoice 
							join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
							where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
							group by ProjectWorkPkg_Work_Id
						) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
						where ProjectWork_Status = 1 and isnull(ProjectWork_FinancialCompletedAll, 0) = 0 and isnull(ProjectWork_FinancialCompletedPartial, 0) = 0 and DATEDIFF(DD, tInvoice.Last_Invoice_Date, getdate()) > 60
					) tStFinancial on tStFinancial.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
	                    tbl_ProjectWork.ProjectWork_Id,
                        SNAAccountAvailableLimit = isnull(ProjectSNA_SNAAccountLimit_AssignedLimit, 0) - isnull(ProjectSNA_SNAAccountLimitUsed_UsedLimit, 0),
                        SNAAccountPipelineLimit = isnull(ProjectSNA_SNAAccountPipelineLimit, 0)
                    from tbl_ProjectWork 
                    left join tbl_SNAAccountMaster on SNAAccountMaster_ProjectWotk_Id = ProjectWork_Id and SNAAccountMaster_Status = 1
                    left join tbl_ProjectSNA on ProjectSNA_ProjectWork_Id = ProjectWork_Id
                    where ProjectWork_Status = 1 
					) tSNAStatement on tSNAStatement.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWork_Id, 
							Agreement_Date = ProjectWorkPkg_Agreement_Date,
							Due_Date = ProjectWorkPkg_Due_Date, 
							Actual_Start_Date = ProjectWorkPkg_Start_Date, 
							Agreement_Extended = ProjectWorkPkg_End_Date_Extended
						from tbl_ProjectWork
						join 
						(
                            select 
	                            ProjectWorkPkg_Work_Id,
	                            tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                            tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                            ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                            ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                            ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                            ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                            from (
                            select 
                                ProjectWorkPkg_Work_Id,
                                tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                            ProjectWorkPkg_Due_Date,
                                ProjectWorkPkg_Start_Date, 
	                            ProjectWorkPkg_Agreement_Date, 
                                ProjectWorkPkg_ExtendDate, 
                                ProjectWorkPkg_Percent, 
	                            ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                            Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                            from tbl_ProjectWorkPkg 
                            left join 
                            (
	                            select 
		                            ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                            Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                            from tbl_Tender_Cost_Pkg_Wise_Automated
                            ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                            where ProjectWorkPkg_Status = 1	
                            ) tData
                            group by ProjectWorkPkg_Work_Id
						) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
						left join 
						(
							select 
								row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
								ProjectWorkFinancialTarget_ProjectWork_Id, 
								ProjectWorkFinancialTarget_Target, 
								ProjectWorkPhysicalTarget_Target, 
								ProjectWorkFinancialTarget_AddedOn,  
								ProjectWorkFinancialTarget_Month, 
								ProjectWorkFinancialTarget_Year,
								DaysDiff = DATEDIFF(DD, ProjectWorkFinancialTarget_AddedOn, getdate())
							from tbl_ProjectWorkFinancialTarget
							where ProjectWorkFinancialTarget_Status = 1   
						) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
						where ProjectWork_Status = 1 and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 
					) tExtenReq on tExtenReq.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id                    
                    left join
					(
						select 
							ProjectWork_Id, 
							Agreement_Date = ProjectWorkPkg_Agreement_Date,
							Due_Date = ProjectWorkPkg_Due_Date, 
							Actual_Start_Date = ProjectWorkPkg_Start_Date, 
							Agreement_Extended = ProjectWorkPkg_End_Date_Extended
						from tbl_ProjectWork
						join 
						(
                            select 
	                            ProjectWorkPkg_Work_Id,
	                            tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                            tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                            ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                            ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                            ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                            ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                            from (
                            select 
                                ProjectWorkPkg_Work_Id,
                                tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                            ProjectWorkPkg_Due_Date,
                                ProjectWorkPkg_Start_Date, 
	                            ProjectWorkPkg_Agreement_Date, 
                                ProjectWorkPkg_ExtendDate, 
                                ProjectWorkPkg_Percent, 
	                            ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                            Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                            from tbl_ProjectWorkPkg 
                            left join 
                            (
	                            select 
		                            ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                            Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                            from tbl_Tender_Cost_Pkg_Wise_Automated
                            ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                            where ProjectWorkPkg_Status = 1	
                            ) tData
                            group by ProjectWorkPkg_Work_Id
						) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
						left join 
						(
							select 
								row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
								ProjectWorkFinancialTarget_ProjectWork_Id, 
								ProjectWorkFinancialTarget_Target, 
								ProjectWorkPhysicalTarget_Target, 
								ProjectWorkFinancialTarget_AddedOn,  
								ProjectWorkFinancialTarget_Month, 
								ProjectWorkFinancialTarget_Year,
								DaysDiff = DATEDIFF(DD, ProjectWorkFinancialTarget_AddedOn, getdate())
							from tbl_ProjectWorkFinancialTarget
							where ProjectWorkFinancialTarget_Status = 1   
						) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
						where ProjectWork_Status = 1 and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 
					) tExtenOver on tExtenOver.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id 
                    where tbl_ProjectWork.ProjectWork_Status = 1 ";
        strQuery = strQuery.Replace("FPCond", FP);
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (Scheme_Id != "")
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_Project_Id in (" + Scheme_Id + ")";
        }
        if (District_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DivisionId = '" + Division_Id + "'";
        }

        if (tillDate != "")
        {
            strQuery = strQuery.Replace("TillDateConditionInvoice", "and convert(date, PackageInvoice_Date, 103) <= convert(date, '" + tillDate + "', 103)");
        }
        else
        {
            strQuery = strQuery.Replace("TillDateConditionInvoice", "");
        }
        strQuery += " order by Project_Name, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Cadre

    public DataSet get_tbl_Cadre(int Cadre_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
                    select
                        Cadre_Id,
                        Cadre_Name,
                        Cadre_Old_Rate,
                        Cadre_New_Rate,
                        Cadre_AddedOn,
                        Cadre_AddedBy,
                        Cadre_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=Cadre_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=Cadre_ModifiedOn
                    from tbl_Cadre left join tbl_PersonDetail on Person_Id=Cadre_AddedBy
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Cadre_ModifiedBy
                    where Cadre_Status=1 Cadre_IdCond order by Cadre_Name ";
        if (Cadre_Id > 0)
        {
            strQuery = strQuery.Replace("Cadre_IdCond", "and Cadre_Id = " + Cadre_Id.ToString());
        }
        else
        {
            strQuery = strQuery.Replace("Cadre_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Cadre(tbl_Cadre obj_tbl_Cadre, int Cadre_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyCadre(obj_tbl_Cadre.Cadre_Name, Cadre_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Cadre_Id == 0)
                {
                    Insert_tbl_Cadre(obj_tbl_Cadre, trans, cn);
                }
                else
                {
                    obj_tbl_Cadre.Cadre_Id = Cadre_Id;
                    Update_tbl_Cadre(obj_tbl_Cadre, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private DataSet CheckDuplicacyCadre(string CadreName, string Cadre_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Cadre  where Cadre_Status = 1 and  Cadre_Name = '" + CadreName + "' ";
        if (Cadre_Id != "0")
        {
            strQuery += " AND Cadre_Id  <> '" + Cadre_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }
    private string Insert_tbl_Cadre(tbl_Cadre obj_tbl_Cadre, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Cadre( [Cadre_AddedBy],[Cadre_AddedOn],[Cadre_Name],[Cadre_Status], [Cadre_Old_Rate], [Cadre_New_Rate]) values('" +
            obj_tbl_Cadre.Cadre_AddedBy + "', getdate(), N'" +
            obj_tbl_Cadre.Cadre_Name + "','" +
            obj_tbl_Cadre.Cadre_Status + "', '" + obj_tbl_Cadre.Cadre_Old_Rate + "', '" + obj_tbl_Cadre.Cadre_New_Rate + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    private void Update_tbl_Cadre(tbl_Cadre obj_tbl_Cadre, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Cadre set  Cadre_Name = N'" + obj_tbl_Cadre.Cadre_Name + "', Cadre_New_Rate = '" + obj_tbl_Cadre.Cadre_New_Rate + "', Cadre_Old_Rate = ''" + obj_tbl_Cadre.Cadre_Old_Rate + ", Cadre_ModifiedOn = getDate(),Cadre_ModifiedBy = '" + obj_tbl_Cadre.Cadre_AddedBy + "' where Cadre_Id = '" + obj_tbl_Cadre.Cadre_Id + "' and Cadre_Status = '" + obj_tbl_Cadre.Cadre_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_Cadre(int Cadre_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Cadre set   Cadre_Status = 0,Cadre_ModifiedBy='" + person_Id + "',Cadre_ModifiedOn=getdate() where Cadre_Id = '" + Cadre_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region SpecialCategory
    public DataSet get_tbl_SpecialCategory()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        SpecialCategory_Id,
                        SpecialCategory_Name,
                        SpecialCategory_AddedOn,
                        SpecialCategory_AddedBy,
                        SpecialCategory_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=SpecialCategory_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=SpecialCategory_ModifiedOn 
                    from tbl_SpecialCategory 
                    left join tbl_PersonDetail on Person_Id=SpecialCategory_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=SpecialCategory_ModifiedBy 
                    where SpecialCategory_Status=1 order by SpecialCategory_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_SpecialCategory(tbl_SpecialCategory obj_tbl_SpecialCategory, int SpecialCategory_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacySpecialCategory(obj_tbl_SpecialCategory.SpecialCategory_Name, SpecialCategory_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (SpecialCategory_Id == 0)
                {
                    Insert_tbl_SpecialCategory(obj_tbl_SpecialCategory, trans, cn);
                }
                else
                {
                    obj_tbl_SpecialCategory.SpecialCategory_Id = SpecialCategory_Id;
                    Update_tbl_SpecialCategory(obj_tbl_SpecialCategory, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacySpecialCategory(string SpecialCategoryName, string SpecialCategory_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_SpecialCategory  where SpecialCategory_Status = 1 and  SpecialCategory_Name = '" + SpecialCategoryName + "' ";
        if (SpecialCategory_Id != "0")
        {
            strQuery += " AND SpecialCategory_Id  <> '" + SpecialCategory_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_SpecialCategory(tbl_SpecialCategory obj_tbl_SpecialCategory, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_SpecialCategory( [SpecialCategory_AddedBy],[SpecialCategory_AddedOn],[SpecialCategory_Name],[SpecialCategory_Status] ) values('"
            + obj_tbl_SpecialCategory.SpecialCategory_AddedBy
            + "', getdate(), N'"
            + obj_tbl_SpecialCategory.SpecialCategory_Name
            + "','" + obj_tbl_SpecialCategory.SpecialCategory_Status
            + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_SpecialCategory(tbl_SpecialCategory obj_tbl_SpecialCategory, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_SpecialCategory set  SpecialCategory_Name = N'" + obj_tbl_SpecialCategory.SpecialCategory_Name + "',SpecialCategory_ModifiedOn = getDate(),SpecialCategory_ModifiedBy = '" + obj_tbl_SpecialCategory.SpecialCategory_AddedBy + "' where SpecialCategory_Id = '" + obj_tbl_SpecialCategory.SpecialCategory_Id + "' and SpecialCategory_Status = '" + obj_tbl_SpecialCategory.SpecialCategory_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_tbl_SpecialCategory(int SpecialCategory_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_SpecialCategory set   SpecialCategory_Status = 0,SpecialCategory_ModifiedBy='" + person_Id + "',SpecialCategory_ModifiedOn=getdate() where SpecialCategory_Id = '" + SpecialCategory_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Employee Type
    public DataSet get_tbl_EmployeeType()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
                    select
                        EmployeeType_Id,
                        EmployeeType_Name,
                        EmployeeType_AddedOn,
                        EmployeeType_AddedBy,
                        EmployeeType_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=EmployeeType_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=EmployeeType_ModifiedOn
                    from tbl_EmployeeType left join tbl_PersonDetail on Person_Id=EmployeeType_AddedBy
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=EmployeeType_ModifiedBy
                    where EmployeeType_Status=1 order by EmployeeType_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_EmployeeType(tbl_EmployeeType obj_tbl_EmployeeType, int EmployeeType_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyEmployeeType(obj_tbl_EmployeeType.EmployeeType_Name, EmployeeType_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (EmployeeType_Id == 0)
                {
                    Insert_tbl_EmployeeType(obj_tbl_EmployeeType, trans, cn);
                }
                else
                {
                    obj_tbl_EmployeeType.EmployeeType_Id = EmployeeType_Id;
                    Update_tbl_EmployeeType(obj_tbl_EmployeeType, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyEmployeeType(string EmployeeTypeName, string EmployeeType_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_EmployeeType  where EmployeeType_Status = 1 and  EmployeeType_Name = '" + EmployeeTypeName + "' ";
        if (EmployeeType_Id != "0")
        {
            strQuery += " AND EmployeeType_Id  <> '" + EmployeeType_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_EmployeeType(tbl_EmployeeType obj_tbl_EmployeeType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_EmployeeType( [EmployeeType_AddedBy],[EmployeeType_AddedOn],[EmployeeType_Name],[EmployeeType_Status] ) values('" +
            obj_tbl_EmployeeType.EmployeeType_AddedBy + "', getdate(), N'" +
            obj_tbl_EmployeeType.EmployeeType_Name + "','" +
            obj_tbl_EmployeeType.EmployeeType_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_EmployeeType(tbl_EmployeeType obj_tbl_EmployeeType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_EmployeeType set  EmployeeType_Name = N'" + obj_tbl_EmployeeType.EmployeeType_Name + "',EmployeeType_ModifiedOn = getDate(),EmployeeType_ModifiedBy = '" + obj_tbl_EmployeeType.EmployeeType_AddedBy + "' where EmployeeType_Id = '" + obj_tbl_EmployeeType.EmployeeType_Id + "' and EmployeeType_Status = '" + obj_tbl_EmployeeType.EmployeeType_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_EmployeeType(int EmployeeType_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_EmployeeType set   EmployeeType_Status = 0,EmployeeType_ModifiedBy='" + person_Id + "',EmployeeType_ModifiedOn=getdate() where EmployeeType_Id = '" + EmployeeType_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region State and District

    public DataSet get_tbl_State()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; select * from tbl_State where State_Status = 1 order by State_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_District(int State_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; select * from tbl_District where District_Status = 1 and District_StateId = '" + State_Id + "' order by District_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Family Details
    public DataSet get_tbl_PersonFamilyDtls(int Person_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    PersonFamilyDtls_Id,
                        PersonFamilyDtls_Person_Id,
                        PersonFamilyDtls_MemberName,
                        PersonFamilyDtls_Age,
                        PersonFamilyDtls_Relation,
                        PersonFamilyDtls_Is_GovtServant,
                        PersonFamilyDtls_DOB=case when convert(char(10), PersonFamilyDtls_DOB, 103) = '01/01/1900' then '' else convert(char(10), PersonFamilyDtls_DOB, 103) end,
                        PersonFamilyDtls_MaritalStatus
                    from tbl_PersonFamilyDtls
                    where PersonFamilyDtls_Person_Id = '" + Person_Id + "' and PersonFamilyDtls_Status = 1 order by PersonFamilyDtls_Id ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    private void Insert_tbl_PersonFamilyDtls(tbl_PersonFamilyDtls obj_tbl_PersonFamilyDtls, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_PersonFamilyDtls ( [PersonFamilyDtls_AddedBy],[PersonFamilyDtls_AddedOn],[PersonFamilyDtls_Age],[PersonFamilyDtls_Is_GovtServant],[PersonFamilyDtls_MemberName],[PersonFamilyDtls_Person_Id],[PersonFamilyDtls_Relation],[PersonFamilyDtls_Status], [PersonFamilyDtls_Occupation],[PersonFamilyDtls_DOB],[PersonFamilyDtls_MaritalStatus]) values ('" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_AddedBy + "', getdate(), '" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Age + "','" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Is_GovtServant + "',N'" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_MemberName + "','" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Person_Id + "',N'" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Relation + "','" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Status + "', '" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_Occupation + "','" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_DOB + "','" + obj_tbl_PersonFamilyDtls.PersonFamilyDtls_MaritalStatus + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_PersonFamilyDtls(int Person_Id, int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_PersonFamilyDtls set [PersonFamilyDtls_Status] = 0, [PersonFamilyDtls_ModifiedBy] = '" + Added_By + "', [PersonFamilyDtls_ModofiedOn] = getdate() where [PersonFamilyDtls_Person_Id] = '" + Person_Id + "' and [PersonFamilyDtls_Status] = 1";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region PayComponent
    public DataSet get_tbl_PayComponent(string Type, int Person_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        PayComponent_Id,
                        PayComponent_Name,
                        PayComponent_Type,
                        PayComponent_FormulaApplicable,
                        PayComponent_ParentComponent_Id,
                        PayComponent_Rate_Rural,
                        PayComponent_Rate_Urban,
                        PayComponent_Rate_SemiUrban, 
                        PayComponent_ParentComponent_Id,
                        SelectColumn
                   from tbl_PayComponent 
                   joinCondition
                   where PayComponent_Status = 1";
        string sqlJoin = "";
        if (Person_Id > 0)
        {
            sqlJoin = @"left join 
	                (
	                select 
	                    ROW_NUMBER() over (partition by HRMSEmployeeSalaryComponent_PayComponent_Id order by HRMSEmployeeSalaryComponent_Id desc) rrr,
						HRMSEmployeeSalaryComponent_Id,
                        HRMSEmployeeSalaryComponent_PayComponent_Id,
                        HRMSEmployeeSalaryComponent_PayComponent_Value,
                        HRMSEmployeeSalaryComponent_HRMSEmployee_Id,
                        HRMSEmployeeSalaryComponent_HRMSEmployeeSalaryInfo_Id,
                        HRMSEmployeeSalaryComponent_AddedOn,
                        HRMSEmployeeSalaryComponent_AddedBy,
                        HRMSEmployeeSalaryComponent_ModifiedOn,
                        HRMSEmployeeSalaryComponent_ModifiedBy,
                        HRMSEmployeeSalaryComponent_Status
						from tbl_HRMSEmployeeSalaryComponent 
                    where HRMSEmployeeSalaryComponent_Status=1 and HRMSEmployeeSalaryComponent_HRMSEmployee_Id = '" + Person_Id + "') as t on t.HRMSEmployeeSalaryComponent_PayComponent_Id = PayComponent_Id and t.rrr = 1";
            strQuery = strQuery.Replace("SelectColumn", "t.HRMSEmployeeSalaryComponent_PayComponent_Value");
        }
        else
        {
            strQuery = strQuery.Replace("SelectColumn", "HRMSEmployeeSalaryComponent_PayComponent_Value = 0");
        }
        strQuery = strQuery.Replace("joinCondition", sqlJoin);
        if (Type != "")
        {
            strQuery += @" and PayComponent_Type = '" + Type + "'";
        }
        strQuery += @" order by PayComponent_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_PayComponent(tbl_PayComponent obj_tbl_PayComponent, int PayComponent_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyCircle(obj_tbl_PayComponent.PayComponent_Name, PayComponent_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (PayComponent_Id == 0)
                {
                    Insert_tbl_PayComponent(obj_tbl_PayComponent, trans, cn);
                }
                else
                {
                    obj_tbl_PayComponent.PayComponent_Id = PayComponent_Id;
                    Update_tbl_PayComponent(obj_tbl_PayComponent, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Update_tbl_PayComponent(tbl_PayComponent obj_tbl_PayComponent, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy ;update tbl_PayComponent set PayComponent_Name=N'" + obj_tbl_PayComponent.PayComponent_Name + "',PayComponent_Type='" +
            obj_tbl_PayComponent.PayComponent_Type + "',PayComponent_Rate_Rural='" +
            obj_tbl_PayComponent.PayComponent_Rate_Rural + "',PayComponent_Rate_Urban='" +
            obj_tbl_PayComponent.PayComponent_Rate_Urban + "',PayComponent_Rate_SemiUrban='" +
            obj_tbl_PayComponent.PayComponent_Rate_SemiUrban + "',PayComponent_ModifiedOn=getdate(),PayComponent_ModifiedBy='" + obj_tbl_PayComponent.PayComponent_AddedBy + "' where PayComponent_Id='" + obj_tbl_PayComponent.PayComponent_Id + "' and PayComponent_Status='" + obj_tbl_PayComponent.PayComponent_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private string Insert_tbl_PayComponent(tbl_PayComponent obj_tbl_PayComponent, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = "set dateformat dmy ; insert into tbl_PayComponent ( [PayComponent_Name],[PayComponent_Type],[PayComponent_FormulaApplicable],[PayComponent_Rate_Rural],[PayComponent_Rate_Urban],[PayComponent_Rate_SemiUrban],[PayComponent_ParentComponent_Id],[PayComponent_AddedOn],[PayComponent_AddedBy],[PayComponent_Status] ) values ('" +
            obj_tbl_PayComponent.PayComponent_Name + "','" +
            obj_tbl_PayComponent.PayComponent_Type + "','" +
            obj_tbl_PayComponent.PayComponent_FomulaApplicable + "','" +
            obj_tbl_PayComponent.PayComponent_Rate_Rural + "','" +
            obj_tbl_PayComponent.PayComponent_Rate_Urban + "','" +
            obj_tbl_PayComponent.PayComponent_Rate_SemiUrban + "','" +
            obj_tbl_PayComponent.PayComponent_ParentComponent_Id + "',getdate(),'" +
            obj_tbl_PayComponent.PayComponent_AddedBy + "','" +
            obj_tbl_PayComponent.PayComponent_Status +
            "'); Select @@Identity";
        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    public bool Delete_PayComponent(int PayComponent_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_PayComponent  set   PayComponent_Status = 0 , PayComponent_ModifiedBy='" +
                person_Id + "',PayComponent_ModifiedOn=getdate() where PayComponent_Id = '" + PayComponent_Id + "'";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region LeaveType
    public bool Insert_tbl_LeaveType(tbl_LeaveType obj_tbl_LeaveType, int LeaveType_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyCircle(obj_tbl_LeaveType.LeaveType_Name, LeaveType_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (LeaveType_Id == 0)
                {
                    Insert_tbl_LeaveType(obj_tbl_LeaveType, trans, cn);
                }
                else
                {
                    obj_tbl_LeaveType.LeaveType_Id = LeaveType_Id;
                    Update_tbl_LeaveType(obj_tbl_LeaveType, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private DataSet CheckDuplicacyLeaveType(string LeaveType_Name, string LeaveType_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_LeaveType  where LeaveType_Status = 1 and LeaveType_Name = '" + LeaveType_Name + "' ";

        if (LeaveType_Id != "0")
        {
            strQuery += " AND LeaveType_Id  <> '" + LeaveType_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }
    public DataSet get_tbl_LeaveType()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        LeaveType_Id,
        LeaveType_Name,
        LeaveType_AddedOn,
        LeaveType_AddedBy,
        LeaveType_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=LeaveType_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=LeaveType_ModifiedOn
        from tbl_LeaveType left join tbl_PersonDetail on Person_Id=LeaveType_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=LeaveType_ModifiedBy
        where LeaveType_Status=1 order by LeaveType_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private string Insert_tbl_LeaveType(tbl_LeaveType obj_tbl_LeaveType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_LeaveType( [LeaveType_AddedBy],[LeaveType_AddedOn],[LeaveType_Name],[LeaveType_Status] ) values('" +
            obj_tbl_LeaveType.LeaveType_AddedBy + "', getdate(), N'" +
            obj_tbl_LeaveType.LeaveType_Name + "','" +
            obj_tbl_LeaveType.LeaveType_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }
    private void Update_tbl_LeaveType(tbl_LeaveType obj_tbl_LeaveType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_LeaveType set  LeaveType_Name = N'" +
            obj_tbl_LeaveType.LeaveType_Name + "',LeaveType_ModifiedOn = getDate(),LeaveType_ModifiedBy = '" +
            obj_tbl_LeaveType.LeaveType_AddedBy + "' where LeaveType_Id = '" +
            obj_tbl_LeaveType.LeaveType_Id + "' and LeaveType_Status = '" +
            obj_tbl_LeaveType.LeaveType_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_LeaveType(int LeaveType_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_LeaveType set   LeaveType_Status = 0,LeaveType_ModifiedBy='" + person_Id + "',LeaveType_ModifiedOn=getdate() where LeaveType_Id = '" + LeaveType_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }



    #endregion

    #region Basic Pension Details 

    public bool Insert_Basic_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, List<tbl_PersonFamilyDtls> obj_tbl_PersonFamilyDtls_Li, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCertificate;
                    obj_tbl_PensionMaster.PensionMaster_ImgCertificate = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    string _PensionMaster_Id = Insert_Basic_Pension_Details(obj_tbl_PensionMaster, trans, cn);
                    PensionMaster_Id = Convert.ToInt32(_PensionMaster_Id);
                }
                else
                {
                    Update_Basic_Pension_Details(obj_tbl_PensionMaster, trans, cn);
                    PensionMaster_Id = obj_tbl_PensionMaster.PensionMaster_Id;
                }
                Update_tbl_PersonFamilyDtls(PensionMaster_Id, obj_tbl_PensionMaster.PensionMaster_AddedBy, trans, cn);
                for (int i = 0; i < obj_tbl_PersonFamilyDtls_Li.Count; i++)
                {
                    obj_tbl_PersonFamilyDtls_Li[i].PersonFamilyDtls_Person_Id = PensionMaster_Id;
                    Insert_tbl_PersonFamilyDtls(obj_tbl_PersonFamilyDtls_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_Basic_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_RetireDivision],[PensionMaster_PensionDivision],[PensionMaster_NameOfPensioner],[PensionMaster_FatherOrHusbandName],[PensionMaster_MobileNo],[PensionMaster_PANNo],[PensionMaster_AdharNo],[PensionMaster_PensionAndFamilyPensioner],[PensionMaster_FamilyPensionerName],[PensionMaster_FamilyPensionerRelation],[PensionMaster_FamilyPensionerDOB],[PensionMaster_FamilyPensionerMobNo],[PensionMaster_FamilyPensionerPANNo],[PensionMaster_FamilyPensionerAdharNo],[PensionMaster_FamilyPensionerOrderNo],[PensionMaster_FamilyPensionerOrderNoDate],[PensionMaster_FamilyPensionerStatus],[PensionMaster_FamilyRelation],[PensionMaster_Designation],[PensionMaster_PayBandId],[PensionMaster_PayScaleId],[PensionMaster_RetirementYear],[PensionMaster_DateOfBirth],[PensionMaster_DateOfJoining],[PensionMaster_DateOfRetirement],[PensionMaster_DateOfDeath],[PensionMaster_DateOfRegularization],[PensionMaster_ImgCompiledOrder],[PensionMaster_ImgPensionOrder],[PensionMaster_FormSendingDate],[PensionMaster_DateOfRecieving],[PensionMaster_AAOPension],[PensionMaster_AccountantName],[PensionMaster_ImgCertificate],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy],[PensionMaster_PermanentAddress],[PensionMaster_PostalAddress],[PensionMaster_Gender],[PensionMaster_ImgPhoto],[PensionMaster_EmployeeCode],[PensionMaster_CRNo],[PensionMaster_NomineeName],[PensionMaster_NomineeAddress],[PensionMaster_GradePay],[PensionMaster_PensionCode]) values('" + obj_tbl_PensionMaster.PensionMaster_RetireDivision + "','" + obj_tbl_PensionMaster.PensionMaster_PensionDivision + "','" + obj_tbl_PensionMaster.PensionMaster_NameOfPensioner + "','" + obj_tbl_PensionMaster.PensionMaster_FatherOrHusbandName + "','" + obj_tbl_PensionMaster.PensionMaster_MobileNo + "','" + obj_tbl_PensionMaster.PensionMaster_PANNo + "','" + obj_tbl_PensionMaster.PensionMaster_AdharNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionAndFamilyPensioner + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerName + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerRelation + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerDOB + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerMobNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerPANNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerAdharNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNoDate + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerStatus + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyRelation + "','" + obj_tbl_PensionMaster.PensionMaster_Designation + "','" + obj_tbl_PensionMaster.PensionMaster_PayBandId + "','" + obj_tbl_PensionMaster.PensionMaster_PayScaleId + "','" + obj_tbl_PensionMaster.PensionMaster_RetirementYear + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfBirth + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfJoining + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRetirement + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfDeath + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRegularization + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder + "','" + obj_tbl_PensionMaster.PensionMaster_FormSendingDate + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRecieving + "','" + obj_tbl_PensionMaster.PensionMaster_AAOPension + "','" + obj_tbl_PensionMaster.PensionMaster_AccountantName + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCertificate + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "','" + obj_tbl_PensionMaster.PensionMaster_PermanentAddress + "','" + obj_tbl_PensionMaster.PensionMaster_PostalAddress + "','" + obj_tbl_PensionMaster.PensionMaster_Gender + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPhoto + "','" + obj_tbl_PensionMaster.PensionMaster_EmployeeCode + "','" + obj_tbl_PensionMaster.PensionMaster_CRNo + "','" + obj_tbl_PensionMaster.PensionMaster_NomineeName + "','" + obj_tbl_PensionMaster.PensionMaster_NomineeAddress + "','" + obj_tbl_PensionMaster.PensionMaster_GradePay + "','" + obj_tbl_PensionMaster.PensionMaster_PensionCode + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_Basic_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_PensionDivision='" + obj_tbl_PensionMaster.PensionMaster_PensionDivision + "',  PensionMaster_DateOfRetirement='" + obj_tbl_PensionMaster.PensionMaster_DateOfRetirement + "',PensionMaster_FamilyRelation='" + obj_tbl_PensionMaster.PensionMaster_FamilyRelation + "',PensionMaster_Designation='" + obj_tbl_PensionMaster.PensionMaster_Designation + "',PensionMaster_DateOfJoining='" + obj_tbl_PensionMaster.PensionMaster_DateOfJoining + "',PensionMaster_AAOPension='" + obj_tbl_PensionMaster.PensionMaster_AAOPension + "',PensionMaster_NameOfPensioner='" + obj_tbl_PensionMaster.PensionMaster_NameOfPensioner + "',PensionMaster_FatherOrHusbandName='" + obj_tbl_PensionMaster.PensionMaster_FatherOrHusbandName + "',PensionMaster_FamilyPensionerDOB='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerDOB + "',PensionMaster_FamilyPensionerMobNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerMobNo + "',PensionMaster_MobileNo='" + obj_tbl_PensionMaster.PensionMaster_MobileNo + "',PensionMaster_PANNo='" + obj_tbl_PensionMaster.PensionMaster_PANNo + "',PensionMaster_AdharNo='" + obj_tbl_PensionMaster.PensionMaster_AdharNo + "',PensionMaster_FamilyPensionerName='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerName + "',PensionMaster_FamilyPensionerRelation='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerRelation + "',PensionMaster_FamilyPensionerPANNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerPANNo + "',PensionMaster_FamilyPensionerOrderNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNo + "',PensionMaster_FamilyPensionerAdharNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerAdharNo + "',PensionMaster_FamilyPensionerOrderNoDate='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNoDate + "', PensionMaster_FamilyPensionerStatus='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerStatus + "', PensionMaster_PensionAndFamilyPensioner='" + obj_tbl_PensionMaster.PensionMaster_PensionAndFamilyPensioner + "',PensionMaster_ImgCertificate='" + obj_tbl_PensionMaster.PensionMaster_ImgCertificate + "',PensionMaster_ImgCompiledOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder + "',PensionMaster_AccountantName='" + obj_tbl_PensionMaster.PensionMaster_AccountantName + "',PensionMaster_ImgPensionOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder + "',PensionMaster_PermanentAddress='" + obj_tbl_PensionMaster.PensionMaster_PermanentAddress + "',PensionMaster_PostalAddress='" + obj_tbl_PensionMaster.PensionMaster_PostalAddress + "',PensionMaster_Gender='" + obj_tbl_PensionMaster.PensionMaster_Gender + "',PensionMaster_ImgPhoto='" + obj_tbl_PensionMaster.PensionMaster_ImgPhoto + "',PensionMaster_EmployeeCode='" + obj_tbl_PensionMaster.PensionMaster_EmployeeCode + "',PensionMaster_CRNo='" + obj_tbl_PensionMaster.PensionMaster_CRNo + "',PensionMaster_PayBandId='" + obj_tbl_PensionMaster.PensionMaster_PayBandId + "',PensionMaster_PayScaleId='" + obj_tbl_PensionMaster.PensionMaster_PayScaleId + "',PensionMaster_GradePay='" + obj_tbl_PensionMaster.PensionMaster_GradePay + "',PensionMaster_PensionCode='" + obj_tbl_PensionMaster.PensionMaster_PensionCode + "',PensionMaster_NomineeName='" + obj_tbl_PensionMaster.PensionMaster_NomineeName + "',PensionMaster_NomineeAddress='" + obj_tbl_PensionMaster.PensionMaster_NomineeAddress + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "' and PensionMaster_Status ='" + obj_tbl_PensionMaster.PensionMaster_Status + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region MasterEmlpyee
    public bool Insert_tbl_MasterEmployee(tbl_MasterEmployee obj_tbl_MasterEmployee, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (obj_tbl_MasterEmployee.MasterEmployee_Id == 0)
                {
                    Insert_tbl_MasterEmployee(obj_tbl_MasterEmployee, trans, cn);
                }
                else
                {
                    //Update_tbl_MasterEmployee(obj_tbl_MasterEmployee, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private string Insert_tbl_MasterEmployee(tbl_MasterEmployee obj_tbl_MasterEmployee, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_MasterEmployee([MasterEmployee_Name],[MasterEmployee_Father_Name],[MasterEmployee_Mobile_Number],[MasterEmployee_Landline_Number],[MasterEmployee_Email_Id],[MasterEmployee_Address],[MasterEmployee_Organization],[MasterEmployee_Employee_Code],[MasterEmployee_Deparement],[MasterEmployee_Designation],[MasterEmployee_Level],[MasterEmployee_Reporting_Manager],[MasterEmployee_User_Type],[MasterEmployee_high_School],[MasterEmployee_Intermediate],[MasterEmployee_Graduation],[MasterEmployee_Post_Graduation],[MasterEmployee_Other],[MasterEmployee_AddedBy],[MasterEmployee_AddedOn],[MasterEmployee_Status]) values('" + obj_tbl_MasterEmployee.MasterEmployee_Name + "','" + obj_tbl_MasterEmployee.MasterEmployee_Father_Name + "','" + obj_tbl_MasterEmployee.MasterEmployee_Mobile_Number + "','" + obj_tbl_MasterEmployee.MasterEmployee_Email_Id + "','" + obj_tbl_MasterEmployee.MasterEmployee_Address + "','" + obj_tbl_MasterEmployee.MasterEmployee_Organization + "','" + obj_tbl_MasterEmployee.MasterEmployee_Employee_Code + "','" + obj_tbl_MasterEmployee.MasterEmployee_Deparement + "','" + obj_tbl_MasterEmployee.MasterEmployee_Designation + "','" + obj_tbl_MasterEmployee.MasterEmployee_Level + "','" + obj_tbl_MasterEmployee.MasterEmployee_Reporting_Manager + "','" + obj_tbl_MasterEmployee.MasterEmployee_User_Type + "','" + obj_tbl_MasterEmployee.MasterEmployee_high_School + "','" + obj_tbl_MasterEmployee.MasterEmployee_Intermediate + "','" + obj_tbl_MasterEmployee.MasterEmployee_Graduation + "','" + obj_tbl_MasterEmployee.MasterEmployee_Post_Graduation + "','" + obj_tbl_MasterEmployee.MasterEmployee_Other + "','" + obj_tbl_MasterEmployee.MasterEmployee_AddedBy + "',getdate(),'" + obj_tbl_MasterEmployee.MasterEmployee_Status + "');Select @@Identity";
        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    #endregion

    #region Gratuity Details
    public bool Insert_Gratuity_Details(tbl_PensionMaster obj_tbl_PensionMaster, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgGPO;
                    obj_tbl_PensionMaster.PensionMaster_ImgGPO = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgHQOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeduction;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeduction = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    Insert_Gratuity_Details(obj_tbl_PensionMaster, trans, cn);
                }
                else
                {
                    Update_Gratuity_Details(obj_tbl_PensionMaster, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_Gratuity_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_Gratuity],[PensionMaster_GPOAmount],[PensionMaster_GratuityNumber],[PensionMaster_GratuityDate],[PensionMaster_ImgGPO],[PensionMaster_GPaymentOrderDate],[PensionMaster_GPaymentOrderNumber],[PensionMaster_ImgHQOrder],[PensionMaster_GratuityReason],[PensionMaster_DeductionAmount],[PensionMaster_DeductionReason],[PensionMaster_ImgDeduction],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy]) values('" + obj_tbl_PensionMaster.PensionMaster_Gratuity + "','" + obj_tbl_PensionMaster.PensionMaster_GPOAmount + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityNumber + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityDate + "','" + obj_tbl_PensionMaster.PensionMaster_ImgGPO + "','" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderDate + "','" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderNumber + "','" + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityReason + "','" + obj_tbl_PensionMaster.PensionMaster_DeductionAmount + "','" + obj_tbl_PensionMaster.PensionMaster_DeductionReason + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeduction + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_Gratuity_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_GPOAmount='" + obj_tbl_PensionMaster.PensionMaster_GPOAmount + "',PensionMaster_GratuityNumber='" + obj_tbl_PensionMaster.PensionMaster_GratuityNumber + "',PensionMaster_GratuityDate='" + obj_tbl_PensionMaster.PensionMaster_GratuityDate + "',PensionMaster_GPaymentOrderNumber='" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderNumber + "',PensionMaster_GratuityReason='" + obj_tbl_PensionMaster.PensionMaster_GratuityReason + "',PensionMaster_DeductionAmount='" + obj_tbl_PensionMaster.PensionMaster_DeductionAmount + "',PensionMaster_DeductionReason='" + obj_tbl_PensionMaster.PensionMaster_DeductionReason + "',PensionMaster_Gratuity='" + obj_tbl_PensionMaster.PensionMaster_Gratuity + "',PensionMaster_GPaymentOrderDate='" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderDate + "',PensionMaster_ImgGPO='" + obj_tbl_PensionMaster.PensionMaster_ImgGPO + "',PensionMaster_ImgHQOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder + "',PensionMaster_ImgDeduction='" + obj_tbl_PensionMaster.PensionMaster_ImgDeduction + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Pension Details
    public bool Insert_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgPPO;
                    obj_tbl_PensionMaster.PensionMaster_ImgPPO = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    Insert_Pension_Details(obj_tbl_PensionMaster, trans, cn);
                }
                else
                {
                    Update_Pension_Details(obj_tbl_PensionMaster, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_Pension],[PensionMaster_BasicPensionAmount],[PensionMaster_FamilyPension],[PensionMaster_PPO_Number],[PensionMaster_PPODate],[PensionMaster_Reason],[PensionMaster_AnyComments],[PensionMaster_ImgPPO],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy]) values('" + obj_tbl_PensionMaster.PensionMaster_Pension + "','" + obj_tbl_PensionMaster.PensionMaster_BasicPensionAmount + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPension + "','" + obj_tbl_PensionMaster.PensionMaster_PPO_Number + "','" + obj_tbl_PensionMaster.PensionMaster_PPODate + "','" + obj_tbl_PensionMaster.PensionMaster_Reason + "','" + obj_tbl_PensionMaster.PensionMaster_AnyComments + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPPO + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_Pension_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_BasicPensionAmount='" + obj_tbl_PensionMaster.PensionMaster_BasicPensionAmount + "',PensionMaster_FamilyPension='" + obj_tbl_PensionMaster.PensionMaster_FamilyPension + "',PensionMaster_PPO_Number='" + obj_tbl_PensionMaster.PensionMaster_PPO_Number + "',PensionMaster_PPODate='" + obj_tbl_PensionMaster.PensionMaster_PPODate + "',PensionMaster_AnyComments='" + obj_tbl_PensionMaster.PensionMaster_AnyComments + "',PensionMaster_Pension='" + obj_tbl_PensionMaster.PensionMaster_Pension + "',PensionMaster_ImgPPO='" + obj_tbl_PensionMaster.PensionMaster_ImgPPO + "',PensionMaster_Reason='" + obj_tbl_PensionMaster.PensionMaster_Reason + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Pension Master Arrear

    public DataSet get_tbl_PensionMasterArrear(int PensionMasterId)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        PensionMasterArrear_Id,
                        PensionMasterArrear_PensionMasterId,
                        PensionMasterArrear_NatureArreare_Id,
                        PensionMasterArrear_ArrearAmount,
                        PensionMasterArrear_OrderDate=convert(char(10),PensionMasterArrear_OrderDate,103),
                        PensionMasterArrear_OrderNo,
                        PensionMasterArrear_OrderPath,
                        PensionMasterArrear_Status
                    from tbl_PensionMasterArrear 
                    where PensionMasterArrear_PensionMasterId = '" + PensionMasterId + "' and PensionMasterArrear_Status = 1 order by PensionMasterArrear_Id";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private void Insert_tbl_PensionMasterArrear(tbl_PensionMasterArrear obj_tbl_PensionMasterArrear, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_PensionMasterArrear ( [PensionMasterArrear_AddedBy],[PensionMasterArrear_AddedOn],[PensionMasterArrear_ArrearAmount],[PensionMasterArrear_NatureArreare_Id],[PensionMasterArrear_OrderDate],[PensionMasterArrear_OrderNo],[PensionMasterArrear_OrderPath],[PensionMasterArrear_PensionMasterId],[PensionMasterArrear_Status] ) values ('" + obj_tbl_PensionMasterArrear.PensionMasterArrear_AddedBy + "', getdate(),'" + obj_tbl_PensionMasterArrear.PensionMasterArrear_ArrearAmount + "','" + obj_tbl_PensionMasterArrear.PensionMasterArrear_NatureArreare_Id + "','" + obj_tbl_PensionMasterArrear.PensionMasterArrear_OrderDate + "',N'" + obj_tbl_PensionMasterArrear.PensionMasterArrear_OrderNo + "',N'" + obj_tbl_PensionMasterArrear.PensionMasterArrear_OrderPath + "','" + obj_tbl_PensionMasterArrear.PensionMasterArrear_PensionMasterId + "','" + obj_tbl_PensionMasterArrear.PensionMasterArrear_Status + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_PensionMasterArrear(int AddedBy, int PensionMaster_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_PensionMasterArrear set [PensionMasterArrear_Status] = 0, [PensionMasterArrear_ModifiedBy] = '" + AddedBy + "',[PensionMasterArrear_ModifiedOn] = getdate() where [PensionMasterArrear_Status] = 1 and PensionMasterArrear_PensionMasterId = '" + PensionMaster_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region LE Details
    public bool Insert_LE_Details(tbl_PensionMaster obj_tbl_PensionMaster, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment;
                    obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    Insert_LE_Details(obj_tbl_PensionMaster, trans, cn);
                }
                else
                {
                    Update_LE_Details(obj_tbl_PensionMaster, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_LE_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_LeaveEncashment],[PensionMaster_LeaveEncashmentAmnt],[PensionMaster_LeaveEncashmentNumber],[PensionMaster_EncashmentOrderNumber],[PensionMaster_LeaveEncashmentDate],[PensionMaster_EncashmentOrderDate],[PensionMaster_EncashmentDeductionAmnt],[PensionMaster_EncashmentDeductionReason],[PensionMaster_EncashmentReason],[PensionMaster_ImgLeaveEncashment],[PensionMaster_ImgEncashmentOrder],[PensionMaster_ImgDeductionOrpublic],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy]) values('" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashment + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentNumber + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderNumber + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentDate + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderDate + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionReason + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentReason + "','" + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment + "','" + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_LE_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_LeaveEncashment='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashment + "',PensionMaster_LeaveEncashmentAmnt='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentAmnt + "',PensionMaster_LeaveEncashmentNumber='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentNumber + "',PensionMaster_EncashmentOrderNumber='" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderNumber + "',PensionMaster_LeaveEncashmentDate='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentDate + "',PensionMaster_EncashmentOrderDate='" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderDate + "',PensionMaster_EncashmentDeductionAmnt='" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionAmnt + "',PensionMaster_EncashmentDeductionReason='" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionReason + "',PensionMaster_EncashmentReason='" + obj_tbl_PensionMaster.PensionMaster_EncashmentReason + "',PensionMaster_ImgLeaveEncashment='" + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment + "',PensionMaster_ImgEncashmentOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder + "',PensionMaster_ImgDeductionOrpublic='" + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    #endregion

    #region GIS Details 
    public bool Insert_GIS_Details(tbl_PensionMaster obj_tbl_PensionMaster, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath;
                    obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    Insert_GIS_Details(obj_tbl_PensionMaster, trans, cn);
                }
                else
                {
                    Update_GIS_Details(obj_tbl_PensionMaster, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_GIS_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_LIC_Id],[PensionMaster_ClaimNoDate],[PensionMaster_ClaimRecievedDate],[PensionMaster_ClaimLICSendNo],[PensionMaster_ClaimLICSendDate],[PensionMaster_LICRecievedAmnt],[PensionMaster_LICRecievedDate],[PensionMaster_PensionarAmount],[PensionMaster_PensionarChequeNo],[PensionMaster_PensionarAccountNo],[PensionMaster_PensionarIFSCCode],[PensionMaster_PensionarPaidDate],[PensionMaster_DivisionAmntNo],[PensionMaster_DivisionChequeNo],[PensionMaster_DivisionDate],[PensionMaster_DivisionReason],[PensionMaster_ImgClaimUploadPath],[PensionMaster_ImgDeathCertificate],[PensionMaster_GIS],[PensionMaster_GIS_Type],[PensionMaster_GIS_ClaimNum],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy]) values('" + obj_tbl_PensionMaster.PensionMaster_LIC_Id + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimNoDate + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimRecievedDate + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendNo + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendDate + "','" + obj_tbl_PensionMaster.PensionMaster_LICRecievedAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_LICRecievedDate + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarAmount + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarChequeNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarAccountNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarIFSCCode + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarPaidDate + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionAmntNo + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionChequeNo + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionDate + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionReason + "','" + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate + "','" + obj_tbl_PensionMaster.PensionMaster_GIS + "','" + obj_tbl_PensionMaster.PensionMaster_GIS_Type + "','" + obj_tbl_PensionMaster.PensionMaster_GIS_ClaimNum + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_GIS_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_DivisionReason='" + obj_tbl_PensionMaster.PensionMaster_DivisionReason + "',PensionMaster_LIC_Id='" + obj_tbl_PensionMaster.PensionMaster_LIC_Id + "',PensionMaster_GIS_ClaimNum='" + obj_tbl_PensionMaster.PensionMaster_GIS_ClaimNum + "',PensionMaster_ClaimNoDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimNoDate + "',PensionMaster_GIS_Type='" + obj_tbl_PensionMaster.PensionMaster_GIS_Type + "',PensionMaster_ClaimRecievedDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimRecievedDate + "',PensionMaster_ClaimLICSendNo='" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendNo + "',PensionMaster_LICRecievedAmnt='" + obj_tbl_PensionMaster.PensionMaster_LICRecievedAmnt + "',PensionMaster_LICRecievedDate='" + obj_tbl_PensionMaster.PensionMaster_LICRecievedDate + "',PensionMaster_PensionarAmount='" + obj_tbl_PensionMaster.PensionMaster_PensionarAmount + "',PensionMaster_PensionarChequeNo='" + obj_tbl_PensionMaster.PensionMaster_PensionarChequeNo + "',PensionMaster_PensionarAccountNo='" + obj_tbl_PensionMaster.PensionMaster_PensionarAccountNo + "',PensionMaster_PensionarIFSCCode='" + obj_tbl_PensionMaster.PensionMaster_PensionarIFSCCode + "',PensionMaster_PensionarPaidDate='" + obj_tbl_PensionMaster.PensionMaster_PensionarPaidDate + "',PensionMaster_DivisionAmntNo='" + obj_tbl_PensionMaster.PensionMaster_DivisionAmntNo + "',PensionMaster_DivisionChequeNo='" + obj_tbl_PensionMaster.PensionMaster_DivisionChequeNo + "',PensionMaster_DivisionDate='" + obj_tbl_PensionMaster.PensionMaster_DivisionDate + "',PensionMaster_GIS='" + obj_tbl_PensionMaster.PensionMaster_GIS + "',PensionMaster_ImgClaimUploadPath='" + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath + "',PensionMaster_ImgDeathCertificate='" + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate + "',PensionMaster_ClaimLICSendDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendDate + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Other Details
    public bool Insert_Other_Details(tbl_PensionMaster obj_tbl_PensionMaster, ref string Msg, ref int PensionMaster_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    Insert_Other_Details(obj_tbl_PensionMaster, trans, cn);
                }
                else
                {
                    Update_Other_Details(obj_tbl_PensionMaster, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_Other_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_CourtCaseNumber],[PensionMaster_CourtCaseYear],[PensionMaster_ContemptNumber],[PensionMaster_ContemptYear],[PensionMaster_ImgCourtCaseOrder],[PensionMaster_ImgContemptOrder],[PensionMaster_RegFieldEmployee],[PensionMaster_NoPaymentReason],[PensionMaster_Status],[PensionMaster_AddedOn],[PensionMaster_AddedBy]) values('" + obj_tbl_PensionMaster.PensionMaster_CourtCaseNumber + "','" + obj_tbl_PensionMaster.PensionMaster_CourtCaseYear + "','" + obj_tbl_PensionMaster.PensionMaster_ContemptNumber + "','" + obj_tbl_PensionMaster.PensionMaster_ContemptYear + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder + "','" + obj_tbl_PensionMaster.PensionMaster_RegFieldEmployee + "','" + obj_tbl_PensionMaster.PensionMaster_NoPaymentReason + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_Other_Details(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_CourtCaseNumber='" + obj_tbl_PensionMaster.PensionMaster_CourtCaseNumber + "',PensionMaster_CourtCaseYear='" + obj_tbl_PensionMaster.PensionMaster_CourtCaseYear + "',PensionMaster_ContemptNumber='" + obj_tbl_PensionMaster.PensionMaster_ContemptNumber + "',PensionMaster_ContemptYear='" + obj_tbl_PensionMaster.PensionMaster_ContemptYear + "',PensionMaster_RegFieldEmployee='" + obj_tbl_PensionMaster.PensionMaster_RegFieldEmployee + "',PensionMaster_NoPaymentReason='" + obj_tbl_PensionMaster.PensionMaster_NoPaymentReason + "',PensionMaster_ImgCourtCaseOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder + "',PensionMaster_ImgContemptOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Pension Master
    public bool Insert_tbl_PensionMaster(tbl_PensionMaster obj_tbl_PensionMaster, List<tbl_PensionMasterArrear> obj_tbl_PensionMasterArrear_Li, List<tbl_PersonFamilyDtls> obj_tbl_PersonFamilyDtls_Li, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString());
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgPPO;
                    obj_tbl_PensionMaster.PensionMaster_ImgPPO = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgPPO_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgGPO;
                    obj_tbl_PensionMaster.PensionMaster_ImgGPO = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgGPO_Bytes);
                }

                if (obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgHQOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgHQOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeduction;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeduction = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeduction_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment;
                    obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCertificate;
                    obj_tbl_PensionMaster.PensionMaster_ImgCertificate = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCertificate_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath;
                    obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate;
                    obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder;
                    obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder_Bytes);
                }
                if (obj_tbl_PensionMaster.PensionMaster_ImgPhoto_Bytes != null && obj_tbl_PensionMaster.PensionMaster_ImgPhoto_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMaster.PensionMaster_ImgPhoto;
                    obj_tbl_PensionMaster.PensionMaster_ImgPhoto = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMaster.PensionMaster_ImgPhoto_Bytes);
                }

                if (AllClasses.CheckDataSet(CheckDuplicacyPensionMaster(obj_tbl_PensionMaster.PensionMaster_EmployeeCode, obj_tbl_PensionMaster.PensionMaster_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (obj_tbl_PensionMaster.PensionMaster_Id == 0)
                {
                    string PensionMaster_Id = Insert_tbl_PensionMaster(obj_tbl_PensionMaster, trans, cn);
                    obj_tbl_PensionMaster.PensionMaster_Id = Convert.ToInt32(PensionMaster_Id);
                }
                else
                {
                    Update_tbl_PensionMaster(obj_tbl_PensionMaster, trans, cn);
                }

                Update_tbl_PersonFamilyDtls(obj_tbl_PensionMaster.PensionMaster_Id, obj_tbl_PensionMaster.PensionMaster_AddedBy, trans, cn);
                for (int i = 0; i < obj_tbl_PersonFamilyDtls_Li.Count; i++)
                {
                    obj_tbl_PersonFamilyDtls_Li[i].PersonFamilyDtls_Person_Id = obj_tbl_PensionMaster.PensionMaster_Id;
                    Insert_tbl_PersonFamilyDtls(obj_tbl_PersonFamilyDtls_Li[i], trans, cn);
                }

                Update_tbl_PensionMasterArrear(obj_tbl_PensionMaster.PensionMaster_AddedBy, obj_tbl_PensionMaster.PensionMaster_Id, trans, cn);
                for (int i = 0; i < obj_tbl_PensionMasterArrear_Li.Count; i++)
                {
                    obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_PensionMasterId = obj_tbl_PensionMaster.PensionMaster_Id;
                    if (obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_OrderPath_Bytes != null && obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_OrderPath_Bytes.Length > 0)
                    {
                        fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_OrderPath;
                        obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_OrderPath = "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Pension\\" + obj_tbl_PensionMaster.PensionMaster_PensionDivision.ToString() + "\\" + fileName, obj_tbl_PensionMasterArrear_Li[i].PensionMasterArrear_OrderPath_Bytes);
                    }
                    Insert_tbl_PensionMasterArrear(obj_tbl_PensionMasterArrear_Li[i], trans, cn);
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_PensionMaster(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionMaster([PensionMaster_RetireDivision],[PensionMaster_PensionDivision],[PensionMaster_FamilyRelation],[PensionMaster_Designation],[PensionMaster_PayBandId],[PensionMaster_PayScaleId],[PensionMaster_RetirementYear],[PensionMaster_DateOfBirth],[PensionMaster_DateOfJoining],[PensionMaster_DateOfRetirement],[PensionMaster_DateOfDeath],[PensionMaster_DateOfRegularization],[PensionMaster_FormSendingDate],[PensionMaster_DateOfRecieving],[PensionMaster_AAOPension],[PensionMaster_AccountantName],[PensionMaster_BasicPensionAmount],[PensionMaster_FamilyPension],[PensionMaster_PPO_Number],[PensionMaster_PPODate],[PensionMaster_Reason],[PensionMaster_AnyComments],[PensionMaster_GPOAmount],[PensionMaster_GratuityNumber],[PensionMaster_GratuityDate],[PensionMaster_GPaymentOrderDate],[PensionMaster_GPaymentOrderNumber],[PensionMaster_GratuityReason],[PensionMaster_DeductionAmount],[PensionMaster_DeductionReason],[PensionMaster_LeaveEncashmentAmnt],[PensionMaster_LeaveEncashmentNumber],[PensionMaster_LeaveEncashmentDate],[PensionMaster_EncashmentOrderDate],[PensionMaster_EncashmentOrderNumber],[PensionMaster_EncashmentReason],[PensionMaster_EncashmentDeductionAmnt],[PensionMaster_EncashmentDeductionReason],[PensionMaster_LIC_Id],[PensionMaster_ClaimNoDate],[PensionMaster_ClaimRecievedDate],[PensionMaster_ClaimLICSendNo],[PensionMaster_ClaimLICSendDate],[PensionMaster_LICRecievedAmnt],[PensionMaster_LICRecievedDate],[PensionMaster_PensionarAmount],[PensionMaster_PensionarChequeNo],[PensionMaster_PensionarAccountNo],[PensionMaster_PensionarIFSCCode],[PensionMaster_PensionarPaidDate],[PensionMaster_DivisionAmntNo],[PensionMaster_DivisionChequeNo],[PensionMaster_DivisionDate],[PensionMaster_DivisionReason],[PensionMaster_BasicPensionRate],[PensionMaster_NoOfMonth],[PensionMaster_CourtCaseNumber],[PensionMaster_CourtCaseYear],[PensionMaster_ContemptNumber],[PensionMaster_ContemptYear],[PensionMaster_Status],[PensionMaster_AddedBy],[PensionMaster_NoPaymentReason],[PensionMaster_AddedOn],[PensionMaster_Pension],[PensionMaster_Gratuity],[PensionMaster_LeaveEncashment],[PensionMaster_RegFieldEmployee],[PensionMaster_GIS],[PensionMaster_GIS_Type],[PensionMaster_GIS_ClaimNum],[PensionMaster_NameOfPensioner],[PensionMaster_FatherOrHusbandName],[PensionMaster_MobileNo],[PensionMaster_PANNo],[PensionMaster_AdharNo],[PensionMaster_PensionAndFamilyPensioner],[PensionMaster_FamilyPensionerName],[PensionMaster_FamilyPensionerRelation],[PensionMaster_FamilyPensionerDOB],[PensionMaster_FamilyPensionerMobNo],[PensionMaster_FamilyPensionerPANNo],[PensionMaster_FamilyPensionerAdharNo],[PensionMaster_FamilyPensionerOrderNo],[PensionMaster_FamilyPensionerOrderNoDate],[PensionMaster_FamilyPensionerStatus],[PensionMaster_ImgCompiledOrder],[PensionMaster_ImgPensionOrder],[PensionMaster_ImgPPO],[PensionMaster_ImgGPO],[PensionMaster_ImgHQOrder],[PensionMaster_ImgDeduction],[PensionMaster_ImgLeaveEncashment],[PensionMaster_ImgEncashmentOrder],[PensionMaster_ImgDeductionOrpublic],[PensionMaster_ImgCertificate],[PensionMaster_ImgClaimUploadPath],[PensionMaster_ImgDeathCertificate],[PensionMaster_ImgCourtCaseOrder],[PensionMaster_ImgContemptOrder],[PensionMaster_PermanentAddress],[PensionMaster_PostalAddress],[PensionMaster_Gender],[PensionMaster_ImgPhoto],[PensionMaster_EmployeeCode],[PensionMaster_CRNo],[PensionMaster_NomineeName],[PensionMaster_NomineeAddress],[PensionMaster_GradePay],[PensionMaster_PensionCode]) values('" + obj_tbl_PensionMaster.PensionMaster_RetireDivision + "','" + obj_tbl_PensionMaster.PensionMaster_PensionDivision + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyRelation + "','" + obj_tbl_PensionMaster.PensionMaster_Designation + "','" + obj_tbl_PensionMaster.PensionMaster_PayBandId + "','" + obj_tbl_PensionMaster.PensionMaster_PayScaleId + "','" + obj_tbl_PensionMaster.PensionMaster_RetirementYear + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfBirth + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfJoining + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRetirement + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfDeath + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRegularization + "','" + obj_tbl_PensionMaster.PensionMaster_FormSendingDate + "','" + obj_tbl_PensionMaster.PensionMaster_DateOfRecieving + "','" + obj_tbl_PensionMaster.PensionMaster_AAOPension + "','" + obj_tbl_PensionMaster.PensionMaster_AccountantName + "','" + obj_tbl_PensionMaster.PensionMaster_BasicPensionAmount + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPension + "','" + obj_tbl_PensionMaster.PensionMaster_PPO_Number + "','" + obj_tbl_PensionMaster.PensionMaster_PPODate + "','" + obj_tbl_PensionMaster.PensionMaster_Reason + "','" + obj_tbl_PensionMaster.PensionMaster_AnyComments + "','" + obj_tbl_PensionMaster.PensionMaster_GPOAmount + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityNumber + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityDate + "','" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderDate + "','" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderNumber + "','" + obj_tbl_PensionMaster.PensionMaster_GratuityReason + "','" + obj_tbl_PensionMaster.PensionMaster_DeductionAmount + "','" + obj_tbl_PensionMaster.PensionMaster_DeductionReason + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentNumber + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentDate + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderDate + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderNumber + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentReason + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionReason + "','" + obj_tbl_PensionMaster.PensionMaster_LIC_Id + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimNoDate + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimRecievedDate + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendNo + "','" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendDate + "','" + obj_tbl_PensionMaster.PensionMaster_LICRecievedAmnt + "','" + obj_tbl_PensionMaster.PensionMaster_LICRecievedDate + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarAmount + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarChequeNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarAccountNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarIFSCCode + "','" + obj_tbl_PensionMaster.PensionMaster_PensionarPaidDate + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionAmntNo + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionChequeNo + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionDate + "','" + obj_tbl_PensionMaster.PensionMaster_DivisionReason + "','" + obj_tbl_PensionMaster.PensionMaster_BasicPensionRate + "','" + obj_tbl_PensionMaster.PensionMaster_NoOfMonth + "','" + obj_tbl_PensionMaster.PensionMaster_CourtCaseNumber + "','" + obj_tbl_PensionMaster.PensionMaster_CourtCaseYear + "','" + obj_tbl_PensionMaster.PensionMaster_ContemptNumber + "','" + obj_tbl_PensionMaster.PensionMaster_ContemptYear + "','" + obj_tbl_PensionMaster.PensionMaster_Status + "','" + obj_tbl_PensionMaster.PensionMaster_AddedBy + "','" + obj_tbl_PensionMaster.PensionMaster_NoPaymentReason + "',getdate(),'" + obj_tbl_PensionMaster.PensionMaster_Pension + "','" + obj_tbl_PensionMaster.PensionMaster_Gratuity + "','" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashment + "','" + obj_tbl_PensionMaster.PensionMaster_RegFieldEmployee + "','" + obj_tbl_PensionMaster.PensionMaster_GIS + "','" + obj_tbl_PensionMaster.PensionMaster_GIS_Type + "','" + obj_tbl_PensionMaster.PensionMaster_GIS_ClaimNum + "','" + obj_tbl_PensionMaster.PensionMaster_NameOfPensioner + "','" + obj_tbl_PensionMaster.PensionMaster_FatherOrHusbandName + "','" + obj_tbl_PensionMaster.PensionMaster_MobileNo + "','" + obj_tbl_PensionMaster.PensionMaster_PANNo + "','" + obj_tbl_PensionMaster.PensionMaster_AdharNo + "','" + obj_tbl_PensionMaster.PensionMaster_PensionAndFamilyPensioner + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerName + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerRelation + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerDOB + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerMobNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerPANNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerAdharNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNo + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNoDate + "','" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerStatus + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPPO + "','" + obj_tbl_PensionMaster.PensionMaster_ImgGPO + "','" + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeduction + "','" + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment + "','" + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCertificate + "','" + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath + "','" + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate + "','" + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder + "','" + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder + "','" + obj_tbl_PensionMaster.PensionMaster_PermanentAddress + "','" + obj_tbl_PensionMaster.PensionMaster_PostalAddress + "','" + obj_tbl_PensionMaster.PensionMaster_Gender + "','" + obj_tbl_PensionMaster.PensionMaster_ImgPhoto + "','" + obj_tbl_PensionMaster.PensionMaster_EmployeeCode + "','" + obj_tbl_PensionMaster.PensionMaster_CRNo + "','" + obj_tbl_PensionMaster.PensionMaster_NomineeName + "','" + obj_tbl_PensionMaster.PensionMaster_NomineeAddress + "','" + obj_tbl_PensionMaster.PensionMaster_GradePay + "','" + obj_tbl_PensionMaster.PensionMaster_PensionCode + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private DataSet CheckDuplicacyPensionMaster(string EmployeeCode, string PensionMaster_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_PensionMaster  where PensionMaster_Status = 1 and  PensionMaster_EmployeeCode = '" + EmployeeCode + "' ";
        if (PensionMaster_Id != "0")
        {
            strQuery += " AND PensionMaster_Id  <> '" + PensionMaster_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }
    #endregion

    #region Pension Master
    public DataSet get_tbl_PensionMaster(int Zone_Id, int Circle_Id, int Division_Id, string Employee_Code, int PensionMaster_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                select
                    PensionMaster_Id,
                    ZoneRetire = ZoneRetire.Zone_Name, 
                    ZonePension = ZonePension.Zone_Name, 
                    CircleRetire = CircleRetire.Circle_Name, 
                    CircleRetire = CirclePension.Circle_Name, 
                    ZoneRetire_Id = ZoneRetire.Zone_Id, 
                    ZonePension_Id = ZonePension.Zone_Id, 
                    CircleRetire_Id = CircleRetire.Circle_Id, 
                    CircleRetire_Id = CirclePension.Circle_Id, 
                    DivisionRetire.Division_Name DivisionRetire,
                    DivisionPension.Division_Name DivisionPension,
                    PensionMaster_RetireDivision,
                    PensionMaster_PensionDivision,
                    PensionMaster_FamilyRelation,
                    PensionMaster_Designation,
                    Designation_DesignationName,
                    PensionMaster_PayBandId,
                    PayBand_Name,
                    PensionMaster_PayScaleId,
                    PayScale_Name,
                    PensionMaster_PensionCode,
                    PensionMaster_RetirementYear,
                    PensionMaster_DateOfBirth=case when convert(char(10), PensionMaster_DateOfBirth, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfBirth, 103) end,
                    PensionMaster_DateOfJoining=case when convert(char(10), PensionMaster_DateOfJoining, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfJoining, 103) end,
                    PensionMaster_DateOfRetirement=case when convert(char(10), PensionMaster_DateOfRetirement, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfRetirement, 103) end,
                    PensionMaster_DateOfDeath=case when convert(char(10), PensionMaster_DateOfDeath, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfDeath, 103) end,
                    PensionMaster_DateOfRegularization=case when convert(char(10), PensionMaster_DateOfRegularization, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfRegularization, 103) end,
                    PensionMaster_ImgCompiledOrder,
                    PensionMaster_ImgPensionOrder,
                    PensionMaster_FormSendingDate=case when convert(char(10), PensionMaster_FormSendingDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_FormSendingDate, 103) end,
                    PensionMaster_DateOfRecieving=case when convert(char(10), PensionMaster_DateOfRecieving, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DateOfRecieving, 103) end,
                    PensionMaster_AAOPension,
                    PensionMaster_AccountantName,
                    PensionMaster_Pension,
                    PensionMaster_BasicPensionAmount,
                    PensionMaster_FamilyPension,
                    PensionMaster_PPO_Number,
                    PensionMaster_PPODate=case when convert(char(10), PensionMaster_PPODate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_PPODate, 103) end,
                    PensionMaster_ImgPPO,
                    PensionMaster_Reason,
                    PensionReason_Name,
                    PensionMaster_AnyComments,
                    PensionMaster_Gratuity,
                    PensionMaster_GPOAmount,
                    PensionMaster_GratuityNumber,
                    PensionMaster_GratuityDate=case when convert(char(10), PensionMaster_GratuityDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_GratuityDate, 103) end,
                    PensionMaster_ImgGPO,
                    PensionMaster_GPaymentOrderDate=case when convert(char(10), PensionMaster_GPaymentOrderDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_GPaymentOrderDate, 103) end,
                    PensionMaster_GPaymentOrderNumber,
                    PensionMaster_ImgHQOrder,
                    PensionMaster_GratuityReason,
                    PensionMaster_DeductionAmount,
                    PensionMaster_DeductionReason,
                    PensionMaster_ImgDeduction,
                    PensionMaster_LeaveEncashment,
                    PensionMaster_LeaveEncashmentAmnt,
                    PensionMaster_LeaveEncashmentNumber,
                    PensionMaster_LeaveEncashmentDate=case when convert(char(10), PensionMaster_LeaveEncashmentDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_LeaveEncashmentDate, 103) end,
                    PensionMaster_ImgLeaveEncashment,
                    PensionMaster_EncashmentOrderDate=case when convert(char(10), PensionMaster_EncashmentOrderDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_EncashmentOrderDate, 103) end,
                    PensionMaster_EncashmentOrderNumber,
                    PensionMaster_ImgEncashmentOrder,
                    PensionMaster_EncashmentReason,
                    PensionMaster_EncashmentDeductionAmnt,
                    PensionMaster_EncashmentDeductionReason,
                    PensionMaster_BasicPensionRate,
                    Basic_Pension_Rate,
                    PensionMaster_NoOfMonth,
                    PensionMaster_CourtCaseNumber,
                    PensionMaster_CourtCaseYear,
                    PensionMaster_ContemptNumber,
                    PensionMaster_ContemptYear,
                    PensionMaster_RegFieldEmployee,
                    PensionMaster_NoPaymentReason,
                    PensionMaster_ImgCertificate,
                    PensionMaster_LIC_Id,
                    PensionMaster_ClaimNoDate=case when convert(char(10), PensionMaster_ClaimNoDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_ClaimNoDate, 103) end,
                    PensionMaster_ImgClaimUploadPath,
                    PensionMaster_GIS,
                    PensionMaster_ClaimRecievedDate=case when convert(char(10), PensionMaster_ClaimRecievedDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_ClaimRecievedDate, 103) end,
                    PensionMaster_ClaimLICSendNo,
                    PensionMaster_ClaimLICSendDate=case when convert(char(10), PensionMaster_ClaimLICSendDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_ClaimLICSendDate, 103) end,
                    PensionMaster_LICRecievedAmnt,
                    PensionMaster_LICRecievedDate=case when convert(char(10), PensionMaster_LICRecievedDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_LICRecievedDate, 103) end,
                    PensionMaster_PensionarAmount,
                    PensionMaster_PensionarChequeNo,
                    PensionMaster_PensionarAccountNo,
                    PensionMaster_PensionarIFSCCode,
                    PensionMaster_PensionarPaidDate=case when convert(char(10), PensionMaster_PensionarPaidDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_PensionarPaidDate, 103) end,
                    PensionMaster_DivisionAmntNo,
                    PensionMaster_DivisionChequeNo,
                    PensionMaster_DivisionDate=case when convert(char(10), PensionMaster_DivisionDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_DivisionDate, 103) end,                           
                    PensionMaster_DivisionReason,
                    GIS_Name,
                    PensionMaster_AddedOn,
                    PensionMaster_AddedBy,
                    PensionMaster_ModifiedOn,
                    PensionMaster_ModifiedBy,
                    PensionMaster_Status,
                    PensionMaster_GIS_Type,
                    PensionMaster_GIS_ClaimNum,
                    PensionMaster_NameOfPensioner,
                    PensionMaster_FatherOrHusbandName,
                    PensionMaster_MobileNo,
                    PensionMaster_PANNo,
                    PensionMaster_AdharNo,
                    PensionMaster_FamilyPensionerName,
                    PensionMaster_FamilyPensionerRelation,
                    PensionMaster_FamilyPensionerDOB=case when convert(char(10), PensionMaster_FamilyPensionerDOB, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_FamilyPensionerDOB, 103) end,
                    PensionMaster_FamilyPensionerMobNo,
                    PensionMaster_FamilyPensionerPANNo,
                    PensionMaster_FamilyPensionerAdharNo,
                    PensionMaster_FamilyPensionerOrderNo,
                    PensionMaster_FamilyPensionerOrderNoDate=case when convert(char(10), PensionMaster_FamilyPensionerOrderNoDate, 103) = '01/01/1900' then '' else convert(char(10), PensionMaster_FamilyPensionerOrderNoDate, 103) end,
                    PensionMaster_ImgDeductionOrpublic,
                    PensionMaster_FamilyPensionerStatus,
                    PensionMaster_PensionAndFamilyPensioner,
                    PensionMaster_ImgDeathCertificate,
                    PensionMaster_ImgDeductionOrpublic,
                    PensionMaster_ImgCourtCaseOrder,
                    PensionMaster_PermanentAddress,
                    PensionMaster_PostalAddress,
                    PensionMaster_Gender,
                    PensionMaster_ImgPhoto,
                    PensionMaster_EmployeeCode,
                    PensionMaster_CRNo,
                    PensionMaster_GradePay,
                    GradePay_Value,
                    PensionMaster_NomineeName,
                    PensionMaster_NomineeAddress,
                    PensionMaster_ImgContemptOrder
                from tbl_PensionMaster 
                left join tbl_Division DivisionRetire on DivisionRetire.Division_Id = PensionMaster_RetireDivision 
                left join tbl_Division DivisionPension on DivisionPension.Division_Id = PensionMaster_PensionDivision 
                left join tbl_Circle CircleRetire on CircleRetire.Circle_Id = DivisionRetire.Division_CircleId
                left join tbl_Circle CirclePension on CirclePension.Circle_Id = DivisionPension.Division_CircleId
                left join tbl_Zone ZoneRetire on ZoneRetire.Zone_Id = CircleRetire.Circle_ZoneId
                left join tbl_Zone ZonePension on ZonePension.Zone_Id = CirclePension.Circle_ZoneId
                left join tbl_Designation as tbl_Designation1 on tbl_Designation1.Designation_Id=PensionMaster_Designation
                left join tbl_PayBand as tbl_PayBand1 on tbl_PayBand1.PayBand_Id=PensionMaster_PayBandId
                left join tbl_PayScale as tbl_PayScale1 on tbl_PayScale1.PayScale_Id=PensionMaster_PayScaleId
                left join tbl_PensionReason as tbl_PensionReason1 on tbl_PensionReason1.PensionReason_Id=PensionMaster_Reason
                left join tbl_GIS as tbl_GIS1 on tbl_GIS1.GIS_Id=PensionMaster_DivisionReason
                left join tbl_Basic_Pension_Rate as tbl_Basic_Pension_Rate1 on tbl_Basic_Pension_Rate1.Basic_Pension_Rate_Id=PensionMaster_BasicPensionRate
                left join tbl_GradePay as tbl_GradePay1 on tbl_GradePay1.GradePay_Id=PensionMaster_GradePay
                where PensionMaster_Status=1";

        if (Zone_Id > 0)
        {
            strQuery += " and (ZoneRetire.Zone_Id ='" + Zone_Id + "' or ZonePension.Zone_Id = '" + Zone_Id + "')";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and (CircleRetire.Circle_Id ='" + Circle_Id + "' or CirclePension.Circle_Id ='" + Circle_Id + "')";
        }
        if (Division_Id > 0)
        {
            strQuery += " and (PensionMaster_PensionDivision='" + Division_Id + "' or PensionMaster_RetireDivision='" + Division_Id + "') ";
        }
        if (PensionMaster_Id > 0)
        {
            strQuery += "and PensionMaster_Id ='" + PensionMaster_Id + "'";
        }
        if (Employee_Code != "")
        {
            strQuery += "and (PensionMaster_EmployeeCode ='" + Employee_Code + "' or PensionMaster_CRNo ='" + Employee_Code + "' or PensionMaster_PensionCode ='" + Employee_Code + "')";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    private void Update_tbl_PensionMaster(tbl_PensionMaster obj_tbl_PensionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionMaster set PensionMaster_PensionDivision='" + obj_tbl_PensionMaster.PensionMaster_PensionDivision + "',  PensionMaster_DateOfRetirement='" + obj_tbl_PensionMaster.PensionMaster_DateOfRetirement + "',PensionMaster_FamilyRelation='" + obj_tbl_PensionMaster.PensionMaster_FamilyRelation + "',PensionMaster_Designation='" + obj_tbl_PensionMaster.PensionMaster_Designation + "',PensionMaster_DateOfJoining='" + obj_tbl_PensionMaster.PensionMaster_DateOfJoining + "',PensionMaster_AAOPension='" + obj_tbl_PensionMaster.PensionMaster_AAOPension + "',PensionMaster_DateOfDeath='" + obj_tbl_PensionMaster.PensionMaster_DateOfDeath + "',PensionMaster_RetirementYear='" + obj_tbl_PensionMaster.PensionMaster_RetirementYear + "',PensionMaster_DateOfRegularization='" + obj_tbl_PensionMaster.PensionMaster_DateOfRegularization + "',PensionMaster_FormSendingDate='" + obj_tbl_PensionMaster.PensionMaster_FormSendingDate + "',PensionMaster_DateOfRecieving='" + obj_tbl_PensionMaster.PensionMaster_DateOfRecieving + "',PensionMaster_AccountantName='" + obj_tbl_PensionMaster.PensionMaster_AccountantName + "',PensionMaster_BasicPensionAmount='" + obj_tbl_PensionMaster.PensionMaster_BasicPensionAmount + "',PensionMaster_FamilyPension='" + obj_tbl_PensionMaster.PensionMaster_FamilyPension + "',PensionMaster_PPO_Number='" + obj_tbl_PensionMaster.PensionMaster_PPO_Number + "',PensionMaster_PPODate='" + obj_tbl_PensionMaster.PensionMaster_PPODate + "',PensionMaster_AnyComments='" + obj_tbl_PensionMaster.PensionMaster_AnyComments + "',PensionMaster_GPOAmount='" + obj_tbl_PensionMaster.PensionMaster_GPOAmount + "',PensionMaster_Gratuity='" + obj_tbl_PensionMaster.PensionMaster_Gratuity + "',PensionMaster_GratuityNumber='" + obj_tbl_PensionMaster.PensionMaster_GratuityNumber + "',PensionMaster_GratuityDate='" + obj_tbl_PensionMaster.PensionMaster_GratuityDate + "',PensionMaster_GPaymentOrderDate='" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderDate + "',PensionMaster_Reason='" + obj_tbl_PensionMaster.PensionMaster_Reason + "',PensionMaster_GratuityReason='" + obj_tbl_PensionMaster.PensionMaster_GratuityReason + "',PensionMaster_DeductionAmount='" + obj_tbl_PensionMaster.PensionMaster_DeductionAmount + "',PensionMaster_DeductionReason='" + obj_tbl_PensionMaster.PensionMaster_DeductionReason + "',PensionMaster_LeaveEncashment='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashment + "',PensionMaster_LeaveEncashmentAmnt='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentAmnt + "',PensionMaster_LeaveEncashmentNumber='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentNumber + "',PensionMaster_LeaveEncashmentDate='" + obj_tbl_PensionMaster.PensionMaster_LeaveEncashmentDate + "',PensionMaster_EncashmentOrderDate='" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderDate + "',PensionMaster_EncashmentOrderNumber='" + obj_tbl_PensionMaster.PensionMaster_EncashmentOrderNumber + "',PensionMaster_EncashmentReason='" + obj_tbl_PensionMaster.PensionMaster_EncashmentReason + "',PensionMaster_EncashmentDeductionAmnt='" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionAmnt + "',PensionMaster_EncashmentDeductionReason='" + obj_tbl_PensionMaster.PensionMaster_EncashmentDeductionReason + "',PensionMaster_DivisionReason='" + obj_tbl_PensionMaster.PensionMaster_DivisionReason + "',PensionMaster_LIC_Id='" + obj_tbl_PensionMaster.PensionMaster_LIC_Id + "',PensionMaster_GIS_ClaimNum='" + obj_tbl_PensionMaster.PensionMaster_GIS_ClaimNum + "',PensionMaster_ClaimNoDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimNoDate + "',PensionMaster_GIS_Type='" + obj_tbl_PensionMaster.PensionMaster_GIS_Type + "',PensionMaster_ClaimRecievedDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimRecievedDate + "',PensionMaster_ClaimLICSendNo='" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendNo + "',PensionMaster_LICRecievedAmnt='" + obj_tbl_PensionMaster.PensionMaster_LICRecievedAmnt + "',PensionMaster_LICRecievedDate='" + obj_tbl_PensionMaster.PensionMaster_LICRecievedDate + "',PensionMaster_Pension='" + obj_tbl_PensionMaster.PensionMaster_Pension + "',PensionMaster_PensionarAmount='" + obj_tbl_PensionMaster.PensionMaster_PensionarAmount + "',PensionMaster_PensionarChequeNo='" + obj_tbl_PensionMaster.PensionMaster_PensionarChequeNo + "',PensionMaster_PensionarAccountNo='" + obj_tbl_PensionMaster.PensionMaster_PensionarAccountNo + "',PensionMaster_PensionarIFSCCode='" + obj_tbl_PensionMaster.PensionMaster_PensionarIFSCCode + "',PensionMaster_PensionarPaidDate='" + obj_tbl_PensionMaster.PensionMaster_PensionarPaidDate + "',PensionMaster_DivisionAmntNo='" + obj_tbl_PensionMaster.PensionMaster_DivisionAmntNo + "',PensionMaster_DivisionChequeNo='" + obj_tbl_PensionMaster.PensionMaster_DivisionChequeNo + "',PensionMaster_DivisionDate='" + obj_tbl_PensionMaster.PensionMaster_DivisionDate + "',PensionMaster_BasicPensionRate='" + obj_tbl_PensionMaster.PensionMaster_BasicPensionRate + "',PensionMaster_NoOfMonth='" + obj_tbl_PensionMaster.PensionMaster_NoOfMonth + "',PensionMaster_CourtCaseNumber='" + obj_tbl_PensionMaster.PensionMaster_CourtCaseNumber + "',PensionMaster_CourtCaseYear='" + obj_tbl_PensionMaster.PensionMaster_CourtCaseYear + "',PensionMaster_ContemptNumber='" + obj_tbl_PensionMaster.PensionMaster_ContemptNumber + "',PensionMaster_ContemptYear='" + obj_tbl_PensionMaster.PensionMaster_ContemptYear + "',PensionMaster_NameOfPensioner='" + obj_tbl_PensionMaster.PensionMaster_NameOfPensioner + "',PensionMaster_FatherOrHusbandName='" + obj_tbl_PensionMaster.PensionMaster_FatherOrHusbandName + "',PensionMaster_FamilyPensionerDOB='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerDOB + "',PensionMaster_FamilyPensionerMobNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerMobNo + "',PensionMaster_MobileNo='" + obj_tbl_PensionMaster.PensionMaster_MobileNo + "',PensionMaster_PANNo='" + obj_tbl_PensionMaster.PensionMaster_PANNo + "',PensionMaster_AdharNo='" + obj_tbl_PensionMaster.PensionMaster_AdharNo + "',PensionMaster_FamilyPensionerName='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerName + "',PensionMaster_FamilyPensionerRelation='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerRelation + "',PensionMaster_FamilyPensionerPANNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerPANNo + "',PensionMaster_FamilyPensionerOrderNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNo + "',PensionMaster_FamilyPensionerAdharNo='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerAdharNo + "',PensionMaster_FamilyPensionerOrderNoDate='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerOrderNoDate + "', PensionMaster_FamilyPensionerStatus='" + obj_tbl_PensionMaster.PensionMaster_FamilyPensionerStatus + "', PensionMaster_PensionAndFamilyPensioner='" + obj_tbl_PensionMaster.PensionMaster_PensionAndFamilyPensioner + "',PensionMaster_GPaymentOrderNumber='" + obj_tbl_PensionMaster.PensionMaster_GPaymentOrderNumber + "',PensionMaster_NoPaymentReason='" + obj_tbl_PensionMaster.PensionMaster_NoPaymentReason + "',PensionMaster_DateOfBirth='" + obj_tbl_PensionMaster.PensionMaster_DateOfBirth + "',PensionMaster_ImgCertificate='" + obj_tbl_PensionMaster.PensionMaster_ImgCertificate + "',PensionMaster_ImgCompiledOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgCompiledOrder + "',PensionMaster_ImgPensionOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgPensionOrder + "',PensionMaster_ImgGPO='" + obj_tbl_PensionMaster.PensionMaster_ImgGPO + "',PensionMaster_ImgHQOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgHQOrder + "',PensionMaster_ImgDeduction='" + obj_tbl_PensionMaster.PensionMaster_ImgDeduction + "',PensionMaster_ImgPPO='" + obj_tbl_PensionMaster.PensionMaster_ImgPPO + "',PensionMaster_ImgLeaveEncashment='" + obj_tbl_PensionMaster.PensionMaster_ImgLeaveEncashment + "',PensionMaster_ImgEncashmentOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgEncashmentOrder + "',PensionMaster_ImgDeductionOrpublic='" + obj_tbl_PensionMaster.PensionMaster_ImgDeductionOrpublic + "',PensionMaster_ImgClaimUploadPath='" + obj_tbl_PensionMaster.PensionMaster_ImgClaimUploadPath + "',PensionMaster_ImgDeathCertificate='" + obj_tbl_PensionMaster.PensionMaster_ImgDeathCertificate + "',PensionMaster_ImgCourtCaseOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgCourtCaseOrder + "',PensionMaster_ModifiedBy='" + obj_tbl_PensionMaster.PensionMaster_ModifiedBy + "',PensionMaster_ModifiedOn=getdate(),PensionMaster_RegFieldEmployee ='" + obj_tbl_PensionMaster.PensionMaster_RegFieldEmployee + "',PensionMaster_PermanentAddress='" + obj_tbl_PensionMaster.PensionMaster_PermanentAddress + "',PensionMaster_PostalAddress='" + obj_tbl_PensionMaster.PensionMaster_PostalAddress + "',PensionMaster_Gender='" + obj_tbl_PensionMaster.PensionMaster_Gender + "',PensionMaster_ImgPhoto='" + obj_tbl_PensionMaster.PensionMaster_ImgPhoto + "',PensionMaster_EmployeeCode='" + obj_tbl_PensionMaster.PensionMaster_EmployeeCode + "',PensionMaster_CRNo='" + obj_tbl_PensionMaster.PensionMaster_CRNo + "',PensionMaster_PayBandId='" + obj_tbl_PensionMaster.PensionMaster_PayBandId + "',PensionMaster_PayScaleId='" + obj_tbl_PensionMaster.PensionMaster_PayScaleId + "',PensionMaster_ClaimLICSendDate='" + obj_tbl_PensionMaster.PensionMaster_ClaimLICSendDate + "',PensionMaster_NomineeName='" + obj_tbl_PensionMaster.PensionMaster_NomineeName + "',PensionMaster_NomineeAddress='" + obj_tbl_PensionMaster.PensionMaster_NomineeAddress + "',PensionMaster_GradePay='" + obj_tbl_PensionMaster.PensionMaster_GradePay + "',PensionMaster_RetireDivision='" + obj_tbl_PensionMaster.PensionMaster_RetireDivision + "',PensionMaster_PensionCode='" + obj_tbl_PensionMaster.PensionMaster_PensionCode + "',PensionMaster_ImgContemptOrder='" + obj_tbl_PensionMaster.PensionMaster_ImgContemptOrder + "' where PensionMaster_Id ='" + obj_tbl_PensionMaster.PensionMaster_Id + "' and PensionMaster_Status ='" + obj_tbl_PensionMaster.PensionMaster_Status + "'";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_PensionMaster(int PensionMaster_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_PensionMaster set   PensionMaster_Status = 0, PensionMaster_ModifiedBy='" + person_Id + "',PensionMaster_ModifiedOn=getdate() where PensionMaster_Id = '" + PensionMaster_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }

    #endregion

    #region GIS
    public DataSet get_tbl_GIS()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        GIS_Id,
                        GIS_Name,
                        GIS_AddedOn,
                        GIS_AddedBy,
                        GIS_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=GIS_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=GIS_ModifiedOn 
                    from tbl_GIS 
                    left join tbl_PersonDetail on Person_Id=GIS_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=GIS_ModifiedBy 
                    where GIS_Status=1 order by GIS_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_GIS(tbl_GIS obj_tbl_GIS, int GIS_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyGIS(obj_tbl_GIS.GIS_Name, GIS_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (GIS_Id == 0)
                {
                    Insert_tbl_GIS(obj_tbl_GIS, trans, cn);
                }
                else
                {
                    obj_tbl_GIS.GIS_Id = GIS_Id;
                    Update_tbl_GIS(obj_tbl_GIS, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyGIS(string GISName, string GIS_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_GIS  where GIS_Status = 1 and  GIS_Name = '" + GISName + "' ";
        if (GIS_Id != "0")
        {
            strQuery += " AND GIS_Id  <> '" + GIS_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_GIS(tbl_GIS obj_tbl_GIS, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_GIS( [GIS_AddedBy],[GIS_AddedOn],[GIS_Name],[GIS_Status] ) values('"
            + obj_tbl_GIS.GIS_AddedBy
            + "', getdate(), N'"
            + obj_tbl_GIS.GIS_Name
            + "','" + obj_tbl_GIS.GIS_Status
            + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_GIS(tbl_GIS obj_tbl_GIS, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_GIS set  GIS_Name = N'" + obj_tbl_GIS.GIS_Name + "',GIS_ModifiedOn = getDate(),GIS_ModifiedBy = '" + obj_tbl_GIS.GIS_AddedBy + "' where GIS_Id = '" + obj_tbl_GIS.GIS_Id + "' and GIS_Status = '" + obj_tbl_GIS.GIS_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_tbl_GIS(int GIS_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_GIS set   GIS_Status = 0,GIS_ModifiedBy='" + person_Id + "',GIS_ModifiedOn=getdate() where GIS_Id = '" + GIS_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Pay Band
    public DataSet get_tbl_PayBand()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
        select
        PayBand_Id,
        PayBand_Name,
        PayBand_AddedOn,
        PayBand_AddedBy,
        PayBand_Status,
        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
        Created_Date=PayBand_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
        Mdified_Date=PayBand_ModifiedOn
        from tbl_PayBand left join tbl_PersonDetail on Person_Id=PayBand_AddedBy
        left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=PayBand_ModifiedBy
        where PayBand_Status=1 order by PayBand_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_PayBand(tbl_PayBand obj_tbl_PayBand, int PayBand_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyPayBand(obj_tbl_PayBand.PayBand_Name, PayBand_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (PayBand_Id == 0)
                {
                    Insert_tbl_PayBand(obj_tbl_PayBand, trans, cn);
                }
                else
                {
                    obj_tbl_PayBand.PayBand_Id = PayBand_Id;
                    Update_tbl_PayBand(obj_tbl_PayBand, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyPayBand(string PayBandName, string PayBand_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_PayBand  where PayBand_Status = 1 and  PayBand_Name = '" + PayBandName + "' ";
        if (PayBand_Id != "0")
        {
            strQuery += " AND PayBand_Id  <> '" + PayBand_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_PayBand(tbl_PayBand obj_tbl_PayBand, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PayBand( [PayBand_AddedBy],[PayBand_AddedOn],[PayBand_Name],[PayBand_Status] ) values('" +
            obj_tbl_PayBand.PayBand_AddedBy + "', getdate(), N'" +
            obj_tbl_PayBand.PayBand_Name + "','" +
            obj_tbl_PayBand.PayBand_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_PayBand(tbl_PayBand obj_tbl_PayBand, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PayBand set  PayBand_Name = N'" + obj_tbl_PayBand.PayBand_Name + "',PayBand_ModifiedOn = getDate(),PayBand_ModifiedBy = '" + obj_tbl_PayBand.PayBand_AddedBy + "' where PayBand_Id = '" + obj_tbl_PayBand.PayBand_Id + "' and PayBand_Status = '" + obj_tbl_PayBand.PayBand_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_PayBand(int PayBand_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_PayBand set   PayBand_Status = 0,PayBand_ModifiedBy='" + person_Id + "',PayBand_ModifiedOn=getdate() where PayBand_Id = '" + PayBand_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Pay Scale
    public DataSet get_tbl_PayScale(int PayBand_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        PayScale_Id, 
                        PayScale_Name, 
                        PayScale_PayBandId, 
                        PayScale_ValueFrom,
                        PayScale_ValueTill,
                        PayScale_GradePay,
                        PayBand_Name, 
                        PayScale_AddedOn, 
                        PayScale_AddedBy, 
                        PayScale_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = PayScale_AddedOn, 
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = PayScale_ModifiedOn
                      from tbl_PayScale
                      left join tbl_PayBand on PayBand_Id = PayScale_PayBandId 
                      left join tbl_PersonDetail on Person_Id = PayScale_AddedBy
                      left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = PayScale_ModifiedBy
                      where PayScale_Status = 1 PayBand_IdCond order by PayScale_Name";
        if (PayBand_Id > 0)
        {
            strQuery = strQuery.Replace("PayBand_IdCond", "and PayScale_PayBandId = '" + PayBand_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("PayBand_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet Edit_tbl_PayScale(string PayScale_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" select 
                        PayScale_Id,
                        PayScale_Name,
                        PayScale_ValueFrom,
                        PayScale_ValueTill,
                        PayScale_PayBandId,
                        PayScale_GradePay,
                        PayScale_AddedOn,
                        PayScale_AddedBy,
                        PayScale_ModifiedOn,
                        PayScale_ModifiedBy,
                        PayScale_Status 
                    where PayScale_Status=1 and PayScale_Id ='" + PayScale_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_PayScale(tbl_PayScale obj_tbl_PayScale, int PayScale_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (PayScale_Id == 0)
                {
                    Insert_tbl_PayScale(obj_tbl_PayScale, trans, cn);
                }
                else
                {
                    obj_tbl_PayScale.PayScale_Id = PayScale_Id;
                    Update_tbl_PayScale(obj_tbl_PayScale, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }



    private string Insert_tbl_PayScale(tbl_PayScale obj_tbl_PayScale, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PayScale( [PayScale_AddedBy],[PayScale_AddedOn],[PayScale_Name],[PayScale_Status], PayScale_ValueFrom, PayScale_ValueTill, PayScale_GradePay, PayScale_PayBandId) values('" + obj_tbl_PayScale.PayScale_AddedBy + "', getdate(), N'" + obj_tbl_PayScale.PayScale_Name + "','" + obj_tbl_PayScale.PayScale_Status + "', '" + obj_tbl_PayScale.PayScale_ValueFrom + "', '" + obj_tbl_PayScale.PayScale_ValueTill + "', '" + obj_tbl_PayScale.PayScale_GradePay + "', '" + obj_tbl_PayScale.PayScale_PayBandId + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_PayScale(tbl_PayScale obj_tbl_PayScale, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PayScale set  PayScale_Name = N'" + obj_tbl_PayScale.PayScale_Name + "', PayScale_PayBandId = N'" + obj_tbl_PayScale.PayScale_PayBandId + "', PayScale_ValueFrom = '" + obj_tbl_PayScale.PayScale_ValueFrom + "', PayScale_ValueTill = '" + obj_tbl_PayScale.PayScale_ValueTill + "', PayScale_GradePay = '" + obj_tbl_PayScale.PayScale_GradePay + "', PayScale_ModifiedOn = getdate(), PayScale_ModifiedBy = '" + obj_tbl_PayScale.PayScale_AddedBy + "' where PayScale_Id = '" + obj_tbl_PayScale.PayScale_Id + "' and PayScale_Status = '" + obj_tbl_PayScale.PayScale_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_PayScale(int PayScale_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_PayScale set   PayScale_Status = 0,PayScale_ModifiedBy='" + person_Id + "',PayScale_ModifiedOn=getdate() where PayScale_Id = '" + PayScale_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master PensionReason
    public DataSet get_tbl_PensionReason()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        PensionReason_Id, 
                        PensionReason_Name, 
                        PensionReason_AddedOn, 
                        PensionReason_AddedBy, 
                        PensionReason_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = PensionReason_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=PensionReason_ModifiedOn 
                    from tbl_PensionReason 
                    left join tbl_PersonDetail on Person_Id = PensionReason_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1  on tbl_PersonDetail1.Person_Id = PensionReason_ModifiedBy 
                    where PensionReason_Status = 1 
                    order by PensionReason_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_PensionReason(tbl_PensionReason obj_tbl_PensionReason, int PensionReason_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyPensionReason(obj_tbl_PensionReason.PensionReason_Name, PensionReason_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (PensionReason_Id == 0)
                {
                    Insert_tbl_PensionReason(obj_tbl_PensionReason, trans, cn);
                }
                else
                {
                    obj_tbl_PensionReason.PensionReason_Id = PensionReason_Id;
                    Update_tbl_PensionReason(obj_tbl_PensionReason, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyPensionReason(string PensionReasonName, string PensionReason_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_PensionReason  where PensionReason_Status = 1 and  PensionReason_Name = '" + PensionReasonName + "' ";
        if (PensionReason_Id != "0")
        {
            strQuery += " AND PensionReason_Id  <> '" + PensionReason_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_PensionReason(tbl_PensionReason obj_tbl_PensionReason, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_PensionReason( [PensionReason_AddedBy],[PensionReason_AddedOn],[PensionReason_Name],[PensionReason_Status] ) values('" + obj_tbl_PensionReason.PensionReason_AddedBy + "', getdate(), N'" + obj_tbl_PensionReason.PensionReason_Name + "','" + obj_tbl_PensionReason.PensionReason_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_PensionReason(tbl_PensionReason obj_tbl_PensionReason, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_PensionReason set  PensionReason_Name = N'" + obj_tbl_PensionReason.PensionReason_Name + "',PensionReason_ModifiedOn = getDate(),PensionReason_ModifiedBy = '" + obj_tbl_PensionReason.PensionReason_AddedBy + "' where PensionReason_Id = '" + obj_tbl_PensionReason.PensionReason_Id + "' and PensionReason_Status = '" + obj_tbl_PensionReason.PensionReason_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_PensionReason(int PensionReason_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_PensionReason set   PensionReason_Status = 0,PensionReason_ModifiedBy='" + person_Id + "',PensionReason_ModifiedOn=getdate() where PensionReason_Id = '" + PensionReason_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master ArreareNature
    public DataSet get_tbl_ArreareNature()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        ArreareNature_Id, 
                        ArreareNature_Name, 
                        ArreareNature_AddedOn, 
                        ArreareNature_AddedBy, 
                        ArreareNature_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = ArreareNature_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=ArreareNature_ModifiedOn 
                    from tbl_ArreareNature 
                    left join tbl_PersonDetail on Person_Id = ArreareNature_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1  on tbl_PersonDetail1.Person_Id = ArreareNature_ModifiedBy 
                    where ArreareNature_Status = 1 
                    order by ArreareNature_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_ArreareNature(tbl_ArreareNature obj_tbl_ArreareNature, int ArreareNature_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyArreareNature(obj_tbl_ArreareNature.ArreareNature_Name, ArreareNature_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (ArreareNature_Id == 0)
                {
                    Insert_tbl_ArreareNature(obj_tbl_ArreareNature, trans, cn);
                }
                else
                {
                    obj_tbl_ArreareNature.ArreareNature_Id = ArreareNature_Id;
                    Update_tbl_ArreareNature(obj_tbl_ArreareNature, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyArreareNature(string ArreareNatureName, string ArreareNature_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_ArreareNature  where ArreareNature_Status = 1 and  ArreareNature_Name = '" + ArreareNatureName + "' ";
        if (ArreareNature_Id != "0")
        {
            strQuery += " AND ArreareNature_Id  <> '" + ArreareNature_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_ArreareNature(tbl_ArreareNature obj_tbl_ArreareNature, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_ArreareNature( [ArreareNature_AddedBy],[ArreareNature_AddedOn],[ArreareNature_Name],[ArreareNature_Status] ) values('" + obj_tbl_ArreareNature.ArreareNature_AddedBy + "', getdate(), N'" + obj_tbl_ArreareNature.ArreareNature_Name + "','" + obj_tbl_ArreareNature.ArreareNature_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_ArreareNature(tbl_ArreareNature obj_tbl_ArreareNature, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_ArreareNature set  ArreareNature_Name = N'" +
            obj_tbl_ArreareNature.ArreareNature_Name + "',ArreareNature_ModifiedOn = getDate(),ArreareNature_ModifiedBy = '" + obj_tbl_ArreareNature.ArreareNature_AddedBy + "' where ArreareNature_Id = '" +
            obj_tbl_ArreareNature.ArreareNature_Id + "' and ArreareNature_Status = '" + obj_tbl_ArreareNature.ArreareNature_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_ArreareNature(int ArreareNature_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_ArreareNature set   ArreareNature_Status = 0,ArreareNature_ModifiedBy='" + person_Id + "',ArreareNature_ModifiedOn=getdate() where ArreareNature_Id = '" + ArreareNature_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Basic Pension Rate
    public DataSet get_tbl_Basic_Pension_Rate()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        Basic_Pension_Rate_Id,
                        Basic_Pension_Rate,
                        Basic_Pension_Rate_EffectiveBy = convert(char(10), Basic_Pension_Rate_EffectiveBy, 103),
                        Basic_Pension_Rate_AddedOn,
                        Basic_Pension_Rate_AddedBy,
                        Basic_Pension_Rate_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=Basic_Pension_Rate_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=Basic_Pension_Rate_ModifiedOn 
                    from tbl_Basic_Pension_Rate 
                    left join tbl_PersonDetail on Person_Id=Basic_Pension_Rate_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Basic_Pension_Rate_ModifiedBy 
                    where Basic_Pension_Rate_Status=1 order by Basic_Pension_Rate ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_Basic_Pension_Rate(tbl_Basic_Pension_Rate obj_tbl_Basic_Pension_Rate, int Basic_Pension_Rate_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyBasic_Pension_Rate(obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate, Basic_Pension_Rate_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Basic_Pension_Rate_Id == 0)
                {
                    Insert_tbl_Basic_Pension_Rate(obj_tbl_Basic_Pension_Rate, trans, cn);
                }
                else
                {
                    obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_Id = Basic_Pension_Rate_Id;
                    Update_tbl_Basic_Pension_Rate(obj_tbl_Basic_Pension_Rate, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyBasic_Pension_Rate(string Basic_Pension_Rate, string Basic_Pension_Rate_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Basic_Pension_Rate  where Basic_Pension_Rate_Status = 1 and  Basic_Pension_Rate = '" + Basic_Pension_Rate + "' ";
        if (Basic_Pension_Rate_Id != "0")
        {
            strQuery += " AND Basic_Pension_Rate_Id  <> '" + Basic_Pension_Rate_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Basic_Pension_Rate(tbl_Basic_Pension_Rate obj_tbl_Basic_Pension_Rate, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Basic_Pension_Rate( [Basic_Pension_Rate_AddedBy],[Basic_Pension_Rate_AddedOn],[Basic_Pension_Rate],[Basic_Pension_Rate_EffectiveBy],[Basic_Pension_Rate_Status] ) values('" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_AddedBy + "', getdate(), N'" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate + "', convert(date, '" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_EffectiveBy + "', 103),'" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Basic_Pension_Rate(tbl_Basic_Pension_Rate obj_tbl_Basic_Pension_Rate, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Basic_Pension_Rate set  Basic_Pension_Rate = N'" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate + "',Basic_Pension_Rate_EffectiveBy= convert(date, '" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_EffectiveBy + "', 103),Basic_Pension_Rate_ModifiedOn = getDate(),Basic_Pension_Rate_ModifiedBy = '" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_AddedBy + "' where Basic_Pension_Rate_Id = '" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_Id + "' and Basic_Pension_Rate_Status = '" + obj_tbl_Basic_Pension_Rate.Basic_Pension_Rate_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Basic_Pension_Rate(int Basic_Pension_Rate_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Basic_Pension_Rate set   Basic_Pension_Rate_Status = 0,Basic_Pension_Rate_ModifiedBy='" + person_Id + "',Basic_Pension_Rate_ModifiedOn=getdate() where Basic_Pension_Rate_Id = '" + Basic_Pension_Rate_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region MOM Details
    public DataSet get_tbl_MOMDetails(int MeetingType_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select
	                    MOMDetails_Id,
	                    MOMDetails_Title,
	                    MOMDetails_URL,
                        MOMDetails_Description,
                        MOMDetails_Date = convert(char(10), MOMDetails_Date, 103),
	                    MOMDetails_Status, 
                        Created_By = tbl_PersonDetail.Person_Name, 
                        MOMDetails_AddedOn, 
                        MOMDetails_TypeId, 
                        MOMType_Name
                    from tbl_MOMDetails
                    left join tbl_PersonDetail on Person_Id=MOMDetails_AddedBy  
                    left join tbl_MOMType on MOMType_Id = MOMDetails_TypeId
                    where MOMDetails_Status = 1 MeetingType_IdCond 
                    order by MOMDetails_Title";
        if (MeetingType_Id > 0)
        {
            strQuery = strQuery.Replace("MeetingType_IdCond", "and MOMDetails_TypeId = '" + MeetingType_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("MeetingType_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_MOMDetails(tbl_MOMDetails obj_tbl_MOMDetails)
    {
        bool flag = false;
        string strQuery = "";

        string fileName = DateTime.Now.Ticks.ToString("x") + obj_tbl_MOMDetails.MOMDetails_URL;
        string filePath = "\\Downloads\\MOM\\";
        if (!Directory.Exists(Server.MapPath(".") + filePath))
        {
            Directory.CreateDirectory(Server.MapPath(".") + filePath);
        }
        if (obj_tbl_MOMDetails.MOMDetails_URL_Bytes != null && obj_tbl_MOMDetails.MOMDetails_URL_Bytes.Length > 0)
        {
            File.WriteAllBytes(Server.MapPath(".") + filePath + fileName, obj_tbl_MOMDetails.MOMDetails_URL_Bytes);
        }
        obj_tbl_MOMDetails.MOMDetails_URL = filePath + fileName;

        strQuery = " set dateformat dmy; insert into tbl_MOMDetails ([MOMDetails_Date], [MOMDetails_AddedBy],[MOMDetails_AddedOn],[MOMDetails_Description],[MOMDetails_URL],[MOMDetails_Status],[MOMDetails_Title], [MOMDetails_TypeId]) values (convert(date, '" + obj_tbl_MOMDetails.MOMDetails_Date + "', 103), '" + obj_tbl_MOMDetails.MOMDetails_AddedBy + "', getdate(), N'" + obj_tbl_MOMDetails.MOMDetails_Description + "','" + obj_tbl_MOMDetails.MOMDetails_URL + "','" + obj_tbl_MOMDetails.MOMDetails_Status + "','" + obj_tbl_MOMDetails.MOMDetails_Title + "', '" + obj_tbl_MOMDetails.MOMDetails_TypeId + "');Select @@Identity";
        try
        {
            ExecuteSelectQuery(strQuery);
            flag = true; ;
        }
        catch
        {
            flag = false;
        }
        return flag;
    }

    public bool Delete_tbl_MOMDetails(int MOMDetails_Id, int person_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            string sql = "";
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                sql = "update tbl_MOMDetails set MOMDetails_Status = 0, MOMDetails_ModifiedBy = '" + person_Id + "', MOMDetails_ModifiedOn = getdate() where MOMDetails_Id = '" + MOMDetails_Id + "' and MOMDetails_Status = 1";
                ExecuteSelectQuerywithTransaction(cn, sql, trans);

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region Master MOMType
    public DataSet get_tbl_MOMType()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        MOMType_Id, 
                        MOMType_Name, 
                        MOMType_AddedOn, 
                        MOMType_AddedBy, 
                        MOMType_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = MOMType_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = MOMType_ModifiedOn 
                  from tbl_MOMType
                  left join tbl_PersonDetail on Person_Id = MOMType_AddedBy
                  left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = MOMType_ModifiedBy
                  where MOMType_Status = 1 order by MOMType_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet Edit_tbl_MOMType(string MOMType_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " select MOMType_Id,MOMType_Name from tbl_MOMType where MOMType_Status=1 and MOMType_Id='" + MOMType_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_MOMType(tbl_MOMType obj_tbl_MOMType, int MOMType_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyMOMType(obj_tbl_MOMType.MOMType_Name, MOMType_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (MOMType_Id == 0)
                {
                    Insert_tbl_MOMType(obj_tbl_MOMType, trans, cn);
                }
                else
                {
                    obj_tbl_MOMType.MOMType_Id = MOMType_Id;
                    Update_tbl_MOMType(obj_tbl_MOMType, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyMOMType(string MOMTypeName, string MOMType_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_MOMType  where MOMType_Status = 1 and  MOMType_Name = '" + MOMTypeName + "' ";
        if (MOMType_Id != "0")
        {
            strQuery += " AND MOMType_Id  <> '" + MOMType_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_MOMType(tbl_MOMType obj_tbl_MOMType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_MOMType( [MOMType_AddedBy],[MOMType_AddedOn],[MOMType_Name],[MOMType_Status] ) values('" + obj_tbl_MOMType.MOMType_AddedBy + "', getdate(), N'" + obj_tbl_MOMType.MOMType_Name + "','" + obj_tbl_MOMType.MOMType_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_MOMType(tbl_MOMType obj_tbl_MOMType, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_MOMType set  MOMType_Name = N'" + obj_tbl_MOMType.MOMType_Name + "',MOMType_ModifiedOn=getdate(),MOMType_ModifiedBy = '" + obj_tbl_MOMType.MOMType_AddedBy + "' where MOMType_Id = '" + obj_tbl_MOMType.MOMType_Id + "' and MOMType_Status = '" + obj_tbl_MOMType.MOMType_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_MOMType(int MOMType_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_MOMType set   MOMType_Status = 0 where MOMType_Id = '" + MOMType_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Field Visit L1
    public DataSet get_tbl_FeildVisitL1()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        FeildVisitL1_Id, 
                        FeildVisitL1_Name, 
                        FeildVisitL1_AddedOn, 
                        FeildVisitL1_AddedBy, 
                        FeildVisitL1_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = FeildVisitL1_AddedOn, 
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = FeildVisitL1_ModifiedOn
                      from tbl_FeildVisitL1
                      left join tbl_PersonDetail on Person_Id = FeildVisitL1_AddedBy
                      left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = FeildVisitL1_ModifiedBy
                      where FeildVisitL1_Status = 1 order by FeildVisitL1_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet Edit_tbl_FeildVisitL1(string FeildVisitL1_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " select FeildVisitL1_Id,FeildVisitL1_Name from tbl_FeildVisitL1 where FeildVisitL1_Status=1 and FeildVisitL1_Id ='" + FeildVisitL1_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_FeildVisitL1(tbl_FeildVisitL1 obj_tbl_FeildVisitL1, int FeildVisitL1_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyFeildVisitL1(obj_tbl_FeildVisitL1.FeildVisitL1_Name, FeildVisitL1_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }

                if (FeildVisitL1_Id == 0)
                {
                    Insert_tbl_FeildVisitL1(obj_tbl_FeildVisitL1, trans, cn);
                }
                else
                {
                    obj_tbl_FeildVisitL1.FeildVisitL1_Id = FeildVisitL1_Id;
                    Update_tbl_FeildVisitL1(obj_tbl_FeildVisitL1, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyFeildVisitL1(string FeildVisitL1Name, string FeildVisitL1_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_FeildVisitL1  where FeildVisitL1_Status = 1 and  FeildVisitL1_Name = '" + FeildVisitL1Name + "' ";
        if (FeildVisitL1_Id != "0")
        {
            strQuery += " AND FeildVisitL1_Id  <> '" + FeildVisitL1_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_FeildVisitL1(tbl_FeildVisitL1 obj_tbl_FeildVisitL1, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_FeildVisitL1( [FeildVisitL1_AddedBy],[FeildVisitL1_AddedOn],[FeildVisitL1_Name],[FeildVisitL1_Status]) values('" + obj_tbl_FeildVisitL1.FeildVisitL1_AddedBy + "', getdate(), N'" + obj_tbl_FeildVisitL1.FeildVisitL1_Name + "','" + obj_tbl_FeildVisitL1.FeildVisitL1_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_FeildVisitL1(tbl_FeildVisitL1 obj_tbl_FeildVisitL1, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update tbl_FeildVisitL1 set  FeildVisitL1_Name = N'" + obj_tbl_FeildVisitL1.FeildVisitL1_Name + "', FeildVisitL1_ModifiedOn = getdate(), FeildVisitL1_ModifiedBy = '" + obj_tbl_FeildVisitL1.FeildVisitL1_AddedBy + "' where FeildVisitL1_Id = '" + obj_tbl_FeildVisitL1.FeildVisitL1_Id + "' and FeildVisitL1_Status = '" + obj_tbl_FeildVisitL1.FeildVisitL1_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_FeildVisitL1(int FeildVisitL1_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_FeildVisitL1 set FeildVisitL1_Status = 0 where FeildVisitL1_Id = '" + FeildVisitL1_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master FeildVisitL2
    public DataSet get_tbl_FeildVisitL2(int FeildVisitL1_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        FeildVisitL2_Id, 
                        FeildVisitL2_L1Id, 
                        FeildVisitL1_Name, 
                        FeildVisitL2_Name, 
                        FeildVisitL2_AddedOn, 
                        FeildVisitL2_AddedBy, 
                        FeildVisitL2_ModifiedOn, 
                        FeildVisitL2_ModifiedBy, 
                        FeildVisitL2_Status 
                    from tbl_FeildVisitL2
                    join tbl_FeildVisitL1 on FeildVisitL1_Id = FeildVisitL2_L1Id
                    where FeildVisitL2_Status = 1";
        if (FeildVisitL1_Id != 0)
        {
            strQuery += " and FeildVisitL2_L1Id = '" + FeildVisitL1_Id + "'";
        }
        strQuery += " order by FeildVisitL1_Name, FeildVisitL2_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_FeildVisitL2(tbl_FeildVisitL2 obj_tbl_FeildVisitL2, int FeildVisitL2_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyFeildVisitL2(obj_tbl_FeildVisitL2.FeildVisitL2_Name, FeildVisitL2_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (FeildVisitL2_Id == 0)
                {
                    Insert_tbl_FeildVisitL2(obj_tbl_FeildVisitL2, trans, cn);
                }
                else
                {
                    obj_tbl_FeildVisitL2.FeildVisitL2_Id = FeildVisitL2_Id;
                    Update_tbl_FeildVisitL2(obj_tbl_FeildVisitL2, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyFeildVisitL2(string FeildVisitL2_Name, string FeildVisitL2Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_FeildVisitL2  where FeildVisitL2_Status=1 and  FeildVisitL2_Name= '" + FeildVisitL2_Name + "' ";
        if (FeildVisitL2Id != "0")
        {
            strQuery += " AND FeildVisitL2_Id <> '" + FeildVisitL2Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_FeildVisitL2(tbl_FeildVisitL2 obj_tbl_Post, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_FeildVisitL2 (FeildVisitL2_Name, FeildVisitL2_L1Id, FeildVisitL2_AddedBy, FeildVisitL2_AddedOn, FeildVisitL2_Status) values ('" + obj_tbl_Post.FeildVisitL2_Name + "', '" + obj_tbl_Post.FeildVisitL2_L1Id + "', '" + obj_tbl_Post.FeildVisitL2_AddedBy + "',getdate(),'" + obj_tbl_Post.FeildVisitL2_Status + "');Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_FeildVisitL2(tbl_FeildVisitL2 obj_tbl_Post, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_FeildVisitL2 set   FeildVisitL2_Name = '" + obj_tbl_Post.FeildVisitL2_Name + "', FeildVisitL2_L1Id = '" + obj_tbl_Post.FeildVisitL2_L1Id + "' where FeildVisitL2_Id = '" + obj_tbl_Post.FeildVisitL2_Id + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Report SVG Map Data
    public DataSet get_SVG_Map_Data(string fromDate, string tillDate, int Project_Id, int Zone_Id, int FinancialYear_Id, string DataMode)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        string _Step_Cond = "";
        if (DataMode == "1")
        {
            _Step_Cond = "@step = (max(convert(decimal(18, 3), tDPR.Total_Work)) - min(convert(decimal(18, 3), tDPR.Total_Work))) / 10";
        }
        if (DataMode == "2")
        {
            _Step_Cond = "@step = (max(convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated)) - min(convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated))) / 10";
        }
        if (DataMode == "3")
        {
            _Step_Cond = "@step = (max(convert(decimal(18, 3), tStatement.TransAmount_C)) - min(convert(decimal(18, 3), tStatement.TransAmount_C))) / 10";
        }
        strQuery = @"set dateformat dmy; 

                    declare @step decimal(18,2) = 0;
                    declare @stepF int = 0;

                    select 
	                    _Step_Cond_Replacement
                    from M_Jurisdiction
                    left join 
                    (
	                    select 
		                    ProjectWork_DistrictId, 
		                    count(*) Total_Work,
		                    count(distinct ProjectWork_DivisionId) Total_ULB, 
		                    sum(isnull(ProjectWorkPkg_AgreementAmount, 0)) ProjectDPR_BudgetAllocated 
	                    from tbl_ProjectWorkPkg 
                        join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id  
						join tbl_Division on Division_Id = ProjectWork_DivisionId
						join tbl_Circle on Circle_Id = Division_CircleId
	                    where ProjectWorkPkg_Status = 1 
	                    group by ProjectWork_DistrictId
                    ) tDPR on tDPR.ProjectWork_DistrictId = M_Jurisdiction_Id 
                    left join 
                    (
	                    select 
		                    ProjectWork_DistrictId, 
		                    TransAmount_C = sum(case when FinancialTrans_TransType = 'C' then (isnull(FinancialTrans_TransAmount, 0) / 100000) else 0 end), 
		                    TransAmount_D = sum(case when FinancialTrans_TransType = 'D' then (isnull(FinancialTrans_TransAmount, 0) / 100000) else 0 end) 
	                    from tbl_FinancialTrans 
	                    join tbl_ProjectWorkPkg on FinancialTrans_Package_Id = ProjectWorkPkg_Id 
						join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id  
						join tbl_Division on Division_Id = ProjectWork_DivisionId
						join tbl_Circle on Circle_Id = Division_CircleId
	                    where FinancialTrans_Status = 1 
	                    group by ProjectWork_DistrictId
                    ) tStatement on tStatement.ProjectWork_DistrictId = M_Jurisdiction_Id
                    where M_Level_Id = 3 and Is_Active = 1; 

                    set @stepF = convert(int, ROUND(@step, 0))
                    set @stepF = ROUND(@stepF, (len(@stepF) -1) * -1)

                    ; with cte as (
	                    select 
		                    M_Jurisdiction_Id,
		                    Jurisdiction_Name_Eng,
		                    tDPR.Total_ULB, 
		                    tDPR.Total_Work, 
		                    ProjectDPR_BudgetAllocated = convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated),
		                    Fund_Released = convert(decimal(18, 3), isnull(tStatement.TransAmount_C, 0) / 100000), 
		                    Expenditure = convert(decimal(18, 3), isnull(tStatement.TransAmount_D, 0) / 100000), 
		                    Balance = convert(decimal(18, 3), ((isnull(tStatement.TransAmount_C, 0) - isnull(tStatement.TransAmount_D, 0)) / 100000)), 
		                    SVGMapping_Name, 
		                    Step_Id = case when (convert(int, convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated) / @stepF) + 1) > 10 then 10 else (convert(int, convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated) / @stepF) + 1) end
	                    from M_Jurisdiction
	                    left join 
	                    (
		                    select 
			                    ProjectWork_DistrictId, 
			                    count(*) Total_Work,
			                    count(distinct ProjectWork_DivisionId) Total_ULB, 
			                    sum(isnull(ProjectWorkPkg_AgreementAmount, 0)) ProjectDPR_BudgetAllocated 
		                    from tbl_ProjectWorkPkg 
							join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id  
							join tbl_Division on Division_Id = ProjectWork_DivisionId
							join tbl_Circle on Circle_Id = Division_CircleId
							where ProjectWorkPkg_Status = 1
		                    group by ProjectWork_DistrictId
	                    ) tDPR on tDPR.ProjectWork_DistrictId = M_Jurisdiction_Id 
	                    left join 
	                    (
		                    select 
			                    ProjectWork_DistrictId, 
			                    TransAmount_C = sum(case when FinancialTrans_TransType = 'C' then isnull(FinancialTrans_TransAmount, 0) else 0 end), 
			                    TransAmount_D = sum(case when FinancialTrans_TransType = 'D' then isnull(FinancialTrans_TransAmount, 0) else 0 end) 
		                    from tbl_FinancialTrans 
		                    join tbl_ProjectWorkPkg on FinancialTrans_Package_Id = ProjectWorkPkg_Id 
							join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id  
							join tbl_Division on Division_Id = ProjectWork_DivisionId
							join tbl_Circle on Circle_Id = Division_CircleId
		                    where FinancialTrans_Status = 1 
		                    group by ProjectWork_DistrictId
	                    ) tStatement on tStatement.ProjectWork_DistrictId = M_Jurisdiction_Id
	                    join tbl_SVGMapping on SVGMapping_DistrictId = M_Jurisdiction_Id and SVGMapping_Status = 1
	                    where M_Level_Id = 3 and Is_Active = 1 
                    )
                    select *, ColorCodes_Code from cte 
                    join tbl_ColorCodes on ColorCodes_Id = Step_Id
                    order by cte.ProjectDPR_BudgetAllocated; ";

        strQuery += "select * from tbl_SVGMapping where SVGMapping_Status = 1 and SVGMapping_DistrictId = 0;";

        strQuery += "select *, convert(int, @step * (ColorCodes_Id -1)) From_Range, convert(int, @step * ColorCodes_Id) Till_Range from tbl_ColorCodes;";

        strQuery = strQuery.Replace("_Step_Cond_Replacement", _Step_Cond);

        if (FinancialYear_Id > 0)
        {
            strQuery = strQuery.Replace("FinancialYear_Id1", "and ProjectWork_FinancialYear_Id = " + FinancialYear_Id.ToString());
            strQuery = strQuery.Replace("FinancialYear_Id2", " and FinancialTrans_FinancialYear_Id = " + FinancialYear_Id + "");
        }
        else
        {
            strQuery = strQuery.Replace("FinancialYear_Id1", "");
            strQuery = strQuery.Replace("FinancialYear_Id2", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region PMS

    public DataSet get_Circle_Wise_Details(int Project_Id, int Zone_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    tbl_Circle.Circle_Id,
	                    Circle_Name,
	                    tDPR.Total_Division, 
	                    tDPR.Total_Work, 
	                    ProjectDPR_BudgetAllocated = convert(decimal(18, 3), tDPR.ProjectDPR_BudgetAllocated),
	                    Fund_Released = convert(decimal(18, 3), isnull(tStatement.TransAmount_C, 0)), 
	                    Expenditure = convert(decimal(18, 3), isnull(tStatement.TransAmount_D, 0)), 
                        Balance = convert(decimal(18, 3), ((isnull(tStatement.TransAmount_C, 0) - isnull(tStatement.TransAmount_D, 0))))
                    from tbl_Circle
                    left join 
                    (
	                    select 
	                        Circle_Id, 
	                        count(distinct ProjectWork_Id) Total_Work,
		                    count(distinct ProjectWork_DivisionId) Total_Division, 
		                    sum(isnull(ProjectWorkPkg_AgreementAmount, 0)) ProjectDPR_BudgetAllocated 
                        from tbl_ProjectWorkPkg 
                        join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                        join tbl_Division on Division_Id = ProjectWork_DivisionId
                        join tbl_Circle on Circle_Id = Division_CircleId
	                    where ProjectWorkPkg_Status = 1 Project_IdCond
	                    group by Circle_Id
                    ) tDPR on tDPR.Circle_Id = tbl_Circle.Circle_Id 
                    left join 
                    (
	                    select 
		                    Circle_Id, 
		                    TransAmount_C = sum(case when FinancialTrans_TransType = 'C' then isnull(FinancialTrans_TransAmount, 0) else 0 end), 
		                    TransAmount_D = sum(case when FinancialTrans_TransType = 'D' then isnull(FinancialTrans_TransAmount, 0) else 0 end) 
	                    from tbl_FinancialTrans 
                        join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = FinancialTrans_Package_Id and ProjectWorkPkg_Status = 1
						join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id  
						join tbl_Division on Division_Id = ProjectWork_DivisionId
						join tbl_Circle on Circle_Id = Division_CircleId
                        where 1=1 Project_IdCond
	                    group by Circle_Id
                    ) tStatement on tStatement.Circle_Id = tbl_Circle.Circle_Id
                    where Circle_Status = 1 Zone_IdCond 
                    order by Circle_Name";

        if (Project_Id != 0)
        {
            strQuery = strQuery.Replace("Project_IdCond", "and ProjectWork_Project_Id = " + Project_Id.ToString());
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", "and tbl_Circle.Circle_ZoneId = " + Zone_Id.ToString());
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectDPR_Details(int ProjectWorkPkg_Id)
    {
        string SanctionedCost = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
                        distinct
                        Project_Name,
	                    ProjectDPR_Id,
	                    ProjectDPR_Project_Id,
	                    ProjectWorkPkg_Id,
						ProjectWorkPkg_Work_Id,
                        ProjectWorkPkg_Code, 
						ProjectWorkPkg_Name,
                        ProjectWorkPkg_Name_Code = isnull(ProjectWorkPkg_Code, '') + ' - ' + ProjectWorkPkg_Name,
						ProjectWorkPkg_AgreementAmount,
						ProjectWorkPkg_Agreement_Date = convert(char(10), ProjectWorkPkg_Agreement_Date, 103),
                        ProjectWorkPkg_Due_Date = convert(char(10), ProjectWorkPkg_Due_Date, 103), 
                        ProjectWorkPkg_Start_Date = convert(char(10), ProjectWorkPkg_Start_Date, 103), 
						ProjectWorkPkg_Agreement_No,
						Project_Name, 
                        ProjectWork_ProjectCode,
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DistrictId, 
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId,
	                    ProjectDPR_DPRPDFPath,
	                    ProjectDPR_DocumentDesignPath,
	                    ProjectDPR_IsVerified,
	                    ProjectDPR_BudgetAllocated = convert(decimal(18,2), ProjectDPR_BudgetAllocated / 100000),
	                    ProjectDPR_ProjectWork_Id,
	                    ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
	                    ProjectWork_Id,
	                    ProjectWork_Project_Id,
	                    ProjectWork_GO_Path,
	                    ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),
	                    ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103),
	                    ProjectWork_GO_No,
	                    Vendor_Name = tbl_ProjectPkgTenderInfo.Person_Name, 
	                    tbl_ProjectPkgTenderInfo.ProjectPkgTenderInfo_Id, 
	                    Total_Release = case when isnull(tStatement.TransAmount_C, 0) > 0 then convert(decimal(18,2), isnull(tStatement.TransAmount_C, 0) / 100000) else 0 end, 
	                    Total_Expenditure = case when isnull(tStatement.TransAmount_D, 0) > 0 then convert(decimal(18,2), isnull(tStatement.TransAmount_D, 0) / 100000) else 0 end, 
	                    Total_Available = case when isnull(tStatement.TransAmount_C, 0) - isnull(tStatement.TransAmount_D, 0) > 0 then convert(decimal(18,2), (isnull(tStatement.TransAmount_C, 0) - isnull(tStatement.TransAmount_D, 0)) / 100000) else 0 end
                    from tbl_ProjectWorkPkg
					join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                    join tbl_ProjectDPR on ProjectDPR_ProjectWorkPkg_Id = ProjectWorkPkg_Id 
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id 
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join (select ROW_NUMBER() over (partition by ProjectPkgTenderInfo_ProjectPkg_Id, ProjectPkgTenderInfo_ProjectWork_Id order by ProjectPkgTenderInfo_Id desc) rrrT, ProjectPkgTenderInfo_ProjectPkg_Id,ProjectPkgTenderInfo_Id, ProjectPkgTenderInfo_ProjectWork_Id, ProjectPkgTenderInfo_VendorPersonId, Person_Name from tbl_ProjectPkgTenderInfo join tbl_PersonDetail on Person_Id = ProjectPkgTenderInfo_VendorPersonId) tbl_ProjectPkgTenderInfo on tbl_ProjectPkgTenderInfo.ProjectPkgTenderInfo_ProjectPkg_Id = ProjectWorkPkg_Id and  tbl_ProjectPkgTenderInfo.rrrT = 1
                    left join (select  FinancialTrans_Package_Id, FinancialTrans_Work_Id, TransAmount_C = sum(case when FinancialTrans_TransType = 'C' then FinancialTrans_TransAmount else 0 end), TransAmount_D = sum(case when FinancialTrans_TransType = 'D' then FinancialTrans_TransAmount else 0 end) from tbl_FinancialTrans where FinancialTrans_Status = 1 group by FinancialTrans_Package_Id, FinancialTrans_Work_Id) tStatement on tStatement.FinancialTrans_Package_Id = ProjectWorkPkg_Id 
                    where ProjectDPR_Status = 1 and ProjectWorkPkg_Id = ProjectDPR_IdCond";
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        strQuery += Environment.NewLine;
        strQuery += @"select 
                        FinancialTrans_Id,
                        FinancialTrans_Date = convert(char(10), FinancialTrans_Date, 103),
	                    FinancialTrans_EntryType,
	                    FinancialTrans_Comments,
	                    FinancialTrans_FilePath1,
	                    FinancialTrans_GO_Date = case when FinancialTrans_TransType = 'C' then convert(char(10), FinancialTrans_GO_Date, 103) else convert(char(10), FinancialTrans_Date, 103) end,
	                    FinancialTrans_GO_Number,
	                    TransAmount_C = convert(decimal(18,2), (isnull(case when FinancialTrans_TransType = 'C' then FinancialTrans_TransAmount else 0 end, 0) / 100000)), 
	                    TransAmount_D = convert(decimal(18,2), (isnull(case when FinancialTrans_TransType = 'D' then FinancialTrans_TransAmount else 0 end, 0) / 100000))
                    from tbl_FinancialTrans
                    where FinancialTrans_Status = 1 and FinancialTrans_Package_Id = ProjectDPR_IdCond
                    order by FinancialTrans_Id; ";

        strQuery += Environment.NewLine;
        strQuery += @"select 
	                    ProjectDPR_Id, 
						ProjectDPR_DPRPDFPath,
                        ProjectWork_GO_Path,
                        ProjectUC_Id,
                        ProjectUC_FilePath1, 
                        ProjectUC_FilePath2, 
                        ProjectUC_BudgetUtilized = convert(decimal(18,2), isnull(ProjectUC_BudgetUtilized, 0) / 100000), 
                        ProjectUC_Achivment, 
                        ProjectUC_PhysicalProgress,
                        ProjectDPR_PhysicalProgressTrackingType,
                        ProjectUC_Centage=convert(decimal(18,2), isnull(ProjectUC_Centage, 0) / 100000),
                        ProjectUC_Total_Allocated = convert(decimal(18, 3), ProjectUC_Total_Allocated / 100000),
	                    ProjectWork_GO_No,
	                    ProjectWork_GO_Date1 = convert(char(10), ProjectWork_GO_Date, 103), 
                        ProjectUC_SubmitionDate1 = convert(char(10), ProjectUC_SubmitionDate, 103),
                        ProjectUC_Latitude,
	                    ProjectUC_Longitude,
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DivisionId, 
						Division_CircleId
                    from tbl_ProjectUC 
					join tbl_ProjectDPR on ProjectDPR_ProjectWorkPkg_Id = ProjectUC_ProjectPkg_Id and ProjectUC_ProjectWork_Id=ProjectDPR_ProjectWork_Id
                    join tbl_ProjectWork on ProjectWork_Id = ProjectDPR_ProjectWork_Id and ProjectWork_Status = 1
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectUC_Status = 1 and ProjectUC_ProjectPkg_Id = ProjectDPR_IdCond 
                    Order by Zone_Name, Circle_Name, Division_Name ";

        strQuery += Environment.NewLine;
        strQuery += @"select 
	                    Person_Name,
	                    UserType_Desc_E,
	                    ProjectDPRSitePics_Id,
	                    ProjectDPRSitePics_ProjectDPR_Id,
	                    ProjectDPRSitePics_ProjectWork_Id,
	                    ProjectDPRSitePics_ReportSubmittedBy_PersonId,
	                    ProjectDPRSitePics_ReportSubmitted,
	                    ProjectDPRSitePics_SitePic_Path1,
	                    ProjectDPRSitePics_SitePic_Type = case when ProjectDPRSitePics_SitePic_Type = 'B' then 'Before' else 'After' end,
	                    ProjectDPRSitePics_AddedOn = convert(char(10), ProjectDPRSitePics_AddedOn, 103)
                    from tbl_ProjectDPRSitePics
                    join tbl_PersonDetail on Person_Id = ProjectDPRSitePics_ReportSubmittedBy_PersonId
                    join tbl_PersonJuridiction on Person_Id = PersonJuridiction_PersonId
                    left join tbl_UserType on UserType_Id = PersonJuridiction_UserTypeId
                    where ProjectDPRSitePics_Status = 1 and ProjectDPRSitePics_ProjectDPR_Id = ProjectDPR_IdCond ; ";

        strQuery += Environment.NewLine;
        strQuery += @"select 
	                    Person_Id,
	                    UserType_Desc_E, 
	                    Person_Name, 
	                    Person_Mobile1, 
	                    Person_Mobile2,
	                    Designation_DesignationName
                    from tbl_ProjectPKGInspectionInfo
                    join tbl_PersonDetail on Person_Id = ProjectPKGInspectionInfo_InspectionPersonId
                    join tbl_PersonJuridiction on PersonJuridiction_PersonId = ProjectPKGInspectionInfo_InspectionPersonId
                    left join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
                    join tbl_UserType on UserType_Id = PersonJuridiction_UserTypeId
                    where ProjectPKGInspectionInfo_Status = 1 and ProjectPKGInspectionInfo_ProjectPkg_Id = ProjectDPR_IdCond ; ";

        strQuery += Environment.NewLine;
        strQuery += @"select top 1 
                        ProjectPkgTenderInfo_Id,
                        ProjectPkgTenderInfo_ProjectPkg_Id,
                        ProjectPkgTenderInfo_ProjectWork_Id,
                        ProjectPkgTenderInfo_VendorPersonId,
                        ProjectDPRTenderInfo_TenderAmount = convert(decimal(18, 3), ProjectPkgTenderInfo_TenderAmount / 100000),
                        ProjectDPRTenderInfo_TenderDate = convert(char(10), ProjectPkgTenderInfo_TenderDate, 103),
                        ProjectPkgTenderInfo_Comments,
                        ProjectPkgTenderInfo_AddedOn,
                       ProjectPkgTenderInfo_AddedBy,
                        ProjectPkgTenderInfo_Status,
                        ProjectPkgTenderInfo_ModifiedBy,
                        ProjectPkgTenderInfo_ModifiedOn,
                        ProjectDPRTenderInfo_NITDate = convert(char(10), ProjectPkgTenderInfo_NITDate, 103),
                        ProjectPkgTenderInfo_TenderStatus, 
                        Vendor_Person_Name = isnull(Person_Name, '') + ', Mob: ' + ISNULL(Person_Mobile1, ''),
                       ProjectPkgTenderInfo_CompletionTime,
                        ProjectPkgTenderInfo_Centage,
                        ProjectDPRTenderInfo_WorkCostIn = convert(decimal(18, 3), ProjectPkgTenderInfo_WorkCostIn / 100000),
                        ProjectDPRTenderInfo_WorkCostOut = convert(decimal(18, 3), ProjectPkgTenderInfo_WorkCostOut / 100000),
                        ProjectPkgTenderInfo_GSTNotIncludeWorkCost,
                        ProjectDPRTenderInfo_PrebidMeetingDate = convert(char(10), ProjectPkgTenderInfo_PrebidMeetingDate, 103),
                        ProjectDPRTenderInfo_TenderOutDate = convert(char(10), ProjectPkgTenderInfo_TenderOutDate, 103),
                        ProjectDPRTenderInfo_TenderTechnicalDate = convert(char(10), ProjectPkgTenderInfo_TenderTechnicalDate, 103),
                        ProjectDPRTenderInfo_TenderFinancialDate = convert(char(10), ProjectPkgTenderInfo_TenderFinancialDate, 103),
                        ProjectDPRTenderInfo_ContractSignDate = convert(char(10), ProjectPkgTenderInfo_ContractSignDate, 103),
                        ProjectPkgTenderInfo_ContractBondNo
                    from tbl_ProjectPkgTenderInfo
                    join tbl_PersonDetail on Person_Id = ProjectPkgTenderInfo_VendorPersonId
                    where ProjectPkgTenderInfo_Status = 1 and ProjectPkgTenderInfo_ProjectPkg_Id = ProjectDPR_IdCond  order by ProjectPkgTenderInfo_Id desc; ";

        if (ProjectWorkPkg_Id != 0)
        {
            strQuery = strQuery.Replace("ProjectDPR_IdCond", ProjectWorkPkg_Id.ToString());
        }

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectDPR_UC_Report(int ProjectUC_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    District_Name = M_Jurisdiction.Jurisdiction_Name_Eng, 
	                    ULB_Name = M_Jurisdiction_NP.ULB_Name, 
	                    Project_Name, 
	                    ProjectWork_GO_No,
	                    ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
	                    ProjectUC_Id,
	                    ProjectUC_Achivment,
                        ProjectDPR_BudgetAllocated,
	                    ProjectUC_SubmitionDate = convert(char(10), ProjectUC_SubmitionDate, 103), 
	                    ProjectUC_BudgetUtilized,
	                    ProjectUC_Comments,
	                    ProjectUC_PhysicalProgress,
	                    ProjectUC_Total_Allocated, 
	                    ULB_Type
                    from tbl_ProjectUC 
                    left join tbl_ProjectDPR on ProjectDPR_Id = ProjectUC_ProjectDPR_Id  
                    join tbl_ProjectWork on ProjectWork_Id = ProjectUC_ProjectWork_Id
                    left join tbl_Project on ProjectDPR_Project_Id = Project_Id 
                    left join M_Jurisdiction on ProjectDPR_District_Jurisdiction_Id = M_Jurisdiction_Id 
                    left join tbl_ULB M_Jurisdiction_NP on M_Jurisdiction_NP.ULB_Id = tbl_ProjectDPR.ProjectDPR_NP_JurisdictionId
                    where ProjectUC_Id = " + ProjectUC_Id + "";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectDPR_UC_Questionire_Form(int ProjectUC_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectQuestionnaire_Name, 
	                    ProjectAnswer_Name = case when isnull(ProjectUC_Concent_Answer_Id, 0) = 0 then ProjectUC_Concent_Answer else ProjectAnswer_Name end
                    from  tbl_ProjectUC_Concent 
                    join tbl_ProjectQuestionnaire on ProjectQuestionnaire_Id = ProjectUC_Concent_Questionire_Id
                    left join tbl_ProjectAnswer on ProjectAnswer_Id = ProjectUC_Concent_Answer_Id
                    where ProjectUC_Concent_Status = 1 and ProjectUC_Concent_ProjectUC_Id = " + ProjectUC_Id + "";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_tbl_ProjectDPR_UC_PhysicalProgressComponentAndDeliverables_Form(int ProjectDPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"select 
                        PhysicalProgressComponent_Component,
                        Unit_Name,
                        ProjectUC_PhysicalProgress_PhysicalProgress 
                    from tbl_ProjectUC_PhysicalProgress
                    inner join tbl_PhysicalProgressComponent on PhysicalProgressComponent_Id=ProjectUC_PhysicalProgress_PhysicalProgressComponent_Id
                    left join tbl_Unit on Unit_Id=PhysicalProgressComponent_Unit_Id
                    where ProjectUC_PhysicalProgress_Status=1 and ProjectUC_PhysicalProgress_ProjectDPR_Id='" + ProjectDPR_Id + "'";

        strQuery += @"select 
                        Deliverables_Deliverables,
                        Unit_Name,
                        ProjectUC_Deliverables_Deliverables 
                    from tbl_ProjectUC_Deliverables
                    inner join tbl_Deliverables on Deliverables_Id=ProjectUC_Deliverables_Deliverables_Id
                    left join tbl_Unit on Unit_Id=Deliverables_Unit_Id
                    where ProjectUC_Deliverables_Status=1 and ProjectUC_Deliverables_ProjectDPR_Id='" + ProjectDPR_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectDPRRequest_Details(int ProjectDPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        string SanctionedCost = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        strQuery = @"set dateformat dmy; 
                    select 
	                    	ProjectWork_Id,
	                        ProjectWork_Project_Id,
							Project_Name,
	                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
	                        ProjectWork_GO_Path,
	                        SanctionedCostCond
                            ProjectWork_ProjectType_Id,
	                        convert(char(10), ProjectWork_Target_Date, 103) ProjectWork_Target_Date,
	                        convert(char(10), ProjectWork_GO_Date, 103) ProjectWork_GO_Date,
	                        ProjectWork_GO_No,	
	                        ProjectDPR_Id,
	                        ProjectDPR_District_Jurisdiction_Id,
	                        ProjectDPR_NP_JurisdictionId,
                            ProjectDPR_LokSabha_Jurisdiction_Id,
                            ProjectDPR_VidhanSabha_Jurisdiction_Id,
                            ProjectDPR_PhysicalProgressTrackingType,
	                        ProjectDPR_Comments,
                            ProjectDPR_RefrenceNo,
	                        ProjectDPR_BudgetAllocated=cast(isnull(ProjectDPR_BudgetAllocated,0)/100000 as decimal(18,3)),
	                        ProjectDPR_FilePath1,
	                        ProjectDPR_FilePath2,
	                        ProjectDPR_Verified_Comments,
	                        ProjectDPR_Upload_Comments,
	                        ProjectDPR_BudgetAllocationComments,
	                        ProjectDPR_VerifiedOn,
	                        ProjectDPR_BudgetAllocatedBy,
	                        ProjectDPR_VerifiedBy,
	                        ProjectDPR_UploadedBy,
	                        ProjectDPRAdditionalInfo_RecomendatorMobile,
	                        ProjectDPRAdditionalInfo_RecomendatorName,
	                        ProjectDPRAdditionalInfo_Designation, 
                            ProjectDPRAdditionalInfo_InstructionByCompetentAuthority,
							Designation_DesignationName,
                            ProjectDPRAdditionalInfo_CompetentAuthorityName=Person_Name,
							
	                        ULB_Name, 
	                        M_Jurisdiction.Jurisdiction_Name_Eng, 
							LokSabha.LokSabha_Name as LokSabha,
							VidhanSabha.VidhanSabha_Name as VidhanSabha,
                            ProjectWork_IsVerified,
							tbl_ProjectType.ProjectType_Name,
                            ProjectDPR_Upload_Comments,
							  ProjectDPR_FilePath1,
	                          ProjectDPR_File1,
							  ProjectDPR_File2,
							convert(char(10), ProjectDPR_UploadedOn, 103) ProjectDPR_UploadedOn,
                            ProjectDPR_Latitude,
							ProjectDPR_Longitude,
                            convert(char(10), ProjectDPR_ReceivedAtHQDate, 103) ProjectDPR_ReceivedAtHQDate,
                            convert(char(10), ProjectDPR_ApprovedOn, 103) ProjectDPR_ApprovedOn,
							ProjectDPR_RefrenceNo
                    from tbl_ProjectWork 
                    join tbl_ProjectDPR on ProjectDPR_Work_Id = ProjectWork_Id 
					left join tbl_Project on Project_Id=ProjectWork_Project_Id
					left join tbl_LokSabha as LokSabha on LokSabha.LokSabha_Id=tbl_ProjectDPR.ProjectDPR_LokSabha_Jurisdiction_Id
					left join tbl_VidhanSabha as VidhanSabha on VidhanSabha.VidhanSabha_Id=tbl_ProjectDPR.ProjectDPR_VidhanSabha_Jurisdiction_Id
					left join tbl_ProjectType on tbl_ProjectType.ProjectType_Id=ProjectWork_ProjectType_Id
                    left join tbl_ProjectDPRAdditionalInfo on ProjectDPRAdditionalInfo_ProjectDPR_Id = ProjectDPR_Id and ProjectDPRAdditionalInfo_Status = 1
					left join tbl_Designation on Designation_Id=ProjectDPRAdditionalInfo_InstructionByCompetentAuthority
					left join tbl_PersonDetail on Person_Id=ProjectDPRAdditionalInfo_CompetentAuthorityName
                    left join M_Jurisdiction on M_Jurisdiction.M_Jurisdiction_Id = ProjectDPR_District_Jurisdiction_Id
                    left join tbl_ULB on ULB_Id = ProjectDPR_NP_JurisdictionId   
					          
                    where ProjectWork_Status = 1 and ProjectDPR_Status = 1 and ProjectDPR_Id='" + ProjectDPR_Id + "'";
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        strQuery += Environment.NewLine;
        strQuery += @"select DPR_Status_DPR_StatusName,
                        convert(char(10), ProjectDPRStatus_Date, 103) ProjectDPRStatus_Date,
                        ProjectDPRStatus_Comments
                        from tbl_ProjectDPRStatus 
                        inner join tbl_DPR_Status on DPR_Status_Id=ProjectDPRStatus_DPR_StatusId
                        where ProjectDPRStatus_ProjectDPR_Id='" + ProjectDPR_Id + "'";
        strQuery += Environment.NewLine;
        strQuery += @" select DPRQuestionnaire_Name,
                        ProjectDPRQuestionire_Answer,
                        ProjectDPRQuestionire_Remark 
                        from tbl_ProjectDPRQuestionire
                        inner join tbl_DPRQuestionnaire on DPRQuestionnaire_Id=ProjectDPRQuestionire_Questionire_Id
                        where ProjectDPRQuestionire_DPR_Id='" + ProjectDPR_Id + "' and ProjectDPRQuestionire_Status=1 ";

        strQuery += Environment.NewLine;
        strQuery += @" select PhysicalProgressComponent_Component,
                        Unit_Name
                        from tbl_ProjectDPR_PhysicalProgress
                        inner join tbl_PhysicalProgressComponent on PhysicalProgressComponent_Id=ProjectDPR_PhysicalProgress_PhysicalProgressComponent_Id
                        left join tbl_Unit on Unit_Id=PhysicalProgressComponent_Unit_Id
                        where ProjectDPR_PhysicalProgress_ProjectDPR_Id='" + ProjectDPR_Id + "' and ProjectDPR_PhysicalProgress_Status=1 ";

        strQuery += Environment.NewLine;
        strQuery += @" select Deliverables_Deliverables,
                        Unit_Name
                        from tbl_ProjectDPR_Deliverables
                        inner join tbl_Deliverables on Deliverables_Id=ProjectDPR_Deliverables_Deliverables_Id
                        left join tbl_Unit on Unit_Id=Deliverables_Unit_Id
                        where ProjectDPR_Deliverables_ProjectDPR_Id='" + ProjectDPR_Id + "' and ProjectDPR_Deliverables_Status=1 ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master TicketCategory
    public DataSet get_tbl_TicketCategory()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        TicketCategory_Id, 
                        TicketCategory_Name, 
                        TicketCategory_AddedOn, 
                        TicketCategory_AddedBy, 
                        TicketCategory_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = TicketCategory_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = TicketCategory_ModifiedOn 
                      from tbl_TicketCategory
                      left join tbl_PersonDetail on Person_Id = TicketCategory_AddedBy
                      left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = TicketCategory_ModifiedBy
                      where TicketCategory_Status = 1 order by TicketCategory_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet Edit_tbl_TicketCategory(string TicketCategory_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " select TicketCategory_Id,TicketCategory_Name from tbl_TicketCategory where TicketCategory_Status=1 and TicketCategory_Id='" + TicketCategory_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_TicketCategory(tbl_TicketCategory obj_tbl_TicketCategory, int TicketCategory_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyTicketCategory(obj_tbl_TicketCategory.TicketCategory_Name, TicketCategory_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (TicketCategory_Id == 0)
                {
                    Insert_tbl_TicketCategory(obj_tbl_TicketCategory, trans, cn);
                }
                else
                {
                    obj_tbl_TicketCategory.TicketCategory_Id = TicketCategory_Id;
                    Update_tbl_TicketCategory(obj_tbl_TicketCategory, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyTicketCategory(string TicketCategoryName, string TicketCategory_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_TicketCategory  where TicketCategory_Status = 1 and  TicketCategory_Name = '" + TicketCategoryName + "' ";
        if (TicketCategory_Id != "0")
        {
            strQuery += " AND TicketCategory_Id  <> '" + TicketCategory_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_TicketCategory(tbl_TicketCategory obj_tbl_TicketCategory, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_TicketCategory( [TicketCategory_AddedBy],[TicketCategory_AddedOn],[TicketCategory_Name],[TicketCategory_Status] ) values('" + obj_tbl_TicketCategory.TicketCategory_AddedBy + "', getdate(), N'" + obj_tbl_TicketCategory.TicketCategory_Name + "','" + obj_tbl_TicketCategory.TicketCategory_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_TicketCategory(tbl_TicketCategory obj_tbl_TicketCategory, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_TicketCategory set  TicketCategory_Name = N'" + obj_tbl_TicketCategory.TicketCategory_Name + "',TicketCategory_ModifiedOn=getdate(),TicketCategory_ModifiedBy = '" + obj_tbl_TicketCategory.TicketCategory_AddedBy + "' where TicketCategory_Id = '" + obj_tbl_TicketCategory.TicketCategory_Id + "' and TicketCategory_Status = '" + obj_tbl_TicketCategory.TicketCategory_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_TicketCategory(int TicketCategory_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_TicketCategory set   TicketCategory_Status = 0 where TicketCategory_Id = '" + TicketCategory_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master TicketDetails
    public DataSet get_tbl_TicketDetails(int District_Id, int ULB_Id, int Project_Id, int Person_Id, string FromDate, string TillDate)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        TicketDetails_Id,
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        tbl_PersonDetail.Person_Name as CreatedBy,
                        TicketDetails_AddedOn as CreatedDate,
                        tbl_PersonDetail1.Person_Name as ClosedBy,
                        TicketDetails_UpdatedOn as closedDate,
					    Jurisdiction_Name_Eng,
					    ULB_Name,
					    TicketDetails_Description,
					    TicketDetails_CloseDescription,
					    TicketDetails_TicketStatus
                    from tbl_TicketDetails 
                    left join tbl_PersonDetail on Person_Id=TicketDetails_AddedBy
                    left join tbl_PersonDetail as tbl_PersonDetail1  on tbl_PersonDetail1.Person_Id=TicketDetails_UpdatedBy
                    inner join tbl_ProjectWork on ProjectWork_Id=TicketDetails_ProjectWork_Id
                    inner join tbl_TicketCategory on TicketCategory_Id=TicketDetails_TicketCategoryId
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectDPR_District_Jurisdiction_Id
                    where TicketDetails_Status=1 ";
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_District_Jurisdiction_Id = " + District_Id + "";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectDPR_NP_JurisdictionId = " + ULB_Id + "";
        }
        if (Project_Id != 0)
        {
            strQuery += " and ProjectWork_Project_Id = " + Project_Id + "";
        }
        if (Person_Id != 0)
        {
            strQuery += " and (ProjectDPR_NP_JurisdictionId in (select PersonJuridiction_ULB_Id from tbl_PersonJuridiction where PersonJuridiction_PersonId = '" + Person_Id + "')  or ProjectDPR_NP_JurisdictionId in (select PersonAdditionalULB_ULB_Id from tbl_PersonAdditionalULB where PersonAdditionalULB_Person_Id = '" + Person_Id + "')) ";
        }
        if (!String.IsNullOrEmpty(FromDate) && !String.IsNullOrEmpty(TillDate))
        {
            strQuery += " and Convert(date, TicketDetails_AddedOn, 103)  between CONVERT(date, Convert(varchar(10),'" + FromDate + "', 103), 103) And CONVERT(date, Convert(varchar(10),'" + TillDate + "', 103), 103) ";
        }
        strQuery += " Order by TicketDetails_AddedOn desc";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Update_TicketDetails(int Ticket_Id, int person_Id, string Remark)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_TicketDetails set   TicketDetails_TicketStatus = 'Closed',TicketDetails_CloseDescription = N'" + Remark + "',TicketDetails_UpdatedBy='" + person_Id + "',TicketDetails_UpdatedOn=getdate() where TicketDetails_Id = '" + Ticket_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Set Inspection Master
    public DataSet get_tbl_SetInspectionMaster()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select * from (select ROW_NUMBER() Over(Partition by SetInspectionMaster_Name order by SetInspectionMaster_Id desc) as rr,
                        SetInspectionMaster_Id, 
                        SetInspectionMaster_Name,
                        SetInspectionMaster_Designation_Id, 
						SetInspectionMaster_MLevel_Id,
                        Level_Name,
                        Designation_DesignationName,
                        SetInspectionMaster_AddedOn, 
                        SetInspectionMaster_AddedBy, 
                        SetInspectionMaster_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = SetInspectionMaster_AddedOn, 
                        tbl_PersonDetail1.Person_Name as ModifiedBy, 
                        Mdified_Date=SetInspectionMaster_ModifiedOn 
                    from tbl_SetInspectionMaster 
					inner join M_Level on M_Level_Id=SetInspectionMaster_MLevel_Id
                    inner join tbl_Designation on Designation_Id=SetInspectionMaster_Designation_Id
                    left join tbl_PersonDetail on Person_Id = SetInspectionMaster_AddedBy 
                    left join tbl_PersonDetail as tbl_PersonDetail1  on tbl_PersonDetail1.Person_Id = SetInspectionMaster_ModifiedBy 
                   where SetInspectionMaster_Status = 1 ) as t where rr=1 order by SetInspectionMaster_Id desc ";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_tbl_SetInspectionMaster_BySetName(string SetName)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select SetInspectionMaster_Designation_Id,
                    SetInspectionMaster_MLevel_Id,
                    Designation_DesignationName,
                    SetInspectionMaster_Name,
                    Level_Name
                    from tbl_SetInspectionMaster 
                    inner join M_Level on M_Level_Id=SetInspectionMaster_MLevel_Id
                     inner join tbl_Designation on Designation_Id=SetInspectionMaster_Designation_Id
                    where SetInspectionMaster_Name='" + SetName + "' and SetInspectionMaster_Status=1  order by SetInspectionMaster_Id desc";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_M_Level_SetInspection()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; select M_Level_Id, Level_Name, Created_By, Created_Date, Is_Active from M_Level where Is_Active = 1 and M_Level_Id in (6,7,8)  order by M_Level_Id";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_SetInspectionMaster(List<tbl_SetInspectionMaster> obj_tbl_SetInspectionMasterLi, int SetInspectionMaster_Id, string SetName, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {

                if (obj_tbl_SetInspectionMasterLi != null && obj_tbl_SetInspectionMasterLi.Count > 0)
                {
                    string strQuery = " set dateformat dmy; Update  tbl_SetInspectionMaster set  SetInspectionMaster_Status =  '0' , SetInspectionMaster_ModifiedBy = '" + obj_tbl_SetInspectionMasterLi[0].SetInspectionMaster_AddedBy + "' ,  SetInspectionMaster_ModifiedOn =  getdate() where SetInspectionMaster_Name = '" + obj_tbl_SetInspectionMasterLi[0].SetInspectionMaster_Name + "' and SetInspectionMaster_Status =  '1' ";
                    if (trans == null)
                    {
                        try
                        {
                            ExecuteSelectQuery(strQuery);
                        }
                        catch
                        {

                        }
                    }
                    else
                    {
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    }

                    if (AllClasses.CheckDataSet(CheckDuplicacySetInspectionMaster(SetName, SetInspectionMaster_Id.ToString(), trans, cn)))
                    {
                        Msg = "A";
                        trans.Commit();
                        cn.Close();
                        return false;
                    }


                    for (int i = 0; i < obj_tbl_SetInspectionMasterLi.Count; i++)
                    {
                        Insert_tbl_SetInspectionMaster(obj_tbl_SetInspectionMasterLi[i], trans, cn);
                    }
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacySetInspectionMaster(string SetInspectionMaster_Name, string SetInspectionMaster_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_SetInspectionMaster  where SetInspectionMaster_Status = 1 and  SetInspectionMaster_Name = '" + SetInspectionMaster_Name + "' ";
        //if (SetInspectionMaster_Id != "0")
        //{
        //    strQuery += " AND SetInspectionMaster_Id  <> '" + SetInspectionMaster_Id + "'";
        //}
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_SetInspectionMaster(tbl_SetInspectionMaster obj_tbl_SetInspectionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_SetInspectionMaster( [SetInspectionMaster_AddedBy],[SetInspectionMaster_AddedOn],[SetInspectionMaster_Name],[SetInspectionMaster_Status],SetInspectionMaster_Designation_Id,SetInspectionMaster_MLevel_Id ) values('" + obj_tbl_SetInspectionMaster.SetInspectionMaster_AddedBy + "', getdate(), N'" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Name + "','" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Status + "','" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Designation_Id + "','" + obj_tbl_SetInspectionMaster.SetInspectionMaster_MLevel_Id + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_SetInspectionMaster(tbl_SetInspectionMaster obj_tbl_SetInspectionMaster, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_SetInspectionMaster set  SetInspectionMaster_Name = N'" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Name + "',SetInspectionMaster_ModifiedOn = getDate(),SetInspectionMaster_ModifiedBy = '" + obj_tbl_SetInspectionMaster.SetInspectionMaster_AddedBy + "',SetInspectionMaster_Designation_Id = '" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Designation_Id + "',SetInspectionMaster_MLevel_Id = '" + obj_tbl_SetInspectionMaster.SetInspectionMaster_MLevel_Id + "' where SetInspectionMaster_Id = '" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Id + "' and SetInspectionMaster_Status = '" + obj_tbl_SetInspectionMaster.SetInspectionMaster_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_SetInspectionMaster(string SetInspectionMaster_Name, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_SetInspectionMaster set   SetInspectionMaster_Status = 0,SetInspectionMaster_ModifiedOn = getDate(),SetInspectionMaster_ModifiedBy = '" + person_Id + "' where SetInspectionMaster_Name = '" + SetInspectionMaster_Name + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Generate Salary
    public bool Generate_Salary(int Month, int Year)
    {
        bool rVal = false;
        DateTime dt = new DateTime(Year, Month, 1);
        DateTime dtPrev = dt.AddDays(-1);
        string strQuery = "";
        strQuery = @"set dateformat dmy;
                    insert into tbl_HRMS_Salary_Details
                    (
	                    HRMS_Salary_Details_HRMSEmployee_Id,
	                    HRMS_Salary_Details_Month,
	                    HRMS_Salary_Details_Year,
	                    Zone_Id,
	                    Zone_Name,
	                    Circle_Id,
	                    Circle_Name,
	                    Division_Id,
	                    Division,
	                    Class,
	                    Name,
	                    Designation_Id,
	                    Designation,
	                    Emp_Code,
	                    DOB,
	                    DOJ,
	                    Aadhar_No,
	                    PAN,
	                    PRAN_No,
	                    Basic,
	                    Grade_Pay,
	                    DA,
	                    HRA,
	                    MA,
	                    Personal_Pay,
	                    Special_Pay,
	                    Other_All,
	                    Gross_Sal,
	                    Employer_NPS_cont,
	                    Employer_NPS_cont_arr,
	                    Total_Gross_Sal,
	                    GPF,
	                    GPF_Adv,
	                    GIS,
	                    Deduction_Total_HQ,
	                    Income_Tax,
	                    NPS_Employee,
	                    NPS_Employee_Arr,
	                    Deduction_Total_Paid,
	                    HRA1,
	                    Colony_Maintance,
	                    Motor_Vehicle_Deduction,
	                    Other_Deduction,
	                    Deduction_Total_Not_Paid,
	                    Total_Deduction,
	                    Net_Salary,
	                    Net_Salary_Employee,
	                    Account_No,
	                    IFSC_Code,
	                    HRMS_Employee_Code,
	                    HRMS_Salary_Details_AddedOn,
	                    HRMS_Salary_Details_AddedBy,
	                    HRMS_Salary_Details_Status,
	                    DOR,
	                    GPF_No
                    )
                    select 
	                    HRMSEmployee_Id, MonthCond, YearCond,
	                    HRMSEmployeeJuridiction_ZoneId, 
	                    tbl_Zone.Zone_Name, 
	                    HRMSEmployeeJuridiction_CircleId, 
	                    tbl_Circle.Circle_Name,
	                    HRMSEmployeeJuridiction_DivisionId,
	                    Division_Name, 
	                    Class = case when isnull(Class, '') = '' then Cadre_Name else Class end, 
	                    HRMSEmployee_Name, 
	                    HRMSEmployeeJuridiction_DesignationId, 
	                    case when isnull(Designation_DesignationName, '') = '' then Designation else Designation_DesignationName end, 
	                    HRMSEmployee_DepartmentalEmployeeCode, 
	                    convert(char(10), HRMSEmployee_DOB, 103), 
	                    convert(char(10), HRMSEmployeeJuridiction_JoinDateInCurrentOffice, 103), 
	                    HRMSEmployee_AadharNo, 
	                    HRMSEmployee_PANNo, 
	                    HRMSEmployeeJuridiction_PRAAN,
	                    HRMSEmployeeSalaryInfo_Basic_Sal,
	                    HRMSEmployeeSalaryInfo_Grade_Pay,
	                    HRMSEmployeeSalaryInfo_DA,
	                    HRMSEmployeeSalaryInfo_HRA,
	                    HRMSEmployeeSalaryInfo_MA,
	                    HRMSEmployeeSalaryInfo_Personal_Pay,
	                    HRMSEmployeeSalaryInfo_Special_Pay,
	                    HRMSEmployeeSalaryInfo_Other_Allowance,
	                    HRMSEmployeeSalaryInfo_Gross_Salary,
	                    HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Current,
	                    HRMSEmployeeSalaryInfo_Employer_NPS_Contributon_Arrear,
	                    HRMSEmployeeSalaryInfo_Gross_Salary_Including_NPS_Contribution,
	                    HRMSEmployeeSalaryInfo_GPF,
	                    HRMSEmployeeSalaryInfo_GPF_Advance,
	                    HRMSEmployeeSalaryInfo_GIS,
	                    HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Invested_at_HQ_level,
	                    HRMSEmployeeSalaryInfo_Income_Tax,
	                    HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Current,
	                    HRMSEmployeeSalaryInfo_Employee_NPS_Contributon_Arrear,
	                    HRMSEmployeeSalaryInfo_Total_Deduction_to_be_Paid,
	                    HRMSEmployeeSalaryInfo_HRA_For_Jal_Nigam_Colony_Employee,
	                    HRMSEmployeeSalaryInfo_Colony_Maintance,
	                    HRMSEmployeeSalaryInfo_Motor_Vehicle_Deduction,
	                    HRMSEmployeeSalaryInfo_Other_Deduction,
	                    HRMSEmployeeSalaryInfo_Total_Deduction_Not_to_be_Paid,
	                    HRMSEmployeeSalaryInfo_Total_Deduction,
	                    HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Division,
	                    HRMSEmployeeSalaryInfo_Net_Salary_Payble_To_Employee,
	                    HRMSEmployeeBankDetails_AccountNo, 
	                    HRMSEmployeeBankDetails_IFSC_Code, 
	                    HRMSEmployee_HRMSCode, 
	                    getdate(), 1, 1, 
	                    convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103), 
	                    HRMSEmployeeJuridiction_GPF
                    from tbl_HRMSEmployeeDetails
                    join tbl_HRMSEmployeeSalaryInfo on tbl_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id
                    join tbl_HRMSEmployeeJuridiction on tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id
                    left join tbl_HRMSEmployeeBankDetails on tbl_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and tbl_HRMSEmployeeBankDetails.HRMSEmployeeBankDetails_Status = 1
                    left join tbl_Designation on Designation_Id = HRMSEmployeeJuridiction_DesignationId
                    left join tbl_Cadre on Cadre_Id = HRMSEmployeeJuridiction_Cadre
                    left join tbl_Division on Division_Id = HRMSEmployeeJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = HRMSEmployeeJuridiction_CircleId
                    left join tbl_Zone on Zone_Id = HRMSEmployeeJuridiction_ZoneId
                    left join tbl_HRMS_Salary_Details on HRMS_Salary_Details_HRMSEmployee_Id = tbl_HRMSEmployeeDetails.HRMSEmployee_Id and HRMS_Salary_Details_Status = 1 and HRMS_Salary_Details_Month = MonthPrevCond and HRMS_Salary_Details_Year = YearPrevCond
                    where tbl_HRMSEmployeeSalaryInfo.HRMSEmployeeSalaryInfo_Status = 1 and tbl_HRMSEmployeeDetails.HRMSEmployee_Status = 1 and tbl_HRMSEmployeeJuridiction.HRMSEmployeeJuridiction_Status = 1 and convert(date, HRMSEmployeeJuridiction_RetirementDate, 103) > convert(date, '" + dtPrev.ToString("dd/MM/yyyy").Replace("-", "/") + "', 103)";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());

        strQuery = strQuery.Replace("MonthPrevCond", dtPrev.Month.ToString());
        strQuery = strQuery.Replace("YearPrevCond", dtPrev.Year.ToString());

        strQuery += "order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ExecuteSelectQuery(strQuery);
            rVal = true;
        }
        catch
        {
            rVal = false;
        }
        return rVal;
    }
    #endregion

    #region Cadre In Salary
    public DataSet get_Cadre_In_Salary(int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select Class = isnull(Class, ''), count(*) Total_Employee_In_Class, Data_Bind = isnull(Class, '') + ' - (' + convert(varchar,  count(*)) + ')' from tbl_HRMS_Salary_Details where HRMS_Salary_Details_Status = 1 and HRMS_Salary_Details_Month = '" + Month + "' and HRMS_Salary_Details_Year = '" + Year + "' and Is_Verified = 1 group by isnull(Class, '') order by isnull(Class, '') ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Salary Register Summery
    public DataSet get_Pension_Register_Summery(int Zone_Id, int Circle_Id, int Division_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select * from (
                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    tbl_Division.Division_Id,
	                    tbl_Zone.Zone_Name, 
	                    tbl_Circle.Circle_Name, 
	                    tbl_Division.Division_Name, 
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Division on tbl_Division.Division_Id = tbl_Pension_Master_Dump.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) > 0 and Pension_Master_Dump_Month = MonthCond and Pension_Master_Dump_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Division.Division_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Name, tbl_Division.Division_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    Division_Id = 0,
	                    tbl_Zone.Zone_Name, 
	                    tbl_Circle.Circle_Name, 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_Pension_Master_Dump.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Circle_Id, 0) > 0 and Pension_Master_Dump_Month = MonthCond and Pension_Master_Dump_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Zone.Zone_Name, tbl_Circle.Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    Circle_Id = 0,
	                    Division_Id = 0,
	                    tbl_Zone.Zone_Name, 
	                    Circle_Name = '', 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(Is_Verified, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_Pension_Master_Dump.Zone_Id
                    where Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Zone_Id, 0) > 0 and Pension_Master_Dump_Month = MonthCond and Pension_Master_Dump_Year = YearCond
                    group by tbl_Zone.Zone_Id, tbl_Zone.Zone_Name 
                    ) tData where 1 = 1";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());

        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Pension_Register_Details(int Zone_Id, int Circle_Id, int Division_Id, int Month, int Year)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    tbl_Zone.Zone_Name,
	                    tbl_Circle.Circle_Name, 
	                    tbl_Division.Division_Name,
	                    Pension_Master_Dump,
                        Class,
                        Division,
                        Designation,
                        Pensioner,
                        CR_No,
                        Basic_Pension,
                        Computation_Pension,
                        DA,
                        GROSS_Pension,
                        Income_Tax,
                        Other_Deduction,
                        Net_Pension,
                        Total_Deduction,
                        Is_Verified,
                        Verified_On,
                        Verified_By
                    from tbl_Pension_Master_Dump
                    left join tbl_Division on tbl_Division.Division_Id = tbl_Pension_Master_Dump.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end
                    left join tbl_Zone on tbl_Zone.Zone_Id = case when isnull(tbl_Pension_Master_Dump.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_Pension_Master_Dump.Zone_Id end
                    where Pension_Master_Dump_Status = 1 and Pension_Master_Dump_Month = MonthCond and Pension_Master_Dump_Year = YearCond";
        strQuery = strQuery.Replace("MonthCond", Month.ToString());
        strQuery = strQuery.Replace("YearCond", Year.ToString());
        if (Zone_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_Pension_Master_Dump.Zone_Id end) = '" + Zone_Id + "'";
            if (Circle_Id > 0)
            {
                strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end) = '" + Circle_Id + "'";
                if (Division_Id > 0)
                {
                    strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
                }
                else
                {
                    strQuery += " and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0";
                }
            }
            else
            {
                strQuery += " and isnull((case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end), 0) = 0";
            }
        }
        else if (Circle_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end) = '" + Circle_Id + "'";
            if (Division_Id > 0)
            {
                strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
            }
            else
            {
                strQuery += " and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0";
            }
        }
        else if (Division_Id > 0)
        {
            strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
        }
        else
        {

        }
        strQuery += "order by tbl_Zone.Zone_Name, tbl_Circle.Circle_Name, tbl_Division.Division_Name, Class, Pensioner";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Update_Pension_Verification(int Pension_Master_Dump, int VerifiedStatus, int AddedBy)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; update tbl_Pension_Master_Dump set Is_Verified = '" + VerifiedStatus + "', Verified_On = getdate(), Verified_By = '" + AddedBy + "' where Pension_Master_Dump = '" + Pension_Master_Dump + "' ";
                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }

    public bool Delete_HRMS_Pension_Details_For_Month(int Pension_Master_Dump, int person_Id)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; Update  tbl_Pension_Master_Dump set Pension_Master_Dump_Status = 0, Pension_Master_Dump_ModifiedBy = '" + person_Id + "', Pension_Master_Dump_ModifiedOn = getdate() where Pension_Master_Dump = '" + Pension_Master_Dump + "' ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }
    #endregion

    #region Pensioner Master Data Verification
    public DataSet get_Pensioner_Details_Verification(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    Zone_Name,
	                    Circle_Name, 
	                    Division_Name,
	                    Pension_Master_Dump,
                        Class,
                        Division,
                        Designation,
                        Pensioner,
                        CR_No,
                        Account_No,
                        DOR,
                        AADHAR,
                        IFSC,
                        PAN,
                        Is_Verified_F,
                        Verified_On_F
                    from tbl_Pension_Master_Dump
					left join tbl_Division on tbl_Division.Division_Id = tbl_Pension_Master_Dump.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end
                    left join tbl_Zone on tbl_Zone.Zone_Id = case when isnull(tbl_Pension_Master_Dump.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_Pension_Master_Dump.Zone_Id end
                    where Pension_Master_Dump_Status = 1 ";
        if (Zone_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Zone_Id, 0) = 0 then Circle_ZoneId else tbl_Pension_Master_Dump.Zone_Id end) = '" + Zone_Id + "'";
            if (Circle_Id > 0)
            {
                strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end) = '" + Circle_Id + "'";
                if (Division_Id > 0)
                {
                    strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
                }
                else
                {
                    strQuery += " and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0";
                }
            }
            else
            {
                strQuery += " and isnull((case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end), 0) = 0";
            }
        }
        else if (Circle_Id > 0)
        {
            strQuery += " and (case when isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 then Division_CircleId else tbl_Pension_Master_Dump.Circle_Id end) = '" + Circle_Id + "'";
            if (Division_Id > 0)
            {
                strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
            }
            else
            {
                strQuery += " and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0";
            }
        }
        else if (Division_Id > 0)
        {
            strQuery += " and tbl_Pension_Master_Dump.Division_Id = '" + Division_Id + "'";
        }
        else
        {

        }
        strQuery += "order by tbl_Zone.Zone_Name, tbl_Circle.Circle_Name, tbl_Division.Division_Name, Class, Pensioner";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Update_Pension_Data_Verification(string Account_No, string IFSC_Code, string CR_No, string DOR, string PANNo, string AadharNo, int AddedBy, int Pension_Master_Dump)
    {
        bool flag = false;
        try
        {
            DataSet ds = new DataSet();
            using (SqlConnection cn = new SqlConnection(ConStr))
            {
                if (cn.State == ConnectionState.Closed)
                {
                    cn.Open();
                }
                SqlTransaction trans = cn.BeginTransaction();
                try
                {

                    string strQuery = "";
                    strQuery = " set dateformat dmy; Update  tbl_Pension_Master_Dump set DOR = convert(date, '" + DOR + "', 103), CR_No = '" + CR_No + "', AADHAR = '" + AadharNo + "', PAN = '" + PANNo + "', Account_No = '" + Account_No + "', IFSC = '" + IFSC_Code + "', Is_Verified_F = 1, Verified_On_F = getdate(), Verified_By_F = '" + AddedBy + "' where Pension_Master_Dump = '" + Pension_Master_Dump + "' ";

                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
                catch
                {
                    trans.Rollback();
                    cn.Close();
                    flag = false;
                }
            }
            return flag;
        }
        catch
        {
            return flag;
        }
    }
    #endregion

    #region Pensioner Data Verification Summery
    public DataSet get_Pensioner_Data_Verification_Summery(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select * from (
                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    tbl_Division.Division_Id,
	                    Zone_Name, 
	                    Circle_Name, 
	                    Division_Name, 
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_Pension_Master_Dump.Is_Verified_F, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Division on tbl_Division.Division_Id = tbl_Pension_Master_Dump.Division_Id
                    left join tbl_Circle on tbl_Circle.Circle_Id = Division_CircleId
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where tbl_Pension_Master_Dump.Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) > 0
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, tbl_Division.Division_Id, Zone_Name, Circle_Name, Division_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    tbl_Circle.Circle_Id,
	                    Division_Id = 0,
	                    Zone_Name, 
	                    Circle_Name, 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_Pension_Master_Dump.Is_Verified_F, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Circle on tbl_Circle.Circle_Id = tbl_Pension_Master_Dump.Circle_Id
                    left join tbl_Zone on tbl_Zone.Zone_Id = Circle_ZoneId
                    where tbl_Pension_Master_Dump.Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Circle_Id, 0) > 0
                    group by tbl_Zone.Zone_Id, tbl_Circle.Circle_Id, Zone_Name, Circle_Name

                    union all

                    select 
	                    tbl_Zone.Zone_Id, 
	                    Circle_Id = 0,
	                    Division_Id = 0,
	                    Zone_Name, 
	                    Circle_Name = '', 
	                    Division_Name = '',
	                    count(*) Total_Employees, 
	                    Total_Employees_Verified = sum(case when isnull(tbl_Pension_Master_Dump.Is_Verified_F, 0) = 1 then 1 else 0 end)
                    from tbl_Pension_Master_Dump 
                    left join tbl_Zone on tbl_Zone.Zone_Id = tbl_Pension_Master_Dump.Zone_Id
                    where tbl_Pension_Master_Dump.Pension_Master_Dump_Status = 1 and isnull(tbl_Pension_Master_Dump.Circle_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Division_Id, 0) = 0 and isnull(tbl_Pension_Master_Dump.Zone_Id, 0) > 0
                    group by tbl_Zone.Zone_Id, Zone_Name 
                    ) tData where 1 = 1";
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        strQuery += "order by Zone_Name, Circle_Name, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Pension Registre Import
    public bool Insert_Pension_Register_Data(DataTable dt, int Zone_Id, int Circle_Id, int Division_id, ref string msg)
    {
        DataSet ds = new DataSet();
        bool flag = false;
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            int i = 0;
            string _Cell = "";
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDt(dt))
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        tbl_Pension_Master_Dump obj_tbl_Pension_Master_Dump = new tbl_Pension_Master_Dump();
                        obj_tbl_Pension_Master_Dump.Pension_Master_Dump_AddedBy = Convert.ToInt32(Session["Person_Id"].ToString());
                        obj_tbl_Pension_Master_Dump.Zone_Id = Zone_Id;
                        obj_tbl_Pension_Master_Dump.Circle_Id = Circle_Id;
                        obj_tbl_Pension_Master_Dump.Division_Id = Division_id;
                        try
                        {
                            _Cell = "Division";
                            obj_tbl_Pension_Master_Dump.Division = dt.Rows[i]["Division"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Class";
                            obj_tbl_Pension_Master_Dump.Class = dt.Rows[i]["Class"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Pensioner";
                            obj_tbl_Pension_Master_Dump.Pensioner = dt.Rows[i]["Pensioner"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Designation";
                            obj_tbl_Pension_Master_Dump.Designation = dt.Rows[i]["Designation"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "CR_No";
                            obj_tbl_Pension_Master_Dump.CR_No = dt.Rows[i]["CR_No"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "DOR";
                            obj_tbl_Pension_Master_Dump.DOR = dt.Rows[i]["DOR"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "AADHAR";
                            obj_tbl_Pension_Master_Dump.AADHAR = dt.Rows[i]["AADHAR"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "PAN";
                            obj_tbl_Pension_Master_Dump.PAN = dt.Rows[i]["PAN"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Account_No";
                            obj_tbl_Pension_Master_Dump.Account_No = dt.Rows[i]["Account_No"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "IFSC";
                            obj_tbl_Pension_Master_Dump.IFSC = dt.Rows[i]["IFSC"].ToString();
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Basic_Pension";
                            obj_tbl_Pension_Master_Dump.Basic_Pension = Convert.ToDecimal(dt.Rows[i]["Basic_Pension"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Computation_Pension";
                            obj_tbl_Pension_Master_Dump.Computation_Pension = Convert.ToDecimal(dt.Rows[i]["Computation_Pension"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "DA";
                            obj_tbl_Pension_Master_Dump.DA = Convert.ToDecimal(dt.Rows[i]["DA"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "GROSS_Pension";
                            obj_tbl_Pension_Master_Dump.GROSS_Pension = Convert.ToDecimal(dt.Rows[i]["GROSS_Pension"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Income_Tax";
                            obj_tbl_Pension_Master_Dump.Income_Tax = Convert.ToDecimal(dt.Rows[i]["Income_Tax"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Other_Deduction";
                            obj_tbl_Pension_Master_Dump.Other_Deduction = Convert.ToDecimal(dt.Rows[i]["Other_Deduction"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Total_Deduction";
                            obj_tbl_Pension_Master_Dump.Total_Deduction = Convert.ToDecimal(dt.Rows[i]["Total_Deduction"].ToString());
                        }
                        catch
                        { }
                        try
                        {
                            _Cell = "Net_Pension";
                            obj_tbl_Pension_Master_Dump.Net_Pension = Convert.ToDecimal(dt.Rows[i]["Net_Pension"].ToString());
                        }
                        catch
                        { }
                        obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Status = 1;
                        obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Month = 8;
                        obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Year = 2022;
                        Insert_tbl_Pension_Master_Dump(obj_tbl_Pension_Master_Dump, trans, cn);
                    }
                }
                msg = "";
                flag = true;
                trans.Commit();
                cn.Close();
            }
            catch (Exception ex)
            {
                msg = "Row: " + (i + 1).ToString() + " Cell: " + _Cell + Environment.NewLine + ex.Message;
                flag = false;
                trans.Rollback();
                cn.Close();
            }
        }
        return flag;
    }

    private void Insert_tbl_Pension_Master_Dump(tbl_Pension_Master_Dump obj_tbl_Pension_Master_Dump, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_Pension_Master_Dump ( [AADHAR],[Account_No],[Basic_Pension],[Circle_Id],[Class],[Computation_Pension],[CR_No],[DA],[Designation],[Division],[Division_Id],[DOR],[GROSS_Pension],[ID],[IFSC],[Income_Tax],[Is_Verified],[Is_Verified_F],[Net_Pension],[Other_Deduction],[PAN],[Pension_Master_Dump_AddedBy],[Pension_Master_Dump_AddedOn],[Pension_Master_Dump_Month],[Pension_Master_Dump_Status],[Pension_Master_Dump_Year],[Pensioner],[Remarks],[SrNo],[Total_Deduction],[Zone_Id] ) values (N'" + obj_tbl_Pension_Master_Dump.AADHAR + "',N'" + obj_tbl_Pension_Master_Dump.Account_No + "','" + obj_tbl_Pension_Master_Dump.Basic_Pension + "','" + obj_tbl_Pension_Master_Dump.Circle_Id + "',N'" + obj_tbl_Pension_Master_Dump.Class + "','" + obj_tbl_Pension_Master_Dump.Computation_Pension + "',N'" + obj_tbl_Pension_Master_Dump.CR_No + "','" + obj_tbl_Pension_Master_Dump.DA + "',N'" + obj_tbl_Pension_Master_Dump.Designation + "',N'" + obj_tbl_Pension_Master_Dump.Division + "','" + obj_tbl_Pension_Master_Dump.Division_Id + "',N'" + obj_tbl_Pension_Master_Dump.DOR + "','" + obj_tbl_Pension_Master_Dump.GROSS_Pension + "','" + obj_tbl_Pension_Master_Dump.ID + "',N'" + obj_tbl_Pension_Master_Dump.IFSC + "','" + obj_tbl_Pension_Master_Dump.Income_Tax + "','" + obj_tbl_Pension_Master_Dump.Is_Verified + "','" + obj_tbl_Pension_Master_Dump.Is_Verified_F + "','" + obj_tbl_Pension_Master_Dump.Net_Pension + "','" + obj_tbl_Pension_Master_Dump.Other_Deduction + "',N'" + obj_tbl_Pension_Master_Dump.PAN + "','" + obj_tbl_Pension_Master_Dump.Pension_Master_Dump_AddedBy + "', getdate(),'" + obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Month + "','" + obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Status + "','" + obj_tbl_Pension_Master_Dump.Pension_Master_Dump_Year + "',N'" + obj_tbl_Pension_Master_Dump.Pensioner + "',N'" + obj_tbl_Pension_Master_Dump.Remarks + "','" + obj_tbl_Pension_Master_Dump.SrNo + "','" + obj_tbl_Pension_Master_Dump.Total_Deduction + "','" + obj_tbl_Pension_Master_Dump.Zone_Id + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region NOC Questionire
    public DataSet get_tbl_NOCQuestionnaire()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        NOCQuestionnaire_Id,
                        NOCQuestionnaire_Name,
                        NOCQuestionnaire_AddedBy,
                        NOCQuestionnaire_AddedOn,
                        NOCQuestionnaire_Status, 
                        NOCQuestionnaire_QuestionType, 
                        NOCQuestionnaire_Sr
                    from tbl_NOCQuestionnaire 
                    where NOCQuestionnaire_Status = 1 
                    order by NOCQuestionnaire_Sr, NOCQuestionnaire_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_NOCQuestionnaire(List<tbl_NOCQuestionnaire> obj_tbl_NOCQuestionnaire_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Update_tbl_NOCQuestionnaire(obj_tbl_NOCQuestionnaire_Li[0].NOCQuestionnaire_AddedBy, trans, cn);
                if (obj_tbl_NOCQuestionnaire_Li != null && obj_tbl_NOCQuestionnaire_Li.Count > 0)
                {
                    for (int i = 0; i < obj_tbl_NOCQuestionnaire_Li.Count; i++)
                    {
                        obj_tbl_NOCQuestionnaire_Li[i].NOCQuestionnaire_Id = Insert_tbl_NOCQuestionnaire(obj_tbl_NOCQuestionnaire_Li[i], trans, cn);
                    }
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private void Update_tbl_NOCQuestionnaire(int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_NOCQuestionnaire set  NOCQuestionnaire_Status =  '0', NOCQuestionnaire_ModifiedBy = '" + Added_By + "' ,  NOCQuestionnaire_ModifiedOn =  getdate() where NOCQuestionnaire_Status = 1 ";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {

            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private int Insert_tbl_NOCQuestionnaire(tbl_NOCQuestionnaire obj_tbl_NOCQuestionnaire, SqlTransaction trans, SqlConnection cn)
    {
        DataSet ds = new DataSet();
        string strQuery = " set dateformat dmy; insert into tbl_NOCQuestionnaire ( [NOCQuestionnaire_AddedBy],[NOCQuestionnaire_AddedOn],[NOCQuestionnaire_Name],[NOCQuestionnaire_Status], [NOCQuestionnaire_QuestionType], [NOCQuestionnaire_Sr]) values ('" + obj_tbl_NOCQuestionnaire.NOCQuestionnaire_AddedBy + "', getdate(), N'" + obj_tbl_NOCQuestionnaire.NOCQuestionnaire_Name + "','" + obj_tbl_NOCQuestionnaire.NOCQuestionnaire_Status + "', '" + obj_tbl_NOCQuestionnaire.NOCQuestionnaire_QuestionType + "', '" + obj_tbl_NOCQuestionnaire.NOCQuestionnaire_Sr + "'); select @@IDENTITY";
        if (trans == null)
        {
            try
            {
                ds = ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
    }
    #endregion

    #region Generate NOC
    public DataSet get_tbl_HRMSEmployeeDetails_Retired(int Zone_Id, int Circle_Id, int Division_Id, int HRMSEmployeeCode, int HRMSEmployee_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select
                        HRMSEmployee_Id,
                        HRMSEmployee_Name,
                        HRMSEmployee_SpouseName,
                        HRMSEmployee_SpecialCategory,
                        HRMSEmployee_FatherName,
                        HRMSEmployee_Gender,
						HRMSEmployee_MaritalStatus,
						HRMSEmployee_DOB=case when convert(char(10), HRMSEmployee_DOB, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_DOB, 103) end,
						HRMSEmployee_AppointmentDate=case when convert(char(10), HRMSEmployee_AppointmentDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_AppointmentDate, 103) end,
						HRMSEmployee_JoinDateInService=case when convert(char(10), HRMSEmployee_JoinDateInService, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_JoinDateInService, 103) end,
						HRMSEmployee_DepartmentalEmployeeCode,
						HRMSEmployee_MarriageDate=case when convert(char(10), HRMSEmployee_MarriageDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployee_MarriageDate, 103) end,
                        HRMSEmployeeJuridiction_RetirementDate=case when convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103) = '01/01/1900' then '' else convert(char(10), HRMSEmployeeJuridiction_RetirementDate, 103) end,
						HRMSEmployee_Type,
						HRMSEmployee_Spouse_eHRMSCode,
						HRMSEmployee_HomeState,
						HRMSEmployee_HomeDistrict,
						HRMSEmployee_AreaPincode,
						HRMSEmployee_FullAddress,
						HRMSEmployee_EmailId,
						HRMSEmployee_MobileNo,	
                        HRMSEmployee_Religion,	
						HRMSEmployee_Caste,	
                        HRMSEmployee_AddedBy,
                        HRMSEmployee_AddedOn,
                        HRMSEmployee_HRMSCode,
						HRMSEmployeeJuridiction_Id,
						HRMSEmployeeJuridiction_ZoneId,
						HRMSEmployeeJuridiction_CircleId,
						HRMSEmployeeJuridiction_DivisionId, 
                        Zone_Name, 
                        Circle_Name, 
                        Division_Name
                    from tbl_HRMSEmployeeDetails
					left join tbl_HRMSEmployeeJuridiction as tbl_HRMSEmployeeJuridiction1 on tbl_HRMSEmployeeJuridiction1.HRMSEmployeeJuridiction_HRMSEmployee_Id = HRMSEmployee_Id and tbl_HRMSEmployeeJuridiction1.HRMSEmployeeJuridiction_Status = 1
                    left join tbl_Zone as tbl_Zone1 on tbl_Zone1.Zone_Id=HRMSEmployeeJuridiction_ZoneId
                    left join tbl_Circle as tbl_Circle1 on tbl_Circle1.Circle_Id=HRMSEmployeeJuridiction_CircleId
                    left join tbl_Division as tbl_Division1 on tbl_Division1.Division_Id=HRMSEmployeeJuridiction_DivisionId
                   where HRMSEmployee_Status = 1 and HRMSEmployeeJuridiction_Status = 1 and datediff(DD, HRMSEmployeeJuridiction_RetirementDate, getdate()) > 0 ";
        if (Zone_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_ZoneId ='" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_CircleId ='" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += "and HRMSEmployeeJuridiction_DivisionId='" + Division_Id + "'";
        }
        if (HRMSEmployeeCode > 0)
        {
            strQuery += "and HRMSEmployee_DepartmentalEmployeeCode='" + HRMSEmployeeCode + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Inventory Item Master
    public DataSet get_tbl_InventoryItemDetails(int Category_Id, int Type_Id, int Company_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    InventoryItemDetails_Id,
	                    InventoryItemDetails_DIA,
                        InventoryItemDetails_Guage,
	                    InventoryItemDetails_Length,
	                    InventoryItemDetails_Bredth,
	                    InventoryItemDetails_Height,
	                    InventoryItemDetails_ClassId,
	                    InventoryItemDetails_ItemName,
	                    InventoryItemDetails_UnitId,
	                    InventoryItemDetails_CategoryId,
	                    InventoryItemDetails_TypeId,
	                    InventoryItemDetails_CompanyId,
	                    InventoryItemDetails_HSNCodeId,
	                    Inventory_Category_Name, 
	                    Inventory_Type_Name, 
	                    Inventory_Company_Name, 
	                    HSN_Code_Name, 
                        Class_Name
                    from tbl_InventoryItemDetails
                    left join tbl_Inventory_Category on Inventory_Category_Id = InventoryItemDetails_CategoryId
                    left join tbl_Inventory_Type on Inventory_Type_Id = InventoryItemDetails_TypeId
                    left join tbl_Inventory_Company on Inventory_Company_Id = InventoryItemDetails_CompanyId
                    left join tbl_HSN_Code on HSN_Code_Id = InventoryItemDetails_HSNCodeId
                    left join tbl_Class on Class_Id = InventoryItemDetails_ClassId
                    where InventoryItemDetails_Status = 1 ";
        if (Category_Id > 0)
        {
            strQuery += "and InventoryItemDetails_CategoryId = '" + Category_Id + "'";
        }
        if (Type_Id > 0)
        {
            strQuery += "and InventoryItemDetails_TypeId = '" + Type_Id + "'";
        }
        if (Company_Id > 0)
        {
            strQuery += "and InventoryItemDetails_CompanyId = '" + Company_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_InventoryItemDetails(tbl_InventoryItemDetails obj_tbl_InventoryItemDetails)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (obj_tbl_InventoryItemDetails.InventoryItemDetails_Id > 0)
                {
                    Update_tbl_InventoryItemDetails(obj_tbl_InventoryItemDetails, trans, cn);
                }
                else
                {
                    Insert_tbl_InventoryItemDetails(obj_tbl_InventoryItemDetails, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_InventoryItemDetails(tbl_InventoryItemDetails obj_tbl_InventoryItemDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_InventoryItemDetails ( [InventoryItemDetails_AddedBy],[InventoryItemDetails_AddedOn],[InventoryItemDetails_CategoryId],[InventoryItemDetails_DIA],[InventoryItemDetails_CompanyId],[InventoryItemDetails_ClassId],[InventoryItemDetails_HSNCodeId],[InventoryItemDetails_ItemName],[InventoryItemDetails_Status],[InventoryItemDetails_TypeId],[InventoryItemDetails_UnitId],[InventoryItemDetails_Length], [InventoryItemDetails_Bredth], [InventoryItemDetails_Height], [InventoryItemDetails_Guage]) values ('" + obj_tbl_InventoryItemDetails.InventoryItemDetails_AddedBy + "', getdate(), '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_CategoryId + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_DIA + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_CompanyId + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_ClassId + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_HSNCodeId + "',N'" + obj_tbl_InventoryItemDetails.InventoryItemDetails_ItemName + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Status + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_TypeId + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_UnitId + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Length + "', '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Bredth + "','" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Height + "', '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Guage + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_InventoryItemDetails(tbl_InventoryItemDetails obj_tbl_InventoryItemDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_InventoryItemDetails set [InventoryItemDetails_ModifiedBy] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_AddedBy + "', [InventoryItemDetails_ModifiedOn] = getdate(), [InventoryItemDetails_CategoryId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_CategoryId + "', [InventoryItemDetails_DIA] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_DIA + "', [InventoryItemDetails_CompanyId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_CompanyId + "', [InventoryItemDetails_ClassId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_ClassId + "', [InventoryItemDetails_HSNCodeId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_HSNCodeId + "', [InventoryItemDetails_ItemName] = N'" + obj_tbl_InventoryItemDetails.InventoryItemDetails_ItemName + "', [InventoryItemDetails_TypeId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_TypeId + "', [InventoryItemDetails_UnitId] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_UnitId + "', [InventoryItemDetails_Length] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Length + "', [InventoryItemDetails_Bredth] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Bredth + "', [InventoryItemDetails_Height] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Height + "', [InventoryItemDetails_Guage] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Guage + "' where [InventoryItemDetails_Status] = 1 and [InventoryItemDetails_Id] = '" + obj_tbl_InventoryItemDetails.InventoryItemDetails_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_InventoryItemDetails(int InventoryItemDetails_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_InventoryItemDetails set   InventoryItemDetails_Status = 0, InventoryItemDetails_ModifiedBy = '" + person_Id + "',InventoryItemDetails_ModifiedOn = getdate() where InventoryItemDetails_Id = '" + InventoryItemDetails_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Item Stock
    public DataSet get_tbl_InventoryItemStockDetails(int Category_Id, int Type_Id, int Company_Id, int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    InventoryItemStockDetails_Id,
                        InventoryItemStockDetails_ZoneId, 
                        InventoryItemStockDetails_CircleId, 
                        InventoryItemStockDetails_DivisionId, 
	                    InventoryItemDetails_Id,
	                    InventoryItemDetails_DIA,
                        InventoryItemDetails_Guage,
	                    InventoryItemDetails_Length,
	                    InventoryItemDetails_Bredth,
	                    InventoryItemDetails_Height,
	                    InventoryItemDetails_ClassId,
	                    InventoryItemDetails_ItemName,
	                    InventoryItemDetails_UnitId,
	                    InventoryItemDetails_CategoryId,
	                    InventoryItemDetails_TypeId,
	                    InventoryItemDetails_CompanyId,
	                    InventoryItemDetails_HSNCodeId,
	                    Inventory_Category_Name, 
	                    Inventory_Type_Name, 
	                    Inventory_Company_Name, 
	                    HSN_Code_Name, 
                        Class_Name, 
                        Zone_Name, 
                        Circle_Name, 
                        Division_Name,
						InventoryItemStockDetails_ItemId,
						InventoryItemStockDetails_Rate,
						InventoryItemStockDetails_Depriciation,
						InventoryItemStockDetails_Quantity
                    from tbl_InventoryItemDetails
					left join tbl_InventoryItemStockDetails on InventoryItemDetails_Id = InventoryItemStockDetails_ItemId and InventoryItemStockDetails_Status = 1
                    left join tbl_Inventory_Category on Inventory_Category_Id = InventoryItemDetails_CategoryId
                    left join tbl_Inventory_Type on Inventory_Type_Id = InventoryItemDetails_TypeId
                    left join tbl_Inventory_Company on Inventory_Company_Id = InventoryItemDetails_CompanyId
                    left join tbl_HSN_Code on HSN_Code_Id = InventoryItemDetails_HSNCodeId
                    left join tbl_Class on Class_Id = InventoryItemDetails_ClassId
                    left join tbl_Division on Division_Id = InventoryItemStockDetails_DivisionId
                    left join tbl_Circle on Circle_Id = InventoryItemStockDetails_CircleId
                    left join tbl_Zone on Zone_Id = InventoryItemStockDetails_ZoneId
                    where InventoryItemDetails_Status = 1 ";
        if (Category_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_CategoryId = '" + Category_Id + "'";
        }
        if (Type_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_TypeId = '" + Type_Id + "'";
        }
        if (Company_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_CompanyId = '" + Company_Id + "'";
        }
        if (Zone_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += "and InventoryItemStockDetails_DivisionId = '" + Division_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_InventoryItemStockDetails(tbl_InventoryItemStockDetails obj_tbl_InventoryItemStockDetails)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Id > 0)
                {
                    Update_tbl_InventoryItemStockDetails(obj_tbl_InventoryItemStockDetails, trans, cn);
                }
                else
                {
                    Insert_tbl_InventoryItemStockDetails(obj_tbl_InventoryItemStockDetails, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_InventoryItemStockDetails(tbl_InventoryItemStockDetails obj_tbl_InventoryItemStockDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_InventoryItemStockDetails ( [InventoryItemStockDetails_AddedBy],[InventoryItemStockDetails_AddedOn],[InventoryItemStockDetails_Depriciation],[InventoryItemStockDetails_ItemId],[InventoryItemStockDetails_Quantity],[InventoryItemStockDetails_Rate],[InventoryItemStockDetails_Status], [InventoryItemStockDetails_ZoneId], [InventoryItemStockDetails_CircleId], [InventoryItemStockDetails_DivisionId]) values ('" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_AddedBy + "', getdate(), '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Depriciation + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_ItemId + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Quantity + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Rate + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Status + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_ZoneId + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_CircleId + "', '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_DivisionId + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    private void Update_tbl_InventoryItemStockDetails(tbl_InventoryItemStockDetails obj_tbl_InventoryItemStockDetails, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_InventoryItemStockDetails set [InventoryItemStockDetails_ModifiedBy] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_AddedBy + "',[InventoryItemStockDetails_AddedOn] = getdate(), [InventoryItemStockDetails_Depriciation] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Depriciation + "',[InventoryItemStockDetails_ItemId] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_ItemId + "', [InventoryItemStockDetails_Quantity] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Quantity + "', [InventoryItemStockDetails_Rate] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Rate + "', [InventoryItemStockDetails_ZoneId] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_ZoneId + "', [InventoryItemStockDetails_CircleId] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_CircleId + "', [InventoryItemStockDetails_DivisionId] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_DivisionId + "' where [InventoryItemStockDetails_Status] = 1 and [InventoryItemStockDetails_Id] = '" + obj_tbl_InventoryItemStockDetails.InventoryItemStockDetails_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_InventoryItemStockDetails(int InventoryItemStockDetails_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_InventoryItemStockDetails set   InventoryItemStockDetails_Status = 0, InventoryItemStockDetails_ModifiedBy='" + person_Id + "',InventoryItemStockDetails_ModifiedOn = getdate() where InventoryItemStockDetails_Id = '" + InventoryItemStockDetails_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Class 
    public DataSet get_tbl_Class()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy;
                    select
                        Class_Id,
                        Class_Name,
                        Class_AddedOn,
                        Class_AddedBy,
                        Class_Status,
                        isnull(tbl_PersonDetail.Person_Name,'Backend Entry') CreatedBy,
                        Created_Date=Class_AddedOn,tbl_PersonDetail1.Person_Name as ModifiedBy,
                        Mdified_Date=Class_ModifiedOn
                    from tbl_Class 
                    left join tbl_PersonDetail on Person_Id=Class_AddedBy
                    left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id=Class_ModifiedBy
                    where Class_Status=1 
                    order by Class_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_Class(tbl_Class obj_tbl_Class, int Class_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyClass(obj_tbl_Class.Class_Name, Class_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (Class_Id == 0)
                {
                    Insert_tbl_Class(obj_tbl_Class, trans, cn);
                }
                else
                {
                    obj_tbl_Class.Class_Id = Class_Id;
                    Update_tbl_Class(obj_tbl_Class, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyClass(string ClassName, string Class_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_Class  where Class_Status = 1 and  Class_Name = '" + ClassName + "' ";
        if (Class_Id != "0")
        {
            strQuery += " AND Class_Id  <> '" + Class_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_Class(tbl_Class obj_tbl_Class, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_Class( [Class_AddedBy],[Class_AddedOn],[Class_Name],[Class_Status] ) values('" +
            obj_tbl_Class.Class_AddedBy + "', getdate(), N'" +
            obj_tbl_Class.Class_Name + "','" +
            obj_tbl_Class.Class_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_Class(tbl_Class obj_tbl_Class, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_Class set  Class_Name = N'" + obj_tbl_Class.Class_Name + "',Class_ModifiedOn = getDate(),Class_ModifiedBy = '" + obj_tbl_Class.Class_AddedBy + "' where Class_Id = '" + obj_tbl_Class.Class_Id + "' and Class_Status = '" + obj_tbl_Class.Class_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_Class(int Class_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_Class set   Class_Status = 0,Class_ModifiedBy='" + person_Id + "',Class_ModifiedOn=getdate() where Class_Id = '" + Class_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Basic Download
    public DataSet get_tbl_DownloadsOther()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        DownloadsOther_Id,  
                        DownloadsOther_Name, 
                        DownloadsOther_URL, 
                        DownloadsOther_Status, 
                        DownloadsOther_Ref_No, 
                        DownloadsOther_Date = convert(char(10), DownloadsOther_Date, 103)
                    from tbl_DownloadsOther  
                    where DownloadsOther_Status = 1 
                    order by DownloadsOther_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_DownloadsOther(tbl_DownloadsOther obj_tbl_DownloadsOther)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\App\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\App\\");
                }
                if (obj_tbl_DownloadsOther.DownloadsOther_Bytes != null && obj_tbl_DownloadsOther.DownloadsOther_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + ".pdf";
                    obj_tbl_DownloadsOther.DownloadsOther_URL = "\\Downloads\\App\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\App\\" + fileName, obj_tbl_DownloadsOther.DownloadsOther_Bytes);
                }
                Insert_tbl_DownloadsOther(obj_tbl_DownloadsOther, trans, cn);
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_DownloadsOther(tbl_DownloadsOther obj_tbl_Post, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_DownloadsOther (DownloadsOther_Name, DownloadsOther_URL, DownloadsOther_AddedBy, DownloadsOther_AddedOn, DownloadsOther_Status, DownloadsOther_Date, DownloadsOther_Ref_No) values ('" + obj_tbl_Post.DownloadsOther_Name + "', '" + obj_tbl_Post.DownloadsOther_URL + "', '" + obj_tbl_Post.DownloadsOther_AddedBy + "',getdate(),'" + obj_tbl_Post.DownloadsOther_Status + "', convert(date, '" + obj_tbl_Post.DownloadsOther_Date + "', 103), '" + obj_tbl_Post.DownloadsOther_Ref_No + "');Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    public bool Delete_tbl_DownloadsOther(int AddedBy, int DownloadsOther_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string strQuery = "";
                strQuery = " set dateformat dmy; Update  tbl_DownloadsOther set   DownloadsOther_Status = 0,DownloadsOther_Modifiedby='" + AddedBy + "',DownloadsOther_ModifiedOn=getdate() where DownloadsOther_Id = '" + DownloadsOther_Id + "' ";
                if (trans == null)
                {
                    ExecuteSelectQuery(strQuery);
                }
                else
                {
                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region Component Benf Details
    public DataSet get_tbl_ProjectWorkComponentBenfDtls(int Component_Id, int ProjectWork_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectWorkComponentBenfDtls_Id,
                        ProjectWorkComponentBenfDtls_Component_Id,
                        ProjectWorkComponentBenfDtls_Work_Id,
                        ProjectWorkComponentBenfDtls_Name,
                        ProjectWorkComponentBenfDtls_MobileNo,
                        ProjectWorkComponentBenfDtls_AadharNo,
                        ProjectWorkComponentBenfDtls_Path,
                        ProjectWorkComponentBenfDtls_Comments,
                        ProjectWorkComponentBenfDtls_AddedBy,
                        ProjectWorkComponentBenfDtls_AddedOn,
                        ProjectWorkComponentBenfDtls_Status
                    from tbl_ProjectWorkComponentBenfDtls  
                    where ProjectWorkComponentBenfDtls_Status = 1 ";
        if (Component_Id > 0)
        {
            strQuery += " and ProjectWorkComponentBenfDtls_Component_Id = '" + Component_Id + "'";
        }
        if (ProjectWork_Id > 0)
        {
            strQuery += " and ProjectWorkComponentBenfDtls_Work_Id = '" + ProjectWork_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_ProjectWorkComponentBenfDtls(tbl_ProjectWorkComponentBenfDtls obj_tbl_ProjectWorkComponentBenfDtls, tbl_ProjectPkg_PhysicalProgress obj_tbl_ProjectPkg_PhysicalProgress, tbl_ProjectUC_PhysicalProgress obj_tbl_ProjectUC_PhysicalProgress, int Scheme_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Component\\"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Component\\");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Component\\" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Work_Id.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\Component\\" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Work_Id.ToString());
                }
                if (obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path_Bytes != null && obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path_Bytes.Length > 0)
                {
                    fileName = DateTime.Now.Ticks.ToString("x") + "." + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path;
                    obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path = "\\Downloads\\Component\\" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Work_Id.ToString() + "\\" + fileName;
                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Component\\" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Work_Id.ToString() + "\\" + fileName, obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path_Bytes);
                }
                Insert_tbl_ProjectWorkComponentBenfDtls(obj_tbl_ProjectWorkComponentBenfDtls, trans, cn);

                if (Scheme_Id == 1016)
                {
                    string sql = "";

                    sql = @"set dateformat dmy; 
                        select 
                            ProjectWorkComponentBenfDtls_Id,
                            ProjectWorkComponentBenfDtls_Component_Id,
                            ProjectWorkComponentBenfDtls_Work_Id,
                            ProjectWorkComponentBenfDtls_Name,
                            ProjectWorkComponentBenfDtls_MobileNo,
                            ProjectWorkComponentBenfDtls_AadharNo,
                            ProjectWorkComponentBenfDtls_Path,
                            ProjectWorkComponentBenfDtls_Comments,
                            ProjectWorkComponentBenfDtls_AddedBy,
                            ProjectWorkComponentBenfDtls_AddedOn,
                            ProjectWorkComponentBenfDtls_Status
                        from tbl_ProjectWorkComponentBenfDtls  
                        where ProjectWorkComponentBenfDtls_Status = 1 and ProjectWorkComponentBenfDtls_Component_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id + "' and ProjectWorkComponentBenfDtls_Work_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PrjectWork_Id + "'";
                    ds = ExecuteSelectQuerywithTransaction(cn, sql, trans);

                    int _ProgressCount = 0;
                    try
                    {
                        _ProgressCount = ds.Tables[0].Rows.Count;
                    }
                    catch
                    {
                        _ProgressCount = 0;
                    }

                    sql = "set dateformat dmy; update tbl_Projectpkg_PhysicalProgress set Projectpkg_PhysicalProgress_ModifiedOn = getdate(), Projectpkg_PhysicalProgress_ModifiedBy = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_AddedBy + "', Projectpkg_PhysicalProgress_Status = 0 where Projectpkg_PhysicalProgress_Status = 1 and ProjectPkg_PhysicalProgress_PrjectWork_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PrjectWork_Id + "' and ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id + "'";
                    ExecuteSelectQuerywithTransaction(cn, sql, trans);

                    obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_Value = _ProgressCount;
                    Insert_tbl_ProjectPkg_PhysicalProgress(obj_tbl_ProjectPkg_PhysicalProgress, trans, cn);

                    obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgress = _ProgressCount;
                    Insert_tbl_ProjectUC_PhysicalProgress(obj_tbl_ProjectUC_PhysicalProgress, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_ProjectWorkComponentBenfDtls(tbl_ProjectWorkComponentBenfDtls obj_tbl_ProjectWorkComponentBenfDtls, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_ProjectWorkComponentBenfDtls ( [ProjectWorkComponentBenfDtls_AadharNo],[ProjectWorkComponentBenfDtls_AddedBy],[ProjectWorkComponentBenfDtls_AddedOn],[ProjectWorkComponentBenfDtls_Comments],[ProjectWorkComponentBenfDtls_Component_Id],[ProjectWorkComponentBenfDtls_MobileNo],[ProjectWorkComponentBenfDtls_Name],[ProjectWorkComponentBenfDtls_Path],[ProjectWorkComponentBenfDtls_Status],[ProjectWorkComponentBenfDtls_Work_Id] ) values (N'" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_AadharNo + "','" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_AddedBy + "', getdate(), N'" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Comments + "','" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Component_Id + "',N'" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_MobileNo + "',N'" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Name + "',N'" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Path + "','" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Status + "','" + obj_tbl_ProjectWorkComponentBenfDtls.ProjectWorkComponentBenfDtls_Work_Id + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_tbl_ProjectWorkComponentBenfDtls(int ProjectWorkComponentBenfDtls_Id, int AddedBy, tbl_ProjectPkg_PhysicalProgress obj_tbl_ProjectPkg_PhysicalProgress, tbl_ProjectUC_PhysicalProgress obj_tbl_ProjectUC_PhysicalProgress, int Scheme_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string strQuery = "";
                strQuery = " set dateformat dmy; Update  tbl_ProjectWorkComponentBenfDtls set ProjectWorkComponentBenfDtls_Status = 0, ProjectWorkComponentBenfDtls_ModifiedBy = '" + AddedBy + "', ProjectWorkComponentBenfDtls_ModifiedOn = getdate() where ProjectWorkComponentBenfDtls_Id = '" + ProjectWorkComponentBenfDtls_Id + "' ";
                ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                if (Scheme_Id == 1016)
                {
                    string sql = "";

                    sql = @"set dateformat dmy; 
                            select 
                                ProjectWorkComponentBenfDtls_Id,
                                ProjectWorkComponentBenfDtls_Component_Id,
                                ProjectWorkComponentBenfDtls_Work_Id,
                                ProjectWorkComponentBenfDtls_Name,
                                ProjectWorkComponentBenfDtls_MobileNo,
                                ProjectWorkComponentBenfDtls_AadharNo,
                                ProjectWorkComponentBenfDtls_Path,
                                ProjectWorkComponentBenfDtls_Comments,
                                ProjectWorkComponentBenfDtls_AddedBy,
                                ProjectWorkComponentBenfDtls_AddedOn,
                                ProjectWorkComponentBenfDtls_Status
                            from tbl_ProjectWorkComponentBenfDtls  
                            where ProjectWorkComponentBenfDtls_Status = 1 and ProjectWorkComponentBenfDtls_Component_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id + "' and ProjectWorkComponentBenfDtls_Work_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PrjectWork_Id + "'";
                    ds = ExecuteSelectQuerywithTransaction(cn, sql, trans);

                    int _ProgressCount = 0;
                    try
                    {
                        _ProgressCount = ds.Tables[0].Rows.Count;
                    }
                    catch
                    {
                        _ProgressCount = 0;
                    }

                    sql = "set dateformat dmy; update tbl_Projectpkg_PhysicalProgress set Projectpkg_PhysicalProgress_ModifiedOn = getdate(), Projectpkg_PhysicalProgress_ModifiedBy = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_AddedBy + "', Projectpkg_PhysicalProgress_Status = 0 where Projectpkg_PhysicalProgress_Status = 1 and ProjectPkg_PhysicalProgress_PrjectWork_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PrjectWork_Id + "' and ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id = '" + obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id + "'";
                    ExecuteSelectQuerywithTransaction(cn, sql, trans);

                    obj_tbl_ProjectPkg_PhysicalProgress.ProjectPkg_PhysicalProgress_Value = _ProgressCount;
                    Insert_tbl_ProjectPkg_PhysicalProgress(obj_tbl_ProjectPkg_PhysicalProgress, trans, cn);

                    obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgress = _ProgressCount;
                    Insert_tbl_ProjectUC_PhysicalProgress(obj_tbl_ProjectUC_PhysicalProgress, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region DPR BID Process Status
    public DataSet get_DPR_BID_Process_Status_Summery(string Scheme_Id, int Zone_Id, int Circle_Id, int Division_Id, int District_Id, int ULB_Id, int Tranche_Id, string NodalDepartment_Id, string NodalDepartmentScheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    Zone_Id,
	                    Zone_Name, 
	                    Circle_Id, 
	                    Circle_Name, 
	                    count(*) TotalDPR, 
	                    Process_Not_Started = sum(case when isnull(ProjectDPRTender_Id, 0) = 0 then 1 else 0 end), 
	                    EFC_PFAD = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 1 then 1 else 0 end), 
	                    GO_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 2 then 1 else 0 end), 
	                    NIT_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 3 then 1 else 0 end), 
	                    NIT_Issued2 = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 4 then 1 else 0 end), 
	                    Tender_Published = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 5 then 1 else 0 end), 
	                    Pre_Bid_Meeting = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 6 then 1 else 0 end), 
	                    Technical_Bid_Opened = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 8 then 1 else 0 end), 
	                    Bidders_Evaluation_Technical = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 9 then 1 else 0 end), 
	                    Financial_Bid_Opened = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 10 then 1 else 0 end), 
	                    Send_To_SMD_For_Approval = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 11 then 1 else 0 end), 
	                    SLTC_Meeting_After_Tender_Approval = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 12 then 1 else 0 end), 
	                    Work_Order_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 13 then 1 else 0 end), 
	                    Agreement_With_Bidder = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 14 then 1 else 0 end) 
                    from tbl_ProjectDPR
                    left join
					(
						select 
							ROW_NUMBER() over (partition by ProjectDPRApproval_ProjectDPR_Id order by ProjectDPRApproval_Id desc) rrr,
							ProjectDPRApproval_Id,
							ProjectDPRApproval_Date = convert(char(10), ProjectDPRApproval_Date, 103),
							ProjectDPRApproval_ProjectDPR_Id,
							ProjectDPRApproval_Status_Id,
							ProjectDPRApproval_Comments,
							ProjectDPRApproval_AddedBy,
							ProjectDPRApproval_AddedOn,
							ProjectDPRApproval_Next_Organisation_Id,
							ProjectDPRApproval_Next_Designation_Id,
							ProjectDPRApproval_Status,
							ProjectDPRApproval_Step_Count, 
							ProjectDPRApproval_Loop 
						from tbl_ProjectDPRApproval
                        where ProjectDPRApproval_Status = 1
					) tProjectDPRApproval on ProjectDPR_Id = ProjectDPRApproval_ProjectDPR_Id and tProjectDPRApproval.rrr = 1
                    left join 
                    (
	                    select 
		                    ROW_NUMBER() over (partition by ProjectDPRTender_ProjectDPR_Id order by ProjectDPRTender_Id desc) rrDPR,
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1
                    ) tDPRTender on ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id and rrDPR = 1
                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    join tbl_Circle on Circle_Id = Division_CircleId
                    join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectDPR_Status = 1 and ProjectDPRApproval_Next_Designation_Id = -1 and ProjectDPRApproval_Next_Organisation_Id = -1 ";
        if (Scheme_Id != "")
        {
            strQuery += " and ProjectDPR_Project_Id in (" + Scheme_Id + ") ";
        }
        if (NodalDepartment_Id != "" && NodalDepartment_Id != "0")
        {
            strQuery += " and ProjectDPR_NodalDept_Id in (" + NodalDepartment_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        strQuery += @"group by Zone_Id, Zone_Name, Circle_Id, Circle_Name order by Zone_Name, Circle_Name";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_DPR_BID_Process_Status_Summery_CNDS(string Scheme_Id, int Zone_Id, int Circle_Id, int Division_Id, int District_Id, int ULB_Id, int Tranche_Id, string NodalDepartment_Id, string NodalDepartmentScheme_Id, int FundingPattern_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    Zone_Id,
	                    Zone_Name, 
	                    Circle_Id, 
	                    Circle_Name, 
	                    count(*) TotalDPR,
	                    PE_Done = sum(case when (isnull(tDPROther.ProjectDPR_Other_PE_Auth_Letter_Date, '') != '' or isnull(tDPROther.ProjectDPR_Other_PE_Date, '') != '' or isnull(tDPROther.ProjectDPR_Other_Nodal_Agency_Nomination_Date, '') != '') then 1 else 0 end),
	                    DPR_Prepared = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y') then 1 else 0 end),
	                    EFC_PFAD_Done = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y') then 1 else 0 end), 
	                    GO_Done = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then 1 else 0 end), 
	                    Form_J_Done = sum(case when (isnull(tProjectDPR_Form.ProjectDPR_Form_Work_TotalCost, 0) > 0) then 1 else 0 end), 
	                    DPR_Send_HQ_TS = sum(case when (isnull(tDPROther.ProjectDPR_Other_HQ_TS_Date, '') != '') then 1 else 0 end),
	                    TS_Approved_HQ = sum(case when (isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != '') then 1 else 0 end),
	                    NIT_Issued = sum(case when (isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '') then 1 else 0 end),
	                    Tender_Uploaded = sum(case when (isnull(tDPROther.ProjectDPR_Other_Tender_Uploading_Date, '') != '') then 1 else 0 end),
	                    Technical_Bid_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then 1 else 0 end),
	                    Financial_Bid_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != '') then 1 else 0 end), 
	                    Total_Bidders = sum(isnull(tProjectDPRBidder.Total_Bidders, 0)),
	                    Technically_Qualified = sum(isnull(tProjectDPRBidder.TechnicalQualified, 0)),
	                    Financially_Qualified = sum(isnull(tProjectDPRBidder.FinancialQualified, 0)), 
	                    L1_Selected = sum(isnull(tProjectDPRBidder.Qualified_Status, 0)), 
	                    LOA_Issued = sum(case when (isnull(tDPROther.ProjectDPR_Other_LOA_Issue_Date, '') != '') then 1 else 0 end),
	                    Work_Issued = sum(case when (isnull(tDPROther.ProjectDPR_Other_Work_Start_Date, '') != '') then 1 else 0 end),
	                    CB_Date = sum(case when (isnull(tDPROther.ProjectDPR_Other_CB_Date, '') != '') then 1 else 0 end)
                    from tbl_ProjectDPR
                    left join 
                    (
	                    select 
		                    ProjectDPR_Other_Id,
		                    ProjectDPR_Other_DPR_Id,
		                    ProjectDPR_Other_PE_Auth_Letter_Date = case when convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) end,
		                    ProjectDPR_Other_PE_Auth_Letter_Path,
		                    ProjectDPR_Other_PE_Date = case when convert(char(10), ProjectDPR_Other_PE_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Date, 103) end,
		                    ProjectDPR_Other_Nodal_Agency_Nomination_Date = case when convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) end,
		                    ProjectDPR_Other_LandAvailability_Date = case when convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) end,
		                    ProjectDPR_Other_DPR_Prepared,
		                    ProjectDPR_Other_Date_Sending_Client_Department = case when convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) end,
		                    ProjectDPR_Other_DPRApproval_Status,
		                    ProjectDPR_Other_HQ_TS_Date = case when convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) end,
		                    ProjectDPR_Other_TS_Approval_Date = case when convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) end,
		                    ProjectDPR_Other_NIT_Issue_Date = case when convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) end,
		                    ProjectDPR_Other_NIT_Cost,
		                    ProjectDPR_Other_Tender_Uploading_Date = case when convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Meeting_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Response_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum1_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum2_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum3_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) end,
		                    ProjectDPR_Other_Technical_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_Financial_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_LOA_Issue_Date = case when convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) end,
		                    ProjectDPR_Other_CB_Date = case when convert(char(10), ProjectDPR_Other_CB_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_CB_Date, 103) end,
		                    ProjectDPR_Other_Work_Start_Date = case when convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) end,
		                    ProjectDPR_Other_Comments
	                    from tbl_ProjectDPR_Other
	                    where ProjectDPR_Other_Status = 1  
                    ) tDPROther on tDPROther.ProjectDPR_Other_DPR_Id = ProjectDPR_Id
                    left join 
                    (
	                    select 
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate = case when convert(char(10), ProjectDPRTender_ActionDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_ActionDate, 103) end,
		                    ProjectDPRTender_DocumentPath,
		                    ProjectDPRTender_Comments,
		                    ProjectDPRTender_CostApproved,
		                    ProjectDPRTender_TenderEndDate = case when convert(char(10), ProjectDPRTender_TenderEndDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TenderEndDate, 103) end,
		                    ProjectDPRTender_TechnicalBidOpeningDate = case when convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) end,
		                    ProjectDPRTender_FinancialBidOpeningDate = case when convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) end,
		                    ProjectDPRTender_OMCostApproved,
		                    ProjectDPRTender_ACACostApproved,
		                    ProjectDPRTender_CentralShare,
		                    ProjectDPRTender_StateShare,
		                    ProjectDPRTender_CentageShare,
		                    ProjectDPRTender_TenderCost,
		                    ProjectDPRTender_ULBShare,
		                    ProjectDPRTender_CapexCostApproved,
		                    ProjectDPRTender_DocumentPath_A
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1 
                    ) tDPRTender on tDPRTender.ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id 
                    left join
                    (
	                    select 
		                    ProjectDPR_Form_Id,
		                    ProjectDPR_Form_DPR_Id,
		                    ProjectDPR_Form_Work_BasicCost,
		                    ProjectDPR_Form_Work_Contigency,
		                    ProjectDPR_Form_Work_ContigencyPer,
		                    ProjectDPR_Form_Work_NetCost,
		                    ProjectDPR_Form_Work_ProficiencyCost,
		                    ProjectDPR_Form_Work_WorkCost,
		                    ProjectDPR_Form_Work_Centage,
		                    ProjectDPR_Form_Work_CentagePer,
		                    ProjectDPR_Form_Work_GST,
		                    ProjectDPR_Form_Work_LabourCess,
		                    ProjectDPR_Form_Work_ElectricCost,
		                    ProjectDPR_Form_Work_BoughtOut,
		                    ProjectDPR_Form_Work_TotalCost,
		                    ProjectDPR_Form_Comments
	                    from tbl_ProjectDPR_Form
	                    where ProjectDPR_Form_Status = 1 
                    ) tProjectDPR_Form on tProjectDPR_Form.ProjectDPR_Form_DPR_Id = ProjectDPR_Id
                    left join
                    (
                        select 
		                    Total_Bidders = count(ProjectDPRBidder_Id),
		                    ProjectDPRBidder_DPR_Id,
                            TechnicalQualified = sum(case when isnull(ProjectDPRBidder_TechnicalQualified, 0) = 1 then 1 else 0 end),
                            FinancialQualified = sum(case when isnull(ProjectDPRBidder_FinancialQualified, 0) = 1 then 1 else 0 end),
                            Qualified_Status = max(case when isnull(ProjectDPRBidder_Qualified_Status, '') = 'L1' then 1 else 0 end)
                        from tbl_ProjectDPRBidder
                        where ProjectDPRBidder_Status = 1
	                    group by ProjectDPRBidder_DPR_Id
                    ) tProjectDPRBidder on tProjectDPRBidder.ProjectDPRBidder_DPR_Id = ProjectDPR_Id
                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    join tbl_Circle on Circle_Id = Division_CircleId
                    join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectDPR_Status = 1 ";
        if (Scheme_Id != "")
        {
            strQuery += " and ProjectDPR_Project_Id in (" + Scheme_Id + ") ";
        }
        if (NodalDepartment_Id != "" && NodalDepartment_Id != "0")
        {
            strQuery += " and ProjectDPR_NodalDept_Id in (" + NodalDepartment_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (FundingPattern_Id != 0)
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        strQuery += @"group by Zone_Id, Zone_Name, Circle_Id, Circle_Name order by Zone_Name, Circle_Name";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_DPR_BID_Process_Status_Dashboard_CNDS(string Scheme_Id, int Zone_Id, int Circle_Id, int Division_Id, int District_Id, int ULB_Id, int Tranche_Id, string NodalDepartment_Id, string NodalDepartmentScheme_Id, int FundingPattern_Id, int Jurisdiction_In)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    count(*) TotalDPR,
	                    TotalDPRCost = sum(isnull(ProjectDPR_ACA_Cost, 0)),
	
	                    GO_Done = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then 1 else 0 end), 
	                    GO_DoneCost = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 
	
	                    GO_Pending = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') = '') then 1 else 0 end),
	                    GO_PendingCost = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') = '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),
	
	                    DPR_To_Be_Prepared = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then 1 else 0 end), 
	                    DPR_To_Be_PreparedCost = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 
	
	                    DPR_Prepared_And_Send_Client = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') != '') then 1 else 0 end),
	                    DPR_Prepared_And_Send_ClientCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),

	                    DPR_Approved_By_Client = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y') then 1 else 0 end),
	                    DPR_Approved_By_ClientCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),
	
	                    TS_Done_HQ = sum(case when (isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != '') then 1 else 0 end),
	                    TS_Done_HQCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),
	
	                    TS_Pending_HQ = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y') then 1 else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != '') then 1 else 0 end), 
	                    TS_Pending_HQCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 

	                    DPR_Under_Preparation = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then 1 else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') != '') then 1 else 0 end), 
	                    DPR_Under_PreparationCost = sum(case when (isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 

	                    NIT_Floated = sum(case when (isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '') then 1 else 0 end), 
	                    NIT_FloatedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 
	
	                    Technical_Bid_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then 1 else 0 end),
	                    Technical_Bid_OpenedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),
	
	                    Technical_Bid_To_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '') then 1 else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then 1 else 0 end),
	                    Technical_Bid_To_OpenedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),

	                    Financial_Bid_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != '') then 1 else 0 end), 
	                    Financial_Bid_OpenedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end), 
	
	                    Financial_Bid_To_Opened = sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then 1 else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != '') then 1 else 0 end),
	                    Financial_Bid_To_OpenedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end) - sum(case when (isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),

	                    LOA_Issued = sum(case when (isnull(tDPROther.ProjectDPR_Other_LOA_Issue_Date, '') != '') then 1 else 0 end),
	                    LOA_IssuedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_LOA_Issue_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end),
	
	                    Work_Started = sum(case when (isnull(tDPROther.ProjectDPR_Other_Work_Start_Date, '') != '') then 1 else 0 end),
	                    Work_StartedCost = sum(case when (isnull(tDPROther.ProjectDPR_Other_Work_Start_Date, '') != '') then isnull(ProjectDPR_ACA_Cost, 0) else 0 end)
                    from tbl_ProjectDPR
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectDPR_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join 
                    (
	                    select 
		                    ProjectDPR_Other_Id,
		                    ProjectDPR_Other_DPR_Id,
		                    ProjectDPR_Other_PE_Auth_Letter_Date = case when convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) end,
		                    ProjectDPR_Other_PE_Auth_Letter_Path,
		                    ProjectDPR_Other_PE_Date = case when convert(char(10), ProjectDPR_Other_PE_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Date, 103) end,
		                    ProjectDPR_Other_Nodal_Agency_Nomination_Date = case when convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) end,
		                    ProjectDPR_Other_LandAvailability_Date = case when convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) end,
		                    ProjectDPR_Other_DPR_Prepared,
		                    ProjectDPR_Other_Date_Sending_Client_Department = case when convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) end,
		                    ProjectDPR_Other_DPRApproval_Status,
		                    ProjectDPR_Other_HQ_TS_Date = case when convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) end,
		                    ProjectDPR_Other_TS_Approval_Date = case when convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) end,
		                    ProjectDPR_Other_NIT_Issue_Date = case when convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) end,
		                    ProjectDPR_Other_NIT_Cost,
		                    ProjectDPR_Other_Tender_Uploading_Date = case when convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Meeting_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Response_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum1_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum2_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum3_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) end,
		                    ProjectDPR_Other_Technical_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_Financial_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_LOA_Issue_Date = case when convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) end,
		                    ProjectDPR_Other_CB_Date = case when convert(char(10), ProjectDPR_Other_CB_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_CB_Date, 103) end,
		                    ProjectDPR_Other_Work_Start_Date = case when convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) end,
		                    ProjectDPR_Other_Comments
	                    from tbl_ProjectDPR_Other
	                    where ProjectDPR_Other_Status = 1  
                    ) tDPROther on tDPROther.ProjectDPR_Other_DPR_Id = ProjectDPR_Id
                    left join 
                    (
	                    select 
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate = case when convert(char(10), ProjectDPRTender_ActionDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_ActionDate, 103) end,
		                    ProjectDPRTender_DocumentPath,
		                    ProjectDPRTender_Comments,
		                    ProjectDPRTender_CostApproved,
		                    ProjectDPRTender_TenderEndDate = case when convert(char(10), ProjectDPRTender_TenderEndDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TenderEndDate, 103) end,
		                    ProjectDPRTender_TechnicalBidOpeningDate = case when convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) end,
		                    ProjectDPRTender_FinancialBidOpeningDate = case when convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) end,
		                    ProjectDPRTender_OMCostApproved,
		                    ProjectDPRTender_ACACostApproved,
		                    ProjectDPRTender_CentralShare,
		                    ProjectDPRTender_StateShare,
		                    ProjectDPRTender_CentageShare,
		                    ProjectDPRTender_TenderCost,
		                    ProjectDPRTender_ULBShare,
		                    ProjectDPRTender_CapexCostApproved,
		                    ProjectDPRTender_DocumentPath_A
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1 
                    ) tDPRTender on tDPRTender.ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id 
                    left join
                    (
	                    select 
		                    ProjectDPR_Form_Id,
		                    ProjectDPR_Form_DPR_Id,
		                    ProjectDPR_Form_Work_BasicCost,
		                    ProjectDPR_Form_Work_Contigency,
		                    ProjectDPR_Form_Work_ContigencyPer,
		                    ProjectDPR_Form_Work_NetCost,
		                    ProjectDPR_Form_Work_ProficiencyCost,
		                    ProjectDPR_Form_Work_WorkCost,
		                    ProjectDPR_Form_Work_Centage,
		                    ProjectDPR_Form_Work_CentagePer,
		                    ProjectDPR_Form_Work_GST,
		                    ProjectDPR_Form_Work_LabourCess,
		                    ProjectDPR_Form_Work_ElectricCost,
		                    ProjectDPR_Form_Work_BoughtOut,
		                    ProjectDPR_Form_Work_TotalCost,
		                    ProjectDPR_Form_Comments
	                    from tbl_ProjectDPR_Form
	                    where ProjectDPR_Form_Status = 1 
                    ) tProjectDPR_Form on tProjectDPR_Form.ProjectDPR_Form_DPR_Id = ProjectDPR_Id
                    left join
                    (
	                    select 
		                    Total_Bidders = count(ProjectDPRBidder_Id),
		                    ProjectDPRBidder_DPR_Id,
		                    TechnicalQualified = sum(case when isnull(ProjectDPRBidder_TechnicalQualified, 0) = 1 then 1 else 0 end),
		                    FinancialQualified = sum(case when isnull(ProjectDPRBidder_FinancialQualified, 0) = 1 then 1 else 0 end),
		                    Qualified_Status = max(case when isnull(ProjectDPRBidder_Qualified_Status, '') = 'L1' then 1 else 0 end)
	                    from tbl_ProjectDPRBidder
	                    where ProjectDPRBidder_Status = 1
	                    group by ProjectDPRBidder_DPR_Id
                    ) tProjectDPRBidder on tProjectDPRBidder.ProjectDPRBidder_DPR_Id = ProjectDPR_Id
                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    join tbl_Circle on Circle_Id = Division_CircleId
                    join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectDPR_Status = 1 ";
        if (Scheme_Id != "")
        {
            strQuery += " and ProjectDPR_Project_Id in (" + Scheme_Id + ") ";
        }
        if (NodalDepartment_Id != "" && NodalDepartment_Id != "0")
        {
            strQuery += " and ProjectDPR_NodalDept_Id in (" + NodalDepartment_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (FundingPattern_Id != 0)
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery += " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1";
            }
            if (Jurisdiction_In == 0)
            {
                strQuery += " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1";
            }
        }
        else
        {

        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_tbl_ProjectWorkDPR_BPM(string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, int ProjectType_Id, int ProjectDPR_Id, int Step_Id, int Tranche_Id, string NodalDepartment_Id, string NodalDepartmentScheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectDPR_Id, 
                        ProjectDPR_Project_Id, 
                        Project_Name, 
                        ProjectDPR_Name = REPLACE(REPLACE(ProjectDPR_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectDPR_ProjectTypeId,
						ProjectType_Name,
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Circle_Id, 
						Zone_Name, 
						Zone_Id, 
						ProjectDPR_DistrictId, 
                        ProjectDPR_ULBId, 
						ProjectDPR_DivisionId, 
						Division_CircleId, 
                        ProjectDPR_CapexCost = convert(decimal(18, 2), ProjectDPR_CapexCost),
                        ProjectDPR_OandM_Cost = convert(decimal(18, 2), ProjectDPR_OandM_Cost),
                        ProjectDPR_ACA_Cost = convert(decimal(18, 2), ProjectDPR_ACA_Cost),
                        ProjectDPR_Project_Cost = convert(decimal(18, 2), ProjectDPR_Project_Cost),
                        ProjectDPR_Comments,
                        ProjectDPR_AddedOn,
                        ProjectDPR_Code,
						tDPRTender.ProjectDPRTender_Id, 
						tDPRTender.ProjectDPRTender_ProjectDPR_Id, 
						ProjectDPRTender_Step_Status = isnull(tDPRTender.ProjectDPRTender_Step_Status, -3), 
						ProjectDPRTender_ActionDate = convert(char(10), tDPRTender.ProjectDPRTender_ActionDate, 103), 
						DPRTenderSteps_StepName, 
						tDPRTenderAll.EFC_PFAD, 
						tDPRTenderAll.GO_Issued, 
						tDPRTenderAll.NIT_Issued, 
						tDPRTenderAll.Tender_Published, 
						tDPRTenderAll.Pre_Bid_Meeting, 
						tDPRTenderAll.Technical_Bid_Opened, 
						tDPRTenderAll.Bidders_Evaluation_Technical, 
						tDPRTenderAll.Financial_Bid_Opened, 
						tDPRTenderAll.Send_To_SMD_For_Approval, 
						tDPRTenderAll.SLTC_Meeting_After_Tender_Approval, 
						tDPRTenderAll.Work_Order_Issued, 
						tDPRTenderAll.Agreement_With_Bidder, 

						tDPRTenderAll.EFC_PFAD_Id, 
						tDPRTenderAll.GO_Issued_Id, 
						tDPRTenderAll.NIT_Issued_Id, 
						tDPRTenderAll.Tender_Published_Id, 
						tDPRTenderAll.Pre_Bid_Meeting_Id, 
						tDPRTenderAll.Technical_Bid_Opened_Id, 
						tDPRTenderAll.Bidders_Evaluation_Technical_Id, 
						tDPRTenderAll.Financial_Bid_Opened_Id, 
						tDPRTenderAll.Send_To_SMD_For_Approval_Id, 
						tDPRTenderAll.SLTC_Meeting_After_Tender_Approval_Id, 
						tDPRTenderAll.Work_Order_Issued_Id, 
						tDPRTenderAll.Agreement_With_Bidder_Id, 
                        ProjectDPR_TentitiveDate = case when convert(char(10), ProjectDPR_TentitiveDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_TentitiveDate, 103) end 
                    from tbl_ProjectDPR 
                    left join
					(
						select 
							ROW_NUMBER() over (partition by ProjectDPRApproval_ProjectDPR_Id order by ProjectDPRApproval_Id desc) rrr,
							ProjectDPRApproval_Id,
							ProjectDPRApproval_Date = convert(char(10), ProjectDPRApproval_Date, 103),
							ProjectDPRApproval_ProjectDPR_Id,
							ProjectDPRApproval_Status_Id,
							ProjectDPRApproval_Comments,
							ProjectDPRApproval_AddedBy,
							ProjectDPRApproval_AddedOn,
							ProjectDPRApproval_Next_Organisation_Id,
							ProjectDPRApproval_Next_Designation_Id,
							ProjectDPRApproval_Status,
							ProjectDPRApproval_Step_Count, 
							ProjectDPRApproval_Loop 
						from tbl_ProjectDPRApproval
                        where ProjectDPRApproval_Status = 1
					) tProjectDPRApproval on ProjectDPR_Id = ProjectDPRApproval_ProjectDPR_Id and tProjectDPRApproval.rrr = 1
					left join 
                    (
	                    select 
		                    ROW_NUMBER() over (partition by ProjectDPRTender_ProjectDPR_Id order by ProjectDPRTender_Id desc) rrDPR,
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1
                    ) tDPRTender on tDPRTender.ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id and rrDPR = 1
					left join 
                    (
	                    select 
		                    EFC_PFAD = max(case when ProjectDPRTender_Step_Status = 1 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    GO_Issued = max(case when ProjectDPRTender_Step_Status = 2 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    NIT_Issued = max(case when ProjectDPRTender_Step_Status = 3 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Tender_Published = max(case when ProjectDPRTender_Step_Status = 5 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Pre_Bid_Meeting = max(case when ProjectDPRTender_Step_Status = 6 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Technical_Bid_Opened = max(case when ProjectDPRTender_Step_Status = 8 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Bidders_Evaluation_Technical = max(case when ProjectDPRTender_Step_Status = 9 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Financial_Bid_Opened = max(case when ProjectDPRTender_Step_Status = 10 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Send_To_SMD_For_Approval = max(case when ProjectDPRTender_Step_Status = 11 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    SLTC_Meeting_After_Tender_Approval = max(case when ProjectDPRTender_Step_Status = 12 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Work_Order_Issued = max(case when ProjectDPRTender_Step_Status = 13 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),
		                    Agreement_With_Bidder = max(case when ProjectDPRTender_Step_Status = 14 then convert(char(10), ProjectDPRTender_ActionDate, 103) else null end),

							EFC_PFAD_Id = max(case when ProjectDPRTender_Step_Status = 1 then ProjectDPRTender_Id else null end),
		                    GO_Issued_Id = max(case when ProjectDPRTender_Step_Status = 2 then ProjectDPRTender_Id else null end),
		                    NIT_Issued_Id = max(case when ProjectDPRTender_Step_Status = 3 then ProjectDPRTender_Id else null end),
		                    Tender_Published_Id = max(case when ProjectDPRTender_Step_Status = 5 then ProjectDPRTender_Id else null end),
		                    Pre_Bid_Meeting_Id = max(case when ProjectDPRTender_Step_Status = 6 then ProjectDPRTender_Id else null end),
		                    Technical_Bid_Opened_Id = max(case when ProjectDPRTender_Step_Status = 8 then ProjectDPRTender_Id else null end),
		                    Bidders_Evaluation_Technical_Id = max(case when ProjectDPRTender_Step_Status = 9 then ProjectDPRTender_Id else null end),
		                    Financial_Bid_Opened_Id = max(case when ProjectDPRTender_Step_Status = 10 then ProjectDPRTender_Id else null end),
		                    Send_To_SMD_For_Approval_Id = max(case when ProjectDPRTender_Step_Status = 11 then ProjectDPRTender_Id else null end),
		                    SLTC_Meeting_After_Tender_Approval_Id = max(case when ProjectDPRTender_Step_Status = 12 then ProjectDPRTender_Id else null end),
		                    Work_Order_Issued_Id = max(case when ProjectDPRTender_Step_Status = 13 then ProjectDPRTender_Id else null end),
		                    Agreement_With_Bidder_Id = max(case when ProjectDPRTender_Step_Status = 14 then ProjectDPRTender_Id else null end),
							ProjectDPRTender_ProjectDPR_Id
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1
						group by ProjectDPRTender_ProjectDPR_Id
                    ) tDPRTenderAll on tDPRTenderAll.ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id 
					left join tbl_Project on Project_Id = ProjectDPR_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectDPR_ProjectTypeId
					left join M_Jurisdiction on M_Jurisdiction.M_Jurisdiction_Id = ProjectDPR_DistrictId
					left join tbl_ULB on ULB_Id = ProjectDPR_ULBId
					left join tbl_Division on Division_Id = ProjectDPR_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
					left join tbl_DPRTenderSteps on DPRTenderSteps_Id = tDPRTender.ProjectDPRTender_Step_Status
					where ProjectDPR_Status = 1 and ProjectDPRApproval_Next_Designation_Id = -1 and ProjectDPRApproval_Next_Organisation_Id = -1 ";
        if (NodalDepartment_Id != "" && NodalDepartment_Id != "0")
        {
            strQuery += " and ProjectDPR_NodalDept_Id in (" + NodalDepartment_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Project_Id != "")
        {
            strQuery += " and ProjectDPR_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectDPR_Id != 0)
        {
            strQuery += " and ProjectDPR_Id = '" + ProjectDPR_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectDPR_ULBId = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectDPR_DivisionId = '" + Division_Id + "'";
        }
        if (ProjectType_Id != 0)
        {
            strQuery += " and ProjectDPR_ProjectTypeId = '" + ProjectType_Id + "'";
        }
        if (Step_Id == -1)
        {
            //strQuery += " and isnull(tDPRTender.ProjectDPRTender_Step_Status, 0) = '" + Step_Id + "'";
        }
        else if (Step_Id == 0)
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_Step_Status, -3) = -3";
        }
        else
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_Step_Status, 0) = '" + Step_Id + "'";
        }
        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, ProjectDPR_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_tbl_ProjectWorkDPR_CNDS(string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, int ProjectType_Id, int ProjectDPR_Id, int Tranche_Id, string NodalDepartment_Id, string NodalDepartmentScheme_Id, int FundingPattern_Id, DPR_Status _DPR_Status, int Jurisdiction_In)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectDPR_Id, 
                        ProjectDPR_Project_Id, 
                        Project_Name, 
                        ProjectDPR_Name = REPLACE(REPLACE(ProjectDPR_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectDPR_ProjectTypeId,
						ProjectType_Name,
						ULB_Name, 
						M_Jurisdiction.Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Circle_Id, 
						Zone_Name, 
						Zone_Id, 
						ProjectDPR_DistrictId, 
                        ProjectDPR_ULBId, 
						ProjectDPR_DivisionId, 
						Division_CircleId, 
                        ProjectDPR_CapexCost = convert(decimal(18, 2), ProjectDPR_CapexCost),
                        ProjectDPR_OandM_Cost = convert(decimal(18, 2), ProjectDPR_OandM_Cost),
                        ProjectDPR_ACA_Cost = convert(decimal(18, 2), ProjectDPR_ACA_Cost),
                        ProjectDPR_Project_Cost = convert(decimal(18, 2), ProjectDPR_Project_Cost),
                        ProjectDPR_Comments,
                        ProjectDPR_AddedOn,
                        ProjectDPR_Code,
						ProjectDPR_Other_PE_Auth_Letter_Date, 
                        ProjectDPR_Other_PE_Auth_Letter_Path,
                        ProjectDPR_Other_PE_Date, 
                        ProjectDPR_Other_Nodal_Agency_Nomination_Date, 
                        ProjectDPR_Other_LandAvailability_Date, 
                        ProjectDPR_Other_DPR_Prepared, 
                        ProjectDPR_Other_Date_Sending_Client_Department, 
                        ProjectDPR_Other_DPRApproval_Status, 
                        ProjectDPR_Other_HQ_TS_Date, 
                        ProjectDPR_Other_TS_Approval_Date, 
                        ProjectDPR_Other_NIT_Issue_Date, 
                        ProjectDPR_Other_NIT_Cost, 
                        ProjectDPR_Other_Tender_Uploading_Date, 
                        ProjectDPR_Other_PreBid_Meeting_Date, 
                        ProjectDPR_Other_PreBid_Response_Date, 
                        ProjectDPR_Other_Corrigendum1_Date,
                        ProjectDPR_Other_Corrigendum2_Date, 
                        ProjectDPR_Other_Corrigendum3_Date,
                        ProjectDPR_Other_Technical_Bid_Opening_Date, 
                        ProjectDPR_Other_Financial_Bid_Opening_Date, 
                        ProjectDPR_Other_LOA_Issue_Date, 
                        ProjectDPR_Other_CB_Date, 
                        ProjectDPR_Other_Work_Start_Date, 
                        GO_Date = ProjectDPRTender_ActionDate, 
                        GO_Path = ProjectDPRTender_DocumentPath, 
                        GO_Number = ProjectDPRTender_Comments, 
                        ProjectDPRTender_CostApproved, 
                        ProjectDPRTender_TenderEndDate, 
                        ProjectDPRTender_TechnicalBidOpeningDate, 
                        ProjectDPRTender_FinancialBidOpeningDate, 
                        ProjectDPR_Form_Work_BasicCost,
                        ProjectDPR_Form_Work_Contigency,
                        ProjectDPR_Form_Work_ContigencyPer,
                        ProjectDPR_Form_Work_NetCost,
                        ProjectDPR_Form_Work_ProficiencyCost,
                        ProjectDPR_Form_Work_WorkCost,
                        ProjectDPR_Form_Work_Centage,
                        ProjectDPR_Form_Work_CentagePer,
                        ProjectDPR_Form_Work_GST,
                        ProjectDPR_Form_Work_LabourCess,
                        ProjectDPR_Form_Work_ElectricCost,
                        ProjectDPR_Form_Work_BoughtOut,
                        ProjectDPR_Form_Work_TotalCost,
                        Total_Bidders, 
                        TechnicalQualified, 
                        FinancialQualified, 
                        Qualified_Status
                    from tbl_ProjectDPR
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectDPR_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join 
                    (
	                    select 
		                    ProjectDPR_Other_Id,
		                    ProjectDPR_Other_DPR_Id,
		                    ProjectDPR_Other_PE_Auth_Letter_Date = case when convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Auth_Letter_Date, 103) end,
		                    ProjectDPR_Other_PE_Auth_Letter_Path,
		                    ProjectDPR_Other_PE_Date = case when convert(char(10), ProjectDPR_Other_PE_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PE_Date, 103) end,
		                    ProjectDPR_Other_Nodal_Agency_Nomination_Date = case when convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Nodal_Agency_Nomination_Date, 103) end,
		                    ProjectDPR_Other_LandAvailability_Date = case when convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LandAvailability_Date, 103) end,
		                    ProjectDPR_Other_DPR_Prepared,
		                    ProjectDPR_Other_Date_Sending_Client_Department = case when convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Date_Sending_Client_Department, 103) end,
		                    ProjectDPR_Other_DPRApproval_Status,
		                    ProjectDPR_Other_HQ_TS_Date = case when convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_HQ_TS_Date, 103) end,
		                    ProjectDPR_Other_TS_Approval_Date = case when convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_TS_Approval_Date, 103) end,
		                    ProjectDPR_Other_NIT_Issue_Date = case when convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_NIT_Issue_Date, 103) end,
		                    ProjectDPR_Other_NIT_Cost,
		                    ProjectDPR_Other_Tender_Uploading_Date = case when convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Tender_Uploading_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Meeting_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Meeting_Date, 103) end,
		                    ProjectDPR_Other_PreBid_Response_Date = case when convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_PreBid_Response_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum1_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum1_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum2_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum2_Date, 103) end,
		                    ProjectDPR_Other_Corrigendum3_Date = case when convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Corrigendum3_Date, 103) end,
		                    ProjectDPR_Other_Technical_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Technical_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_Financial_Bid_Opening_Date = case when convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Financial_Bid_Opening_Date, 103) end,
		                    ProjectDPR_Other_LOA_Issue_Date = case when convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_LOA_Issue_Date, 103) end,
		                    ProjectDPR_Other_CB_Date = case when convert(char(10), ProjectDPR_Other_CB_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_CB_Date, 103) end,
		                    ProjectDPR_Other_Work_Start_Date = case when convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPR_Other_Work_Start_Date, 103) end,
		                    ProjectDPR_Other_Comments
	                    from tbl_ProjectDPR_Other
	                    where ProjectDPR_Other_Status = 1  
                    ) tDPROther on tDPROther.ProjectDPR_Other_DPR_Id = ProjectDPR_Id
                    left join 
                    (
	                    select 
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate = case when convert(char(10), ProjectDPRTender_ActionDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_ActionDate, 103) end,
		                    ProjectDPRTender_DocumentPath,
		                    ProjectDPRTender_Comments,
		                    ProjectDPRTender_CostApproved,
		                    ProjectDPRTender_TenderEndDate = case when convert(char(10), ProjectDPRTender_TenderEndDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TenderEndDate, 103) end,
		                    ProjectDPRTender_TechnicalBidOpeningDate = case when convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_TechnicalBidOpeningDate, 103) end,
		                    ProjectDPRTender_FinancialBidOpeningDate = case when convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectDPRTender_FinancialBidOpeningDate, 103) end,
		                    ProjectDPRTender_OMCostApproved,
		                    ProjectDPRTender_ACACostApproved,
		                    ProjectDPRTender_CentralShare,
		                    ProjectDPRTender_StateShare,
		                    ProjectDPRTender_CentageShare,
		                    ProjectDPRTender_TenderCost,
		                    ProjectDPRTender_ULBShare,
		                    ProjectDPRTender_CapexCostApproved,
		                    ProjectDPRTender_DocumentPath_A
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1 
                    ) tDPRTender on tDPRTender.ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id 
                    left join
                    (
	                    select 
		                    ProjectDPR_Form_Id,
		                    ProjectDPR_Form_DPR_Id,
		                    ProjectDPR_Form_Work_BasicCost,
		                    ProjectDPR_Form_Work_Contigency,
		                    ProjectDPR_Form_Work_ContigencyPer,
		                    ProjectDPR_Form_Work_NetCost,
		                    ProjectDPR_Form_Work_ProficiencyCost,
		                    ProjectDPR_Form_Work_WorkCost,
		                    ProjectDPR_Form_Work_Centage,
		                    ProjectDPR_Form_Work_CentagePer,
		                    ProjectDPR_Form_Work_GST,
		                    ProjectDPR_Form_Work_LabourCess,
		                    ProjectDPR_Form_Work_ElectricCost,
		                    ProjectDPR_Form_Work_BoughtOut,
		                    ProjectDPR_Form_Work_TotalCost,
		                    ProjectDPR_Form_Comments
	                    from tbl_ProjectDPR_Form
	                    where ProjectDPR_Form_Status = 1 
                    ) tProjectDPR_Form on tProjectDPR_Form.ProjectDPR_Form_DPR_Id = ProjectDPR_Id
                    left join
                    (
                        select 
		                    Total_Bidders = count(ProjectDPRBidder_Id),
		                    ProjectDPRBidder_DPR_Id,
                            TechnicalQualified = sum(case when isnull(ProjectDPRBidder_TechnicalQualified, 0) = 1 then 1 else 0 end),
                            FinancialQualified = sum(case when isnull(ProjectDPRBidder_FinancialQualified, 0) = 1 then 1 else 0 end),
                            Qualified_Status = max(case when isnull(ProjectDPRBidder_Qualified_Status, '') = 'L1' then 1 else 0 end)
                        from tbl_ProjectDPRBidder
                        where ProjectDPRBidder_Status = 1
	                    group by ProjectDPRBidder_DPR_Id
                    ) tProjectDPRBidder on tProjectDPRBidder.ProjectDPRBidder_DPR_Id = ProjectDPR_Id
					left join tbl_Project on Project_Id = ProjectDPR_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectDPR_ProjectTypeId
					left join M_Jurisdiction on M_Jurisdiction.M_Jurisdiction_Id = ProjectDPR_DistrictId
					left join tbl_ULB on ULB_Id = ProjectDPR_ULBId
					left join tbl_Division on Division_Id = ProjectDPR_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
					where ProjectDPR_Status = 1 ";
        if (NodalDepartment_Id != "" && NodalDepartment_Id != "0")
        {
            strQuery += " and ProjectDPR_NodalDept_Id in (" + NodalDepartment_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (FundingPattern_Id != 0)
        {
            strQuery += " and ProjectDPR_NodalScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Project_Id != "")
        {
            strQuery += " and ProjectDPR_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectDPR_Id != 0)
        {
            strQuery += " and ProjectDPR_Id = '" + ProjectDPR_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectDPR_ULBId = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectDPR_DivisionId = '" + Division_Id + "'";
        }
        if (ProjectType_Id != 0)
        {
            strQuery += " and ProjectDPR_ProjectTypeId = '" + ProjectType_Id + "'";
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery += " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1";
            }
            if (Jurisdiction_In == 0)
            {
                strQuery += " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1";
            }
        }
        else
        {

        }
        if (_DPR_Status == DPR_Status.TotalDPR)
        {

        }
        else if (_DPR_Status == DPR_Status.PE_Done)
        {
            strQuery += " and (isnull(tDPROther.ProjectDPR_Other_PE_Auth_Letter_Date, '') != '' or isnull(tDPROther.ProjectDPR_Other_PE_Date, '') != '' or isnull(tDPROther.ProjectDPR_Other_Nodal_Agency_Nomination_Date, '') != '')";
        }
        else if (_DPR_Status == DPR_Status.DPR_Prepared)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y'";
        }
        else if (_DPR_Status == DPR_Status.EFC_PFAD_Done)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y'";
        }
        else if (_DPR_Status == DPR_Status.GO_Done)
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.GO_Pending)
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_ActionDate, '') = ''";
        }
        else if (_DPR_Status == DPR_Status.DPR_To_Be_Prepared)
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.DPR_Prepared_And_Send_Client)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.DPR_Approved_By_Client)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y'";
        }
        else if (_DPR_Status == DPR_Status.Form_J_Done)
        {
            strQuery += " and isnull(tProjectDPR_Form.ProjectDPR_Form_Work_TotalCost, 0) > 0";
        }
        else if (_DPR_Status == DPR_Status.DPR_Send_HQ_TS)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_HQ_TS_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.TS_Approved_HQ)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.TS_Not_Approved_HQ)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_DPRApproval_Status, 'N') = 'Y' and isnull(tDPROther.ProjectDPR_Other_TS_Approval_Date, '') = ''";
        }
        else if (_DPR_Status == DPR_Status.DPR_Under_Preparation)
        {
            strQuery += " and isnull(tDPRTender.ProjectDPRTender_ActionDate, '') != '' and (isnull(tDPROther.ProjectDPR_Other_DPR_Prepared, 'N') != 'Y' or isnull(tDPROther.ProjectDPR_Other_Date_Sending_Client_Department, '') = '')";
        }
        else if (_DPR_Status == DPR_Status.NIT_Issued)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.Tender_Uploaded)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_Tender_Uploading_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.Technical_Bid_Opened)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.Technical_Bid_To_Be_Opened)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_NIT_Issue_Date, '') != '' and isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') = ''";
        }
        else if (_DPR_Status == DPR_Status.Financial_Bid_Opened)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.Financial_Bid_To_Be_Opened)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_Technical_Bid_Opening_Date, '') != '' and isnull(tDPROther.ProjectDPR_Other_Financial_Bid_Opening_Date, '') = ''";
        }
        else if (_DPR_Status == DPR_Status.Technically_Qualified)
        {
            strQuery += " and isnull(tProjectDPRBidder.TechnicalQualified, 0) > 0";
        }
        else if (_DPR_Status == DPR_Status.Financially_Qualified)
        {
            strQuery += " and isnull(tProjectDPRBidder.FinancialQualified, 0) > 0";
        }
        else if (_DPR_Status == DPR_Status.L1_Selected)
        {
            strQuery += " and isnull(tProjectDPRBidder.Qualified_Status, 0) > 0";
        }
        else if (_DPR_Status == DPR_Status.LOA_Issued)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_LOA_Issue_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.Work_Issued)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_Work_Start_Date, '') != ''";
        }
        else if (_DPR_Status == DPR_Status.CB_Date)
        {
            strQuery += " and isnull(tDPROther.ProjectDPR_Other_CB_Date, '') != ''";
        }
        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, ProjectDPR_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Qualification Criteria
    public DataSet get_tbl_QualificationCriteria()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        QualificationCriteria_Id, 
                        ParentQualification_Name,
                        QualificationCriteria_Name, 
                        QualificationCriteria_ParentQualification_Id,
                        QualificationCriteria_Mandatory,
                        QualificationCriteria_Auto_Calculated,
                        QualificationCriteria_Upload_Document_Count,
                        QualificationCriteria_Enable_Verification_Document,
                        QualificationCriteria_Order, 
                        QualificationCriteria_AddedOn, 
                        QualificationCriteria_AddedBy, 
                        QualificationCriteria_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = QualificationCriteria_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = QualificationCriteria_ModifiedOn 
                  from tbl_QualificationCriteria
                  left join tbl_ParentQualification on ParentQualification_Id = QualificationCriteria_ParentQualification_Id
                  left join tbl_PersonDetail on Person_Id = QualificationCriteria_AddedBy
                  left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = QualificationCriteria_ModifiedBy
                  where QualificationCriteria_Status = 1 order by QualificationCriteria_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_PQC()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectDPRPQC_Id = 0, 
                        ProjectDPRPQC_DPR_Id = 0,
                        ProjectDPRPQC_PQCParent_Id = QualificationCriteria_ParentQualification_Id, 
                        ProjectDPRPQC_PQC_Id = QualificationCriteria_Id, 
                        ProjectDPRPQC_PQCParentName = ParentQualification_Name, 
                        ProjectDPRPQC_PQCName = QualificationCriteria_Name, 
                        ProjectDPRPQC_PQC_Mandatory = QualificationCriteria_Mandatory,
                        ProjectDPRPQC_PQC_Auto_Calculated = QualificationCriteria_Auto_Calculated,
                        ProjectDPRPQC_PQC_Upload_Document_Count = QualificationCriteria_Upload_Document_Count,
                        ProjectDPRPQC_PQC_Enable_Verification_Document = QualificationCriteria_Enable_Verification_Document,
                        ProjectDPRPQC_PQC_Order = QualificationCriteria_Order, 
                        ProjectDPRPQC_Order = QualificationCriteria_Order, 
                        ProjectDPRPQC_PQCMinVal = '', 
                        ProjectDPRPQC_PQCMaxVal = '', 
                        ProjectDPRPQC_Comments = ''
                  from tbl_QualificationCriteria
                  left join tbl_ParentQualification on ParentQualification_Id = QualificationCriteria_ParentQualification_Id  
                  where QualificationCriteria_Status = 1 order by QualificationCriteria_Order, ParentQualification_Name, QualificationCriteria_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet Edit_tbl_QualificationCriteria(string QualificationCriteria_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"select 
                        QualificationCriteria_Id,
                        QualificationCriteria_Name,
                        QualificationCriteria_ParentQualification_Id,
                        QualificationCriteria_Mandatory,
                        QualificationCriteria_Auto_Calculated,
                        QualificationCriteria_Upload_Document_Count,
                        QualificationCriteria_Enable_Verification_Document, 
                        QualificationCriteria_Order
                    from tbl_QualificationCriteria 
                    where QualificationCriteria_Status = 1 and QualificationCriteria_Id = '" + QualificationCriteria_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_QualificationCriteria(tbl_QualificationCriteria obj_tbl_QualificationCriteria, int QualificationCriteria_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyQualificationCriteria(obj_tbl_QualificationCriteria.QualificationCriteria_Name, QualificationCriteria_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (QualificationCriteria_Id == 0)
                {
                    Insert_tbl_QualificationCriteria(obj_tbl_QualificationCriteria, trans, cn);
                }
                else
                {
                    obj_tbl_QualificationCriteria.QualificationCriteria_Id = QualificationCriteria_Id;
                    Update_tbl_QualificationCriteria(obj_tbl_QualificationCriteria, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyQualificationCriteria(string QualificationCriteriaName, string QualificationCriteria_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_QualificationCriteria  where QualificationCriteria_Status = 1 and  QualificationCriteria_Name = '" + QualificationCriteriaName + "' ";
        if (QualificationCriteria_Id != "0")
        {
            strQuery += " AND QualificationCriteria_Id  <> '" + QualificationCriteria_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_QualificationCriteria(tbl_QualificationCriteria obj_tbl_QualificationCriteria, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_QualificationCriteria( [QualificationCriteria_AddedBy],[QualificationCriteria_AddedOn],[QualificationCriteria_Name],[QualificationCriteria_Status], QualificationCriteria_ParentQualification_Id, QualificationCriteria_Mandatory, QualificationCriteria_Auto_Calculated, QualificationCriteria_Upload_Document_Count, QualificationCriteria_Enable_Verification_Document, QualificationCriteria_Order) values('" + obj_tbl_QualificationCriteria.QualificationCriteria_AddedBy + "', getdate(), N'" + obj_tbl_QualificationCriteria.QualificationCriteria_Name + "','" + obj_tbl_QualificationCriteria.QualificationCriteria_Status + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_ParentQualification_Id + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_Mandatory + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_Auto_Calculated + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_Upload_Document_Count + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_Enable_Verification_Document + "', '" + obj_tbl_QualificationCriteria.QualificationCriteria_Order + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_QualificationCriteria(tbl_QualificationCriteria obj_tbl_QualificationCriteria, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_QualificationCriteria set  QualificationCriteria_Name = N'" + obj_tbl_QualificationCriteria.QualificationCriteria_Name + "', QualificationCriteria_ParentQualification_Id = '" + obj_tbl_QualificationCriteria.QualificationCriteria_ParentQualification_Id + "', QualificationCriteria_Mandatory = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Mandatory + "', QualificationCriteria_Auto_Calculated = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Auto_Calculated + "', QualificationCriteria_Upload_Document_Count = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Upload_Document_Count + "', QualificationCriteria_Enable_Verification_Document = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Enable_Verification_Document + "', QualificationCriteria_Order = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Order + "', QualificationCriteria_ModifiedOn = getdate(), QualificationCriteria_ModifiedBy = '" + obj_tbl_QualificationCriteria.QualificationCriteria_AddedBy + "' where QualificationCriteria_Id = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Id + "' and QualificationCriteria_Status = '" + obj_tbl_QualificationCriteria.QualificationCriteria_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_QualificationCriteria(int QualificationCriteria_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_QualificationCriteria set   QualificationCriteria_Status = 0 where QualificationCriteria_Id = '" + QualificationCriteria_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Master Parent Qualification 
    public DataSet get_tbl_ParentQualification()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        ParentQualification_Id, 
                        ParentQualification_Name, 
                        ParentQualification_AddedOn, 
                        ParentQualification_AddedBy, 
                        ParentQualification_Status, 
                        isnull(tbl_PersonDetail.Person_Name, 'Backend Entry') CreatedBy, 
                        Created_Date = ParentQualification_AddedOn,
                        tbl_PersonDetail1.Person_Name as ModifyBy, 
                        Modify_Date = ParentQualification_ModifiedOn 
                  from tbl_ParentQualification
                  left join tbl_PersonDetail on Person_Id = ParentQualification_AddedBy
                  left join tbl_PersonDetail as tbl_PersonDetail1 on tbl_PersonDetail1.Person_Id = ParentQualification_ModifiedBy
                  where ParentQualification_Status = 1 order by ParentQualification_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet Edit_tbl_ParentQualification(string ParentQualification_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " select ParentQualification_Id,ParentQualification_Name from tbl_ParentQualification where ParentQualification_Status=1 and ParentQualification_Id='" + ParentQualification_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_ParentQualification(tbl_ParentQualification obj_tbl_ParentQualification, int ParentQualification_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyParentQualification(obj_tbl_ParentQualification.ParentQualification_Name, ParentQualification_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (ParentQualification_Id == 0)
                {
                    Insert_tbl_ParentQualification(obj_tbl_ParentQualification, trans, cn);
                }
                else
                {
                    obj_tbl_ParentQualification.ParentQualification_Id = ParentQualification_Id;
                    Update_tbl_ParentQualification(obj_tbl_ParentQualification, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyParentQualification(string ParentQualificationName, string ParentQualification_Id, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_ParentQualification  where ParentQualification_Status = 1 and  ParentQualification_Name = '" + ParentQualificationName + "' ";
        if (ParentQualification_Id != "0")
        {
            strQuery += " AND ParentQualification_Id  <> '" + ParentQualification_Id + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private string Insert_tbl_ParentQualification(tbl_ParentQualification obj_tbl_ParentQualification, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_ParentQualification( [ParentQualification_AddedBy],[ParentQualification_AddedOn],[ParentQualification_Name],[ParentQualification_Status] ) values('" + obj_tbl_ParentQualification.ParentQualification_AddedBy + "', getdate(), N'" + obj_tbl_ParentQualification.ParentQualification_Name + "','" + obj_tbl_ParentQualification.ParentQualification_Status + "'); Select @@Identity";

        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_ParentQualification(tbl_ParentQualification obj_tbl_ParentQualification, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;Update  tbl_ParentQualification set  ParentQualification_Name = N'" + obj_tbl_ParentQualification.ParentQualification_Name + "',ParentQualification_ModifiedOn=getdate(),ParentQualification_ModifiedBy = '" + obj_tbl_ParentQualification.ParentQualification_AddedBy + "' where ParentQualification_Id = '" + obj_tbl_ParentQualification.ParentQualification_Id + "' and ParentQualification_Status = '" + obj_tbl_ParentQualification.ParentQualification_Status + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public bool Delete_ParentQualification(int ParentQualification_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_ParentQualification set   ParentQualification_Status = 0 where ParentQualification_Id = '" + ParentQualification_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region Project DPR Bid Response

    private void Insert_tbl_ProjectDPRBidResponse(tbl_ProjectDPRBidResponse obj_tbl_ProjectDPRBidResponse, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_ProjectDPRBidResponse ( [ProjectDPRBidResponse_AddedBy],[ProjectDPRBidResponse_AddedOn],[ProjectDPRBidResponse_BidResponseName],[ProjectDPRBidResponse_Comments],[ProjectDPRBidResponse_DocumentPath],[ProjectDPRBidResponse_DPR_Id],[ProjectDPRBidResponse_Status] ) values ('" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_AddedBy + "',getdate(),N'" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_BidResponseName + "',N'" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_Comments + "',N'" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_DocumentPath + "','" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_DPR_Id + "','" + obj_tbl_ProjectDPRBidResponse.ProjectDPRBidResponse_Status + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_ProjectDPRBidResponse(int DPR_Id, int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_ProjectDPRBidResponse set [ProjectDPRBidResponse_ModifiedBy] = '" + Added_By + "', [ProjectDPRBidResponse_ModifiedOn] = getdate(), [ProjectDPRBidResponse_Status] = 0 where [ProjectDPRBidResponse_Status] = 1 and [ProjectDPRBidResponse_DPR_Id] = '" + DPR_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public DataSet get_tbl_ProjectDPRBidResponse(int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"select 
                        ProjectDPRBidResponse_Id,
                        ProjectDPRBidResponse_DPR_Id,
                        ProjectDPRBidResponse_BidResponseName,
                        ProjectDPRBidResponse_Comments,
                        ProjectDPRBidResponse_DocumentPath
                    from tbl_ProjectDPRBidResponse 
                    where ProjectDPRBidResponse_Status = 1 and ProjectDPRBidResponse_DPR_Id = '" + DPR_Id + "'";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    #endregion

    #region Financial Year Wise Progress
    public DataSet get_Financial_Year_Wise_Progress(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectType_Id, 
	                    ProjectType_Name,
                        Progress_All = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP, 0) + isnull(tFinancialBreakupAll.Total_Value, 0)) / 100), 
	                    Progress_All_2005_2006 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2005_2006, 0) + isnull(tPrevInvoiceADP.Amount_2005_2006, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2005_2006, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2005_2006, 0) + isnull(tFinancialBreakupAll.Total_Value_2005_2006, 0)) / 100), 
	                    Progress_All_2006_2007 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2006_2007, 0) + isnull(tPrevInvoiceADP.Amount_2006_2007, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2006_2007, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2006_2007, 0) + isnull(tFinancialBreakupAll.Total_Value_2006_2007, 0)) / 100), 
	                    Progress_All_2007_2008 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2007_2008, 0) + isnull(tPrevInvoiceADP.Amount_2007_2008, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2007_2008, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2007_2008, 0) + isnull(tFinancialBreakupAll.Total_Value_2007_2008, 0)) / 100), 
	                    Progress_All_2008_2009 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2008_2009, 0) + isnull(tPrevInvoiceADP.Amount_2008_2009, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2008_2009, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2008_2009, 0) + isnull(tFinancialBreakupAll.Total_Value_2008_2009, 0)) / 100), 
	                    Progress_All_2009_2010 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2009_2010, 0) + isnull(tPrevInvoiceADP.Amount_2009_2010, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2009_2010, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2009_2010, 0) + isnull(tFinancialBreakupAll.Total_Value_2009_2010, 0)) / 100), 
	                    Progress_All_2010_2011 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2010_2011, 0) + isnull(tPrevInvoiceADP.Amount_2010_2011, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2010_2011, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2010_2011, 0) + isnull(tFinancialBreakupAll.Total_Value_2010_2011, 0)) / 100), 
	                    Progress_All_2011_2012 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2011_2012, 0) + isnull(tPrevInvoiceADP.Amount_2011_2012, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2011_2012, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2011_2012, 0) + isnull(tFinancialBreakupAll.Total_Value_2011_2012, 0)) / 100), 
	                    Progress_All_2012_2013 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2012_2013, 0) + isnull(tPrevInvoiceADP.Amount_2012_2013, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2012_2013, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2012_2013, 0) + isnull(tFinancialBreakupAll.Total_Value_2012_2013, 0)) / 100), 
	                    Progress_All_2013_2014 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2013_2014, 0) + isnull(tPrevInvoiceADP.Amount_2013_2014, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2013_2014, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2013_2014, 0) + isnull(tFinancialBreakupAll.Total_Value_2013_2014, 0)) / 100), 
	                    Progress_All_2014_2015 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2014_2015, 0) + isnull(tPrevInvoiceADP.Amount_2014_2015, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2014_2015, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2014_2015, 0) + isnull(tFinancialBreakupAll.Total_Value_2014_2015, 0)) / 100), 
	                    Progress_All_2015_2016 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2015_2016, 0) + isnull(tPrevInvoiceADP.Amount_2015_2016, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2015_2016, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2015_2016, 0) + isnull(tFinancialBreakupAll.Total_Value_2015_2016, 0)) / 100), 
	                    Progress_All_2016_2017 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2016_2017, 0) + isnull(tPrevInvoiceADP.Amount_2016_2017, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2016_2017, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2016_2017, 0) + isnull(tFinancialBreakupAll.Total_Value_2016_2017, 0)) / 100), 
	                    Progress_All_2017_2018 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2017_2018, 0) + isnull(tPrevInvoiceADP.Amount_2017_2018, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2017_2018, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2017_2018, 0) + isnull(tFinancialBreakupAll.Total_Value_2017_2018, 0)) / 100), 
	                    Progress_All_2018_2019 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2018_2019, 0) + isnull(tPrevInvoiceADP.Amount_2018_2019, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2018_2019, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2018_2019, 0) + isnull(tFinancialBreakupAll.Total_Value_2018_2019, 0)) / 100), 
	                    Progress_All_2019_2020 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2019_2020, 0) + isnull(tPrevInvoiceADP.Amount_2019_2020, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2019_2020, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2019_2020, 0) + isnull(tFinancialBreakupAll.Total_Value_2019_2020, 0)) / 100), 
	                    Progress_All_2020_2021 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2020_2021, 0) + isnull(tPrevInvoiceADP.Amount_2020_2021, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2020_2021, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2020_2021, 0) + isnull(tFinancialBreakupAll.Total_Value_2020_2021, 0)) / 100),
	                    Progress_All_2021_2022 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2021_2022, 0) + isnull(tPrevInvoiceADP.Amount_2021_2022, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2021_2022, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2021_2022, 0) + isnull(tFinancialBreakupAll.Total_Value_2021_2022, 0)) / 100),
	                    Progress_All_2022_2023 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2022_2023, 0) + isnull(tPrevInvoiceADP.Amount_2022_2023, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2022_2023, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2022_2023, 0) + isnull(tFinancialBreakupAll.Total_Value_2022_2023, 0)) / 100), 
	                    Progress_All_2023_2024 = convert(decimal(18, 2), sum(isnull(tPrevInvoice.Amount_2023_2024, 0) + isnull(tPrevInvoiceADP.Amount_2023_2024, 0) + isnull(tFinancialBreakupAll.Total_Amount_EMB_2023_2024, 0) + isnull(tFinancialBreakupAll.Total_Invoice_ADP_2023_2024, 0) + isnull(tFinancialBreakupAll.Total_Value_2023_2024, 0)) / 100)
                    from tbl_ProjectWork
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join tbl_ProjectType on ProjectType_Id = ProjectWork_ProjectType_Id
                    left join
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id, 
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))),  
		                    Amount_2005_2006 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2005', 103) and convert(date, '31/03/2006', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2006_2007 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2006', 103) and convert(date, '31/03/2007', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2007_2008 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2007', 103) and convert(date, '31/03/2008', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2008_2009 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2008', 103) and convert(date, '31/03/2009', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2009_2010 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2009', 103) and convert(date, '31/03/2010', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2010_2011 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2010', 103) and convert(date, '31/03/2011', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2011_2012 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2011', 103) and convert(date, '31/03/2012', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2012_2013 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2012', 103) and convert(date, '31/03/2013', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2013_2014 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2013', 103) and convert(date, '31/03/2014', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2014_2015 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2014', 103) and convert(date, '31/03/2015', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2015_2016 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2015', 103) and convert(date, '31/03/2016', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2016_2017 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2016', 103) and convert(date, '31/03/2017', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2017_2018 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2017', 103) and convert(date, '31/03/2018', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2018_2019 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2018', 103) and convert(date, '31/03/2019', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2019_2020 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2019', 103) and convert(date, '31/03/2020', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2020_2021 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2021_2022 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2022_2023 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end), 
		                    Amount_2023_2024 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2)) else 0 end)
	                    from tbl_PackageInvoice
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
	                    where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))), 
		                    Amount_2005_2006 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2005', 103) and convert(date, '31/03/2006', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2006_2007 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2006', 103) and convert(date, '31/03/2007', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2007_2008 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2007', 103) and convert(date, '31/03/2008', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2008_2009 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2008', 103) and convert(date, '31/03/2009', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2009_2010 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2009', 103) and convert(date, '31/03/2010', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2010_2011 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2010', 103) and convert(date, '31/03/2011', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2011_2012 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2011', 103) and convert(date, '31/03/2012', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2012_2013 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2012', 103) and convert(date, '31/03/2013', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2013_2014 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2013', 103) and convert(date, '31/03/2014', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2014_2015 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2014', 103) and convert(date, '31/03/2015', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2015_2016 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2015', 103) and convert(date, '31/03/2016', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2016_2017 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2016', 103) and convert(date, '31/03/2017', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2017_2018 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2017', 103) and convert(date, '31/03/2018', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2018_2019 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2018', 103) and convert(date, '31/03/2019', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2019_2020 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2019', 103) and convert(date, '31/03/2020', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2020_2021 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2021_2022 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2022_2023 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end), 
		                    Amount_2023_2024 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4)) else 0 end)
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
	                    select 
		                    ProjectWork_Id,
		                    Total_Amount_EMB = sum(isnull(Total_Amount_EMB,0) / 100000), 
		                    Total_Amount_EMB_2005_2006 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2005', 103) and convert(date, '31/03/2006', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2006_2007 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2006', 103) and convert(date, '31/03/2007', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2007_2008 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2007', 103) and convert(date, '31/03/2008', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2008_2009 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2008', 103) and convert(date, '31/03/2009', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2009_2010 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2009', 103) and convert(date, '31/03/2010', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2010_2011 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2010', 103) and convert(date, '31/03/2011', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2011_2012 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2011', 103) and convert(date, '31/03/2012', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2012_2013 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2012', 103) and convert(date, '31/03/2013', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2013_2014 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2013', 103) and convert(date, '31/03/2014', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2014_2015 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2014', 103) and convert(date, '31/03/2015', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2015_2016 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2015', 103) and convert(date, '31/03/2016', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2016_2017 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2016', 103) and convert(date, '31/03/2017', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2017_2018 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2017', 103) and convert(date, '31/03/2018', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2018_2019 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2018', 103) and convert(date, '31/03/2019', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2019_2020 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2019', 103) and convert(date, '31/03/2020', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2020_2021 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2021_2022 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2022_2023 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end), 
		                    Total_Amount_EMB_2023_2024 = sum(case when convert(date, PackageEMB_Master_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then isnull(Total_Amount_EMB,0) / 100000 else 0 end),



		                    Total_Value = sum(isnull(tInvoice.Total_Value,0) / 100000), 
		                    Total_Value_2005_2006 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2005', 103) and convert(date, '31/03/2006', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2006_2007 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2006', 103) and convert(date, '31/03/2007', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2007_2008 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2007', 103) and convert(date, '31/03/2008', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2008_2009 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2008', 103) and convert(date, '31/03/2009', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2009_2010 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2009', 103) and convert(date, '31/03/2010', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2010_2011 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2010', 103) and convert(date, '31/03/2011', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2011_2012 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2011', 103) and convert(date, '31/03/2012', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2012_2013 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2012', 103) and convert(date, '31/03/2013', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2013_2014 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2013', 103) and convert(date, '31/03/2014', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2014_2015 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2014', 103) and convert(date, '31/03/2015', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2015_2016 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2015', 103) and convert(date, '31/03/2016', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2016_2017 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2016', 103) and convert(date, '31/03/2017', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2017_2018 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2017', 103) and convert(date, '31/03/2018', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2018_2019 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2018', 103) and convert(date, '31/03/2019', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2019_2020 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2019', 103) and convert(date, '31/03/2020', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2020_2021 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2021_2022 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2022_2023 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end), 
		                    Total_Value_2023_2024 = sum(case when convert(date, PackageInvoice_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then isnull(tInvoice.Total_Value,0) / 100000 else 0 end),


		
		                    Total_Invoice_ADP = sum(isnull(tADP.Total_Value_ADP,0) / 100000), 
		                    Total_Invoice_ADP_2005_2006 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2005', 103) and convert(date, '31/03/2006', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2006_2007 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2006', 103) and convert(date, '31/03/2007', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2007_2008 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2007', 103) and convert(date, '31/03/2008', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2008_2009 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2008', 103) and convert(date, '31/03/2009', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2009_2010 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2009', 103) and convert(date, '31/03/2010', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2010_2011 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2010', 103) and convert(date, '31/03/2011', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2011_2012 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2011', 103) and convert(date, '31/03/2012', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2012_2013 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2012', 103) and convert(date, '31/03/2013', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2013_2014 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2013', 103) and convert(date, '31/03/2014', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2014_2015 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2014', 103) and convert(date, '31/03/2015', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2015_2016 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2015', 103) and convert(date, '31/03/2016', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2016_2017 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2016', 103) and convert(date, '31/03/2017', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2017_2018 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2017', 103) and convert(date, '31/03/2018', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2018_2019 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2018', 103) and convert(date, '31/03/2019', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2019_2020 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2019', 103) and convert(date, '31/03/2020', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2020_2021 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2021_2022 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2022_2023 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end), 
		                    Total_Invoice_ADP_2023_2024 = sum(case when convert(date, Package_ADP_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then isnull(tADP.Total_Value_ADP,0) / 100000 else 0 end)
	                    from tbl_ProjectWork
	                    left join 
	                    (
		                    select 
			                    ProjectWorkPkg_Work_Id,
			                    PackageEMB_Master_Date,
			                    Total_Amount_EMB = sum(case when isnull(tbl_PackageInvoiceEMBMasterLink.PackageInvoiceEMBMasterLink_EMBMaster_Id, 0) = 0 then isnull((case when (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) = 0 then PackageEMB_Master_Total_Amount else (case when isnull(PackageEMB_Master_Type, '') = 'N' then PackageEMB_Master_Total_Amount else Total_Amount end) end), 0) else 0 end)
		                    from tbl_PackageEMB_Master
		                    left join
		                    (
			                    select 
				                    PackageEMB_PackageEMB_Master_Id, 
				                    Total_Items = COUNT(*), 
				                    Total_Approved = SUM(case when ISNULL(tbl_PackageEMB_Approval.PackageEMB_Approval_Id, 0) > 0 then 1 else 0 end), 
				                    Total_Amount = SUM(isnull(PackageEMB_TotalAmount, 0))
			                    from tbl_PackageEMB
			                    left join 
			                    (
				                    select 
					                    ROW_NUMBER() over (partition by PackageEMB_Approval_PackageEMB_Id order by PackageEMB_Approval_Id desc) rrr, 
					                    PackageEMB_Approval_Id, 
					                    PackageEMB_Approval_PackageEMB_Id, 
					                    PackageEMB_Approval_Date = convert(char(10), PackageEMB_Approval_Date, 103), 
					                    PackageEMB_Approval_No, 
					                    PackageEMB_Approval_Comments, 
					                    PackageEMB_Approval_Approved_Qty
				                    from tbl_PackageEMB_Approval 
				                    where PackageEMB_Approval_Status = 1
			                    ) tbl_PackageEMB_Approval on PackageEMB_Approval_PackageEMB_Id = PackageEMB_Id and rrr = 1
			                    where PackageEMB_Status = 1
			                    GROUP by PackageEMB_PackageEMB_Master_Id
		                    ) tbl_PackageEMB on PackageEMB_PackageEMB_Master_Id = PackageEMB_Master_Id
		                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageEMB_Master_Package_Id 
		                    join 
		                    (
			                    select 
				                    ROW_NUMBER() over (partition by PackageEMBApproval_PackageEMBMaster_Id order by PackageEMBApproval_Id desc) rrrrr,
				                    PackageEMBApproval_Next_Designation_Id,
				                    PackageEMBApproval_Next_Organisation_Id,
				                    PackageEMBApproval_Comments,
				                    PackageEMBApproval_AddedBy,
				                    PackageEMBApproval_AddedOn,
				                    PackageEMBApproval_Status_Id,
				                    PackageEMBApproval_Package_Id,
				                    PackageEMBApproval_PackageEMBMaster_Id,
				                    InvoiceStatus_Name,
				                    PackageEMBApproval_Date = convert(char(10), PackageEMBApproval_Date, 103),
				                    PackageEMBApproval_Id
			                    from tbl_PackageEMBApproval
			                    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageEMBApproval_Status_Id
			                    where PackageEMBApproval_Status = 1
		                    ) tEMBApproval on tEMBApproval.PackageEMBApproval_PackageEMBMaster_Id = PackageEMB_Master_Id and tEMBApproval.rrrrr = 1
		                    left join (select distinct PackageInvoiceEMBMasterLink_EMBMaster_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status = 1) tbl_PackageInvoiceEMBMasterLink on PackageInvoiceEMBMasterLink_EMBMaster_Id = PackageEMB_Master_Id
		                    where PackageEMB_Master_Status = 1 and ProjectWorkPkg_Status = 1 
		                    group by ProjectWorkPkg_Work_Id, PackageEMB_Master_Date
	                    ) tEMB on tEMB.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
	                    left join 
	                    (
		                    select 
			                    ProjectWorkPkg_Work_Id,
			                    PackageInvoice_Date,
			                    Total_Value = sum(isnull(InvoiceAmount, 0))
		                    from tbl_PackageInvoice 
		                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id 
		                    join 
		                    (
			                    select 
				                    PackageInvoiceItem_Invoice_Id,
				                    Total_Line_Items = count(*),
				                    PackageInvoiceItem_Total_Qty = sum(isnull(PackageInvoiceItem_Total_Qty_BOQ, 0)), 
				                    Total_Amount = sum(isnull(Total_Amount, 0))
			                    from tbl_PackageInvoiceItem
			                    where PackageInvoiceItem_Status = 1
			                    group by PackageInvoiceItem_Invoice_Id
		                    ) tPackageInvoiceItem on PackageInvoiceItem_Invoice_Id = PackageInvoice_Id
		                    join 
		                    (
			                    select 
				                    ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
				                    PackageInvoiceApproval_Next_Designation_Id,
				                    PackageInvoiceApproval_Next_Organisation_Id,
				                    PackageInvoiceApproval_Comments,
				                    PackageInvoiceApproval_AddedBy,
				                    PackageInvoiceApproval_AddedOn,
				                    PackageInvoiceApproval_Status_Id,
				                    PackageInvoiceApproval_Package_Id,
				                    PackageInvoiceApproval_PackageInvoice_Id,
				                    InvoiceStatus_Name,
				                    PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
				                    PackageInvoiceApproval_Id
			                    from tbl_PackageInvoiceApproval
			                    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
			                    where PackageInvoiceApproval_Status = 1
		                    ) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
		                    where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1 
		                    group by ProjectWorkPkg_Work_Id, PackageInvoice_Date
	                    ) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
	                    left join 
	                    (
		                    select 
			                    ProjectWorkPkg_Work_Id,
			                    Package_ADP_Date,
			                    Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0))
		                    from tbl_Package_ADP 
                            join
                            (
                                select
                                    Package_ADP_Item_Package_ADP_Id,
		                            Total_Line_Items = count(*),
		                            Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                                from tbl_Package_ADP_Item
                                where Package_ADP_Item_Status = 1
                                group by Package_ADP_Item_Package_ADP_Id
                            ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
		                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
		                    join 
		                    (
			                    select 
				                    ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
				                    PackageADPApproval_Next_Designation_Id,
				                    PackageADPApproval_Next_Organisation_Id,
				                    PackageADPApproval_Comments,
				                    PackageADPApproval_AddedBy,
				                    PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
				                    PackageADPApproval_Status_Id,
				                    PackageADPApproval_Package_Id,
				                    PackageADPApproval_Package_ADP_Id,
				                    InvoiceStatus_Name,
				                    PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
				                    PackageADPApproval_Id
			                    from tbl_PackageADPApproval
			                    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
			                    where PackageADPApproval_Status = 1
		                    ) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
		                    where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1 
		                    group by ProjectWorkPkg_Work_Id, Package_ADP_Date
	                    ) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
	                    where tbl_ProjectWork.ProjectWork_Status = 1 
	                    group by tbl_ProjectWork.ProjectWork_Id
                    ) tFinancialBreakupAll on tFinancialBreakupAll.ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id
                    where ProjectWork_Status = 1 ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectCode != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        strQuery += @" group by ProjectType_Id, ProjectType_Name order by ProjectType_Name ";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Project DPR Dashboard
    public DataSet get_tbl_Project_DPR_LandStatus(int Project_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, int ProjectType_Id, int ProjectDPR_Id, int Tranche_Id, int NodalDepartment_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectDPR_ProjectTypeId,
	                    ProjectType_Name,
	                    LandIdentified = sum(case when isnull(ProjectDPR_LandIdentified, 0) = 1 then 1 else 0 end),
	                    LandTransfered = sum(case when isnull(ProjectDPR_LandTransfered, 0) = 1 then 1 else 0 end), 
	                    Total = count(ProjectDPR_Id) 
                    from tbl_ProjectDPR 
                    left join tbl_ProjectType on ProjectType_Id = ProjectDPR_ProjectTypeId
                    join M_Jurisdiction on M_Jurisdiction.M_Jurisdiction_Id = ProjectDPR_DistrictId
                    left join tbl_ULB on ULB_Id = ProjectDPR_ULBId
                    left join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectDPR_Status = 1 ";
        if (NodalDepartment_Id != 0)
        {
            strQuery += " and ProjectDPR_NodalDept_Id = '" + NodalDepartment_Id + "'";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (ProjectDPR_Id != 0)
        {
            strQuery += " and ProjectDPR_Id = '" + ProjectDPR_Id + "'";
        }
        if (Project_Id != 0)
        {
            strQuery += " and ProjectDPR_Project_Id = '" + Project_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectDPR_ULBId = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectDPR_DivisionId = '" + Division_Id + "'";
        }
        if (ProjectType_Id != 0)
        {
            strQuery += " and ProjectDPR_ProjectTypeId = '" + ProjectType_Id + "'";
        }
        strQuery += @" group by ProjectDPR_ProjectTypeId, ProjectType_Name
                       order by ProjectType_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_DPR_BID_Process_Dashboard(int Scheme_Id, int Zone_Id, int Circle_Id, int Division_Id, int District_Id, int ULB_Id, int Tranche_Id, int NodalDepartment_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy;
                    select 
	                    count(*) TotalDPR, 
	                    Process_Not_Started = sum(case when isnull(ProjectDPRTender_Id, 0) = 0 then 1 else 0 end), 
	                    EFC_PFAD = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 1 then 1 else 0 end), 
	                    GO_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 2 then 1 else 0 end), 
	                    NIT_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 3 then 1 else 0 end), 
	                    NIT_Issued2 = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 4 then 1 else 0 end), 
	                    Tender_Published = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 5 then 1 else 0 end), 
	                    Pre_Bid_Meeting = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 6 then 1 else 0 end), 
	                    Technical_Bid_Opened = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 8 then 1 else 0 end), 
	                    Bidders_Evaluation_Technical = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 9 then 1 else 0 end), 
	                    Financial_Bid_Opened = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 10 then 1 else 0 end), 
	                    Send_To_SMD_For_Approval = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 11 then 1 else 0 end), 
	                    SLTC_Meeting_After_Tender_Approval = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 12 then 1 else 0 end), 
	                    Work_Order_Issued = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 13 then 1 else 0 end), 
	                    Agreement_With_Bidder = sum(case when tDPRTender.ProjectDPRTender_Step_Status = 14 then 1 else 0 end) 
                    from tbl_ProjectDPR
                    left join
					(
						select 
							ROW_NUMBER() over (partition by ProjectDPRApproval_ProjectDPR_Id order by ProjectDPRApproval_Id desc) rrr,
							ProjectDPRApproval_Id,
							ProjectDPRApproval_Date = convert(char(10), ProjectDPRApproval_Date, 103),
							ProjectDPRApproval_ProjectDPR_Id,
							ProjectDPRApproval_Status_Id,
							ProjectDPRApproval_Comments,
							ProjectDPRApproval_AddedBy,
							ProjectDPRApproval_AddedOn,
							ProjectDPRApproval_Next_Organisation_Id,
							ProjectDPRApproval_Next_Designation_Id,
							ProjectDPRApproval_Status,
							ProjectDPRApproval_Step_Count, 
							ProjectDPRApproval_Loop 
						from tbl_ProjectDPRApproval
                        where ProjectDPRApproval_Status = 1
					) tProjectDPRApproval on ProjectDPR_Id = ProjectDPRApproval_ProjectDPR_Id and tProjectDPRApproval.rrr = 1
                    left join 
                    (
	                    select 
		                    ROW_NUMBER() over (partition by ProjectDPRTender_ProjectDPR_Id order by ProjectDPRTender_Id desc) rrDPR,
		                    ProjectDPRTender_Id,
		                    ProjectDPRTender_ProjectDPR_Id,
		                    ProjectDPRTender_Step_Status,
		                    ProjectDPRTender_ActionDate
	                    from tbl_ProjectDPRTender
	                    where ProjectDPRTender_Status = 1
                    ) tDPRTender on ProjectDPRTender_ProjectDPR_Id = ProjectDPR_Id and rrDPR = 1
                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    join tbl_Circle on Circle_Id = Division_CircleId
                    join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectDPR_Status = 1 and ProjectDPR_Project_Id in (" + Scheme_Id + ") and ProjectDPRApproval_Next_Designation_Id = -1 and ProjectDPRApproval_Next_Organisation_Id = -1 ";
        if (NodalDepartment_Id > 0)
        {
            strQuery += " and ProjectDPR_NodalDept_Id = '" + NodalDepartment_Id + "'";
        }
        if (Tranche_Id > 0)
        {
            strQuery += " and ProjectDPR_TrancheTypeId = '" + Tranche_Id + "'";
        }
        if (Scheme_Id > 0)
        {
            strQuery += " and ProjectDPR_Project_Id = '" + Scheme_Id + "'";
        }
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectDPR_DistrictId = '" + District_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Project Work Data Entry
    public DataSet get_tbl_ProjectWorkPkg_DataEntry_View(int Work_Id)
    {
        string SanctionedCost = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectWorkPkg_Id,
	                    ProjectWorkPkg_Work_Id,
                        ProjectWorkPkg_Code, 
	                    ProjectWorkPkg_Name,
                        ProjectWorkPkg_Name_Code = isnull(ProjectWorkPkg_Code, '') + ' - ' + ProjectWorkPkg_Name,
	                    ProjectWorkPkg_AgreementAmount,
                        ProjectWorkPkg_AgreementAmount_RS = convert(decimal(18,0), (Isnull(ProjectWorkPkg_AgreementAmount,0)*100000)), 
	                    ProjectWorkPkg_Agreement_Date = convert(char(10), ProjectWorkPkg_Agreement_Date, 103),
                        ProjectWorkPkg_Due_Date = convert(char(10), ProjectWorkPkg_Due_Date, 103), 
                        ProjectWorkPkg_Start_Date = convert(char(10), ProjectWorkPkg_Start_Date, 103), 
	                    ProjectWorkPkg_Agreement_No,
	                    ProjectWorkPkg_Vendor_Id,
	                    ProjectWorkPkg_Staff_Id,
	                    ProjectWorkPkg_Lead_Vendor_Name = Vendor.Person_Name,
	                    ProjectWorkPkg_Lead_Vendor_PAN = VendorJurisdiction.PersonJuridiction_PAN,
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode,
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
	                    ULB_Name, 
	                    Jurisdiction_Name_Eng, 
	                    Division_Name, 
	                    Circle_Name, 
	                    Zone_Name, 
	                    ProjectWork_DistrictId, 
	                    ProjectWork_ULB_Id, 
	                    ProjectWork_DivisionId, 
	                    Division_CircleId, 
                        ProjectWorkPkg_LockedOn, 
                        ProjectWorkPkg_Locked_By,
                        isnull(ProjectWorkPkg_LastRABillNo,'0') as ProjectWorkPkg_LastRABillNo,
                        ProjectWorkPkg_ApprovalFile_Path, 
                        ProjectWorkPkg_LastRABillDate = convert(char(10), ProjectWorkPkg_LastRABillDate, 103), 
                        ProjectWorkPkg_LastRABillNo,
                        ProjectWorkPkg_GST = isnull(ProjectWorkPkg_GST, 'Exclude GST'),			
                        ProjectWorkPkg_Percent = case when isnull(ProjectWorkPkg_Percent, 0) = 0 then 12 else ProjectWorkPkg_Percent end,		
                        ProjectWorkPkg_ExtendDate = case when ProjectWorkPkg_ExtendDate is null then convert(char(10), ProjectWorkPkg_Due_Date, 103) else convert(char(10), ProjectWorkPkg_ExtendDate, 103) end, 
                        ProjectWorkPkg_PhysicallyCompleted, 
	                    ProjectWorkPkg_PreviousRA = isnull(tPreviousRA.ProjectWorkPkg_PreviousRA, 0)
                    from tbl_ProjectWorkPkg
                    join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join tbl_PersonDetail Vendor on Vendor.Person_Id = ProjectWorkPkg_Vendor_Id
                    left join tbl_PersonJuridiction VendorJurisdiction on VendorJurisdiction.PersonJuridiction_PersonId = Vendor.Person_Id
                    left join 
                    (
	                    select 
		                    WorkPkg_Id = ProjectWorkPkg_Id,
		                    ProjectWorkPkg_PreviousRA = sum(ISNULL(FinancialTrans_Amount,0) / 100000) 
	                    from tbl_PackageInvoice
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
	                    where PackageInvoice_Status=1 and ProjectWorkPkg_Status = 1 and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType='C' and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
	                    group by ProjectWorkPkg_Id
                    ) tPreviousRA on tPreviousRA.WorkPkg_Id = ProjectWorkPkg_Id  
                    where ProjectWorkPkg_Status = 1 and ProjectWork_Status = 1 ";
        if (Work_Id != 0)
        {
            strQuery += " and ProjectWorkPkg_Work_Id = '" + Work_Id + "'";
        }
        strQuery += " order by ProjectWork_Name, ProjectWorkPkg_Name";
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_ProjectWork_Data_Entry(tbl_ProjectWork obj_tbl_ProjectWork, List<tbl_ProjectWorkGO> obj_tbl_ProjectWorkGO_Li, List<tbl_ProjectWorkIssueDetails> obj_tbl_ProjectWorkIssueDetails_Li, decimal physicalTarget, List<tbl_ProjectWorkPkgTemp> obj_tbl_ProjectWorkPkg_Li, string Client, List<tbl_ProjectUC> obj_tbl_ProjectUC_Li, Dictionary<string, byte[]> file_Upload_Array, List<tbl_ProjectPkg_PhysicalProgress> obj_tbl_ProjectPkg_PhysicalProgress_Li, List<tbl_ProjectSalientFeatures> obj_tbl_ProjectSalientFeatures_Li, string extGO, ref string Msg)
    {
        bool flag = false;
        string strQuery = "";
        string fileName = "";
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (check_Duplicate_ProjectWork(obj_tbl_ProjectWork.ProjectWork_Id, obj_tbl_ProjectWork.ProjectWork_ProjectCode, trans, cn))
                {
                    trans.Commit();
                    cn.Close();
                    Msg = "Duplicate Project Code";
                    flag = true;
                }
                else
                {
                    if (obj_tbl_ProjectWork.ProjectWork_NodalDeptScheme_Id == -1)
                    {
                        tbl_NodalDeptScheme obj_tbl_NodalDeptScheme = new tbl_NodalDeptScheme();
                        obj_tbl_NodalDeptScheme.NodalDeptScheme_NodalDept_Id = obj_tbl_ProjectWork.ProjectWork_NodalDepartment_Id;
                        obj_tbl_NodalDeptScheme.NodalDeptScheme_Name = obj_tbl_ProjectWork.NodalDeptScheme_Name;
                        obj_tbl_NodalDeptScheme.NodalDeptScheme_Status = 1;
                        obj_tbl_NodalDeptScheme.NodalDeptScheme_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                        obj_tbl_ProjectWork.ProjectWork_NodalDeptScheme_Id = Insert_tbl_NodalDeptScheme(obj_tbl_NodalDeptScheme, trans, cn);
                    }
                    if (!Directory.Exists(Server.MapPath(".") + "\\Downloads\\GO\\"))
                    {
                        Directory.CreateDirectory(Server.MapPath(".") + "\\Downloads\\GO\\");
                    }
                    if (obj_tbl_ProjectWork.ProjectWork_GO_Path_Bytes != null && obj_tbl_ProjectWork.ProjectWork_GO_Path_Bytes.Length > 0)
                    {
                        fileName = DateTime.Now.Ticks.ToString("x") + "." + extGO;
                        obj_tbl_ProjectWork.ProjectWork_GO_Path = "\\Downloads\\GO\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\GO\\" + fileName, obj_tbl_ProjectWork.ProjectWork_GO_Path_Bytes);
                    }
                    else
                    {
                        if (extGO == "-1")
                        {

                        }
                        else
                        {
                            obj_tbl_ProjectWork.ProjectWork_GO_Path = "";
                        }
                    }
                    if (obj_tbl_ProjectWork.ProjectWork_Id == 0)
                    {
                        obj_tbl_ProjectWork.ProjectWork_Id = Insert_tbl_ProjectWork(obj_tbl_ProjectWork, trans, cn);
                    }
                    else
                    {
                        Update_tbl_ProjectWork(obj_tbl_ProjectWork, trans, cn);
                    }
                    if (Client == "CNDS")
                    {
                        Update_tbl_ProjectWorkGO_Status(obj_tbl_ProjectWork.ProjectWork_Id, obj_tbl_ProjectWork.ProjectWork_AddedBy, trans, cn);
                        if (obj_tbl_ProjectWorkGO_Li != null)
                        {
                            for (int i = 0; i < obj_tbl_ProjectWorkGO_Li.Count; i++)
                            {
                                obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Work_Id = obj_tbl_ProjectWork.ProjectWork_Id;
                                if (obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes != null && obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes.Length > 0)
                                {
                                    fileName = DateTime.Now.Ticks.ToString("x") + ".pdf";
                                    obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Path = "\\Downloads\\GO\\" + fileName;
                                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\GO\\" + fileName, obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes);
                                }
                                else
                                {
                                    obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Path = "";
                                }
                                if (obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Id > 0)
                                {
                                    Update_tbl_ProjectWorkGO(obj_tbl_ProjectWorkGO_Li[i], trans, cn);
                                }
                                else
                                {
                                    Insert_tbl_ProjectWorkGO(obj_tbl_ProjectWorkGO_Li[i], trans, cn);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (obj_tbl_ProjectWorkGO_Li != null)
                        {
                            string ProjectWorkGO_Id_Active = "0";
                            for (int i = 0; i < obj_tbl_ProjectWorkGO_Li.Count; i++)
                            {
                                ProjectWorkGO_Id_Active += ", " + obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Id.ToString();

                                obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Work_Id = obj_tbl_ProjectWork.ProjectWork_Id;
                                if (obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes != null && obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes.Length > 0)
                                {
                                    fileName = DateTime.Now.Ticks.ToString("x") + ".pdf";
                                    obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Path = "\\Downloads\\GO\\" + fileName;
                                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\GO\\" + fileName, obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Bytes);
                                }
                                else
                                {
                                    obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Document_Path = "";
                                }
                                if (obj_tbl_ProjectWorkGO_Li[i].ProjectWorkGO_Id > 0)
                                {
                                    Update_tbl_ProjectWorkGO(obj_tbl_ProjectWorkGO_Li[i], trans, cn);
                                }
                                else
                                {
                                    Insert_tbl_ProjectWorkGO(obj_tbl_ProjectWorkGO_Li[i], trans, cn);
                                }
                            }
                            //strQuery = " set dateformat dmy;Update  tbl_ProjectWorkGO set ProjectWorkGO_ModifiedBy = '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "' ,  ProjectWorkGO_ModifiedOn =  getdate() , ProjectWorkGO_Status = 0  where ProjectWorkGO_Status = '1' and ProjectWorkGO_Work_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "' and ProjectWorkGO_Id not in (" + ProjectWorkGO_Id_Active + ")";
                            //ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                        }
                    }

                    if (Client == "CNDS")
                    {
                        for (int i = 0; i < obj_tbl_ProjectWorkIssueDetails_Li.Count; i++)
                        {
                            tbl_ProjectWorkIssueDetails obj_tbl_ProjectWorkIssueDetails = obj_tbl_ProjectWorkIssueDetails_Li[i];
                            obj_tbl_ProjectWorkIssueDetails.ProjectWorkIssueDetails_WorkId = obj_tbl_ProjectWork.ProjectWork_Id;
                            if (obj_tbl_ProjectWorkIssueDetails.ProjectWorkIssueDetails_Path_Bytes != null && obj_tbl_ProjectWorkIssueDetails.ProjectWorkIssueDetails_Path_Bytes.Length > 0)
                            {
                                fileName = DateTime.Now.Ticks.ToString("x") + ".pdf";
                                obj_tbl_ProjectWorkIssueDetails.ProjectWorkIssueDetails_Path = "\\Downloads\\Issue\\" + fileName;
                                File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Issue\\" + fileName, obj_tbl_ProjectWorkIssueDetails.ProjectWorkIssueDetails_Path_Bytes);
                            }
                            if (obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetails_Id == 0)
                            {
                                obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetails_Id = Insert_tbl_ProjectWorkIssueDetails(obj_tbl_ProjectWorkIssueDetails_Li[i], trans, cn);
                                if (obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetail_History_Li != null)
                                {
                                    for (int k = 0; k < obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetail_History_Li.Count; k++)
                                    {
                                        obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetail_History_Li[k].PMIS_ProjectWorkIssueHistory_IssueDetails_Id = obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetails_Id;
                                        Insert_tbl_ProjectWorkIssueDetail_History(obj_tbl_ProjectWorkIssueDetails_Li[i].ProjectWorkIssueDetail_History_Li[k], trans, cn);
                                    }
                                }
                            }
                            else
                            {
                                Update_tbl_ProjectWorkIssueDetails(obj_tbl_ProjectWorkIssueDetails_Li[i], trans, cn);
                            }
                        }

                        if (physicalTarget >= 100)
                        {
                            strQuery = " set dateformat dmy; update tbl_ProjectWork set ProjectWork_Is_Phase_1 = 3 where ProjectWork_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "'";
                            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                        }
                        strQuery = @"set dateformat dmy;
                                    with cte as (
                                    select 
	                                    ROW_NUMBER() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrr,
	                                    ProjectWorkFinancialTarget_ProjectWork_Id,
	                                    ProjectWorkFinancialTarget_Month,
	                                    ProjectWorkFinancialTarget_Year,
	                                    ProjectWorkFinancialTarget_Target = isnull(ProjectWorkFinancialTarget_Target, 0),
	                                    ProjectWorkPhysicalTarget_Target,
	                                    ProjectWorkFinancialTarget_TargetMonth = convert(char(10), ProjectWorkFinancialTarget_TargetMonth, 103),
	                                    ProjectWorkFinancialTarget_TargetA,
	                                    ProjectWorkFinancialTarget_TrialMonth = convert(char(10), ProjectWorkFinancialTarget_TrialMonth, 103)
                                    from tbl_ProjectWorkFinancialTarget 
                                    where ProjectWorkFinancialTarget_Status = 1 and ProjectWorkFinancialTarget_ProjectWork_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "') select * from cte where cte.rrr = 1";
                        ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                        strQuery = " set dateformat dmy; update tbl_ProjectWorkFinancialTarget set ProjectWorkFinancialTarget_Status = 0 where ProjectWorkFinancialTarget_ProjectWork_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "' and ProjectWorkFinancialTarget_Status = 1 ";
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                        if (AllClasses.CheckDataSet(ds))
                        {
                            strQuery = " set dateformat dmy; insert into tbl_ProjectWorkFinancialTarget(ProjectWorkFinancialTarget_ProjectWork_Id, ProjectWorkFinancialTarget_Month, ProjectWorkFinancialTarget_Year, ProjectWorkFinancialTarget_Target, ProjectWorkPhysicalTarget_Target, ProjectWorkFinancialTarget_AddedOn, ProjectWorkFinancialTarget_AddadBy, ProjectWorkFinancialTarget_Status, ProjectWorkFinancialTarget_TargetMonth) values('" + obj_tbl_ProjectWork.ProjectWork_Id + "', '" + ds.Tables[0].Rows[0]["ProjectWorkFinancialTarget_Month"].ToString() + "', '" + ds.Tables[0].Rows[0]["ProjectWorkFinancialTarget_Year"].ToString() + "', '" + ds.Tables[0].Rows[0]["ProjectWorkFinancialTarget_Target"].ToString() + "', '" + physicalTarget + "', getdate(), '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "', 1, convert(date, '" + ds.Tables[0].Rows[0]["ProjectWorkFinancialTarget_TargetMonth"].ToString() + "', 103))";
                        }
                        else
                        {
                            strQuery = " set dateformat dmy; insert into tbl_ProjectWorkFinancialTarget(ProjectWorkFinancialTarget_ProjectWork_Id, ProjectWorkPhysicalTarget_Target, ProjectWorkFinancialTarget_AddedOn, ProjectWorkFinancialTarget_AddadBy, ProjectWorkFinancialTarget_Status) values('" + obj_tbl_ProjectWork.ProjectWork_Id + "', '" + physicalTarget + "', getdate(), '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "', 1)";
                        }
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                        strQuery = @"set dateformat dmy; update tbl_PackageInvoice set PackageInvoice_Status = 0, PackageInvoice_ModifiedOn = getdate(), PackageInvoice_ModifiedBy = '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "' from tbl_PackageInvoice join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id where PackageInvoice_Status=1 and ProjectWorkPkg_Status = 1 and ProjectWorkPkg_Work_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "' and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType='C' and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1)";
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

                        strQuery = @"set dateformat dmy; update tbl_Package_ADP set Package_ADP_Status = 0, Package_ADP_ModifiedOn = getdate(), Package_ADP_ModifiedBy = '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "' from tbl_Package_ADP join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1 and ProjectWorkPkg_Work_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "' and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType='C'";
                        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                    }
                    if (Client == "CNDS")
                    {
                        Update_tbl_ProjectWorkPkg_Status(obj_tbl_ProjectWork.ProjectWork_Id, obj_tbl_ProjectWork.ProjectWork_AddedBy, trans, cn);

                        if (obj_tbl_ProjectWorkPkg_Li != null && obj_tbl_ProjectWorkPkg_Li.Count > 0)
                        {
                            for (int i = 0; i < obj_tbl_ProjectWorkPkg_Li.Count; i++)
                            {
                                if (obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id == 0 && obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Lead_Vendor_PAN != "")
                                {
                                    obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id = Create_Vendor(obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Lead_Vendor_PAN, obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Lead_Vendor_Name, obj_tbl_ProjectWork.ProjectWork_AddedBy, cn, trans);
                                }
                                else
                                {
                                    obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id = Update_Vendor(obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Lead_Vendor_PAN, obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Lead_Vendor_Name, obj_tbl_ProjectWork.ProjectWork_AddedBy, obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id, cn, trans);
                                }

                                tbl_ProjectWorkPkg obj_tbl_ProjectWorkPkg = new tbl_ProjectWorkPkg();

                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_AddedBy = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_AddedBy;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_AgreementAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_AgreementAmount;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Agreement_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Agreement_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Agreement_No = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Agreement_No;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Due_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Due_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Code = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Code;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_ExtendDate = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_ExtendDate;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_GST = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_GST;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Name = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Name;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Percent = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Percent;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Start_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Start_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Status = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Status;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Vendor_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Vendor_JV_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_JV_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id = obj_tbl_ProjectWork.ProjectWork_Id;

                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id = Insert_tbl_ProjectWorkPkg(obj_tbl_ProjectWorkPkg, trans, cn);

                                if (obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousADP > 0)
                                {
                                    tbl_Package_ADP obj_tbl_Package_ADP = new tbl_Package_ADP();
                                    obj_tbl_Package_ADP.Package_ADP_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                                    obj_tbl_Package_ADP.Package_ADP_Status = 1;
                                    obj_tbl_Package_ADP.Package_ADP_Package_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id;
                                    obj_tbl_Package_ADP.Package_ADP_Category_Id = 0;
                                    obj_tbl_Package_ADP.Package_ADP_RefNo = "";
                                    obj_tbl_Package_ADP.Package_ADP_Date = "";
                                    obj_tbl_Package_ADP.Package_ADP_ADPTotalAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousADP * 100000;

                                    tbl_FinancialTrans obj_tbl_FinancialTrans = new tbl_FinancialTrans();
                                    obj_tbl_FinancialTrans.FinancialTrans_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                                    obj_tbl_FinancialTrans.FinancialTrans_Status = 1;
                                    obj_tbl_FinancialTrans.FinancialTrans_FinancialYear_Id = 0;
                                    obj_tbl_FinancialTrans.FinancialTrans_Date = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_GO_Number = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_GO_Date = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_Package_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id;
                                    obj_tbl_FinancialTrans.FinancialTrans_Work_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id;
                                    obj_tbl_FinancialTrans.FinancialTrans_FilePath1 = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_TransType = "C";
                                    obj_tbl_FinancialTrans.FinancialTrans_EntryType = "ADP";
                                    obj_tbl_FinancialTrans.FinancialTrans_TransAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousADP * 100000;
                                    obj_tbl_FinancialTrans.FinancialTrans_Amount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousADP * 100000;
                                    obj_tbl_FinancialTrans.FinancialTrans_GST = 0;
                                    obj_tbl_FinancialTrans.FinancialTrans_Comments = "";

                                    if (obj_tbl_Package_ADP.Package_ADP_RefNo == "")
                                        obj_tbl_Package_ADP.Package_ADP_RefNo = get_tbl_Package_ADP_RefNo(trans, cn);
                                    obj_tbl_Package_ADP.Package_ADP_Loop = 0;
                                    obj_tbl_Package_ADP.Package_ADP_Id = Insert_tbl_Package_ADP(obj_tbl_Package_ADP, trans, cn);

                                    if (obj_tbl_FinancialTrans != null)
                                    {
                                        obj_tbl_FinancialTrans.FinancialTrans_Invoice_Id = obj_tbl_Package_ADP.Package_ADP_Id;
                                        Insert_tbl_FinancialTrans(obj_tbl_FinancialTrans, trans, cn);
                                    }
                                }

                                if (obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousRA > 0)
                                {
                                    tbl_PackageInvoice obj_tbl_PackageInvoice = new tbl_PackageInvoice();
                                    obj_tbl_PackageInvoice.PackageInvoice_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                                    obj_tbl_PackageInvoice.PackageInvoice_Date = "";
                                    obj_tbl_PackageInvoice.PackageInvoice_Package_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id;
                                    obj_tbl_PackageInvoice.PackageInvoice_Status = 1;
                                    obj_tbl_PackageInvoice.PackageInvoice_VoucherNo = "";
                                    obj_tbl_PackageInvoice.InvoiceAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousRA * 100000;
                                    obj_tbl_PackageInvoice.PackageInvoice_InvoiceAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousRA * 100000;

                                    tbl_FinancialTrans obj_tbl_FinancialTrans = new tbl_FinancialTrans();
                                    obj_tbl_FinancialTrans.FinancialTrans_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                                    obj_tbl_FinancialTrans.FinancialTrans_Status = 1;
                                    obj_tbl_FinancialTrans.FinancialTrans_FinancialYear_Id = 0;
                                    obj_tbl_FinancialTrans.FinancialTrans_Date = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_GO_Number = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_GO_Date = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_Package_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id;
                                    obj_tbl_FinancialTrans.FinancialTrans_Work_Id = obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id;
                                    obj_tbl_FinancialTrans.FinancialTrans_FilePath1 = "";
                                    obj_tbl_FinancialTrans.FinancialTrans_TransType = "C";
                                    obj_tbl_FinancialTrans.FinancialTrans_EntryType = "Fund Allocated";
                                    obj_tbl_FinancialTrans.FinancialTrans_TransAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousRA * 100000;
                                    obj_tbl_FinancialTrans.FinancialTrans_Amount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_PreviousRA * 100000;
                                    obj_tbl_FinancialTrans.FinancialTrans_GST = 0;
                                    obj_tbl_FinancialTrans.FinancialTrans_Comments = "";

                                    obj_tbl_PackageInvoice.PackageInvoice_Id = Insert_tbl_PackageInvoice(obj_tbl_PackageInvoice, trans, cn);

                                    if (obj_tbl_FinancialTrans != null)
                                    {
                                        obj_tbl_FinancialTrans.FinancialTrans_Invoice_Id = obj_tbl_PackageInvoice.PackageInvoice_Id;
                                        Insert_tbl_FinancialTrans(obj_tbl_FinancialTrans, trans, cn);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (obj_tbl_ProjectWorkPkg_Li != null && obj_tbl_ProjectWorkPkg_Li.Count > 0)
                        {
                            for (int i = 0; i < obj_tbl_ProjectWorkPkg_Li.Count; i++)
                            {
                                tbl_ProjectWorkPkg obj_tbl_ProjectWorkPkg = new tbl_ProjectWorkPkg();
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_AddedBy = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_AddedBy;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_AgreementAmount = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_AgreementAmount;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Agreement_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Agreement_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Agreement_No = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Agreement_No;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Due_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Due_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Code = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Code;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_ExtendDate = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_ExtendDate;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_GST = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_GST;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Name = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Name;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Percent = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Percent;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Start_Date = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Start_Date;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Status = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Status;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Vendor_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Vendor_JV_Id = obj_tbl_ProjectWorkPkg_Li[i].ProjectWorkPkg_Vendor_JV_Id;
                                obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id = obj_tbl_ProjectWork.ProjectWork_Id;

                                if (obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id > 0)
                                {
                                    Update_tbl_ProjectWorkPkg(obj_tbl_ProjectWorkPkg, trans, cn);
                                }
                                else
                                {
                                    obj_tbl_ProjectWorkPkg.ProjectWorkPkg_Id = Insert_tbl_ProjectWorkPkg(obj_tbl_ProjectWorkPkg, trans, cn);
                                }
                            }
                        }
                    }

                    if (obj_tbl_ProjectUC_Li != null)
                    {
                        for (int i = 0; i < obj_tbl_ProjectUC_Li.Count; i++)
                        {
                            tbl_ProjectUC obj_tbl_ProjectUC = obj_tbl_ProjectUC_Li[i];
                            if (obj_tbl_ProjectUC.ProjectUC_Document_Bytes != null && obj_tbl_ProjectUC.ProjectUC_Document_Bytes.Length > 0)
                            {
                                fileName = DateTime.Now.Ticks.ToString("x") + ".pdf";
                                obj_tbl_ProjectUC.ProjectUC_Document = "\\Downloads\\UC\\" + fileName;
                                File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\UC\\" + fileName, obj_tbl_ProjectUC.ProjectUC_Document_Bytes);
                            }
                            if (obj_tbl_ProjectUC.ProjectUC_Id == 0)
                            {
                                Insert_tbl_ProjectUC(obj_tbl_ProjectUC, trans, cn);
                            }
                            else
                            {
                                Update_tbl_ProjectUC(obj_tbl_ProjectUC, trans, cn);
                            }
                        }
                    }

                    if (obj_tbl_ProjectPkg_PhysicalProgress_Li != null)
                    {
                        string sql = "set dateformat dmy; update tbl_Projectpkg_PhysicalProgress set Projectpkg_PhysicalProgress_ModifiedOn = getdate(), Projectpkg_PhysicalProgress_ModifiedBy = '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "', Projectpkg_PhysicalProgress_Status = 0 where Projectpkg_PhysicalProgress_Status = 1 and ProjectPkg_PhysicalProgress_PrjectWork_Id = '" + obj_tbl_ProjectWork.ProjectWork_Id + "'";
                        ds = ExecuteSelectQuerywithTransaction(cn, sql, trans);
                        for (int i = 0; i < obj_tbl_ProjectPkg_PhysicalProgress_Li.Count; i++)
                        {
                            obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_PrjectWork_Id = obj_tbl_ProjectWork.ProjectWork_Id;
                            Insert_tbl_ProjectPkg_PhysicalProgress(obj_tbl_ProjectPkg_PhysicalProgress_Li[i], trans, cn);

                            tbl_ProjectUC_PhysicalProgress obj_tbl_ProjectUC_PhysicalProgress = new tbl_ProjectUC_PhysicalProgress();
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_AddedBy = obj_tbl_ProjectWork.ProjectWork_AddedBy;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_FinancialYear_Id = 0;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgress = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_Value;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_WithheldProgress = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectUC_PhysicalProgress_WithheldProgress;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalFunctional = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_Functional;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalNonFunctional = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_NonFunctional;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_Remarks = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_Remarks;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgressComponent_Id = obj_tbl_ProjectPkg_PhysicalProgress_Li[i].ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_ProjectWork_Id = obj_tbl_ProjectWork.ProjectWork_Id;
                            obj_tbl_ProjectUC_PhysicalProgress.ProjectUC_PhysicalProgress_Status = 1;
                            Insert_tbl_ProjectUC_PhysicalProgress(obj_tbl_ProjectUC_PhysicalProgress, trans, cn);
                        }
                    }

                    if (file_Upload_Array != null && file_Upload_Array.Count > 0)
                    {
                        foreach (KeyValuePair<string, byte[]> item in file_Upload_Array)
                        {
                            if (item.Value != null)
                            {
                                if (!Directory.Exists(Server.MapPath(".") + "\\Downloads\\Gallery\\" + obj_tbl_ProjectWork.ProjectWork_Id.ToString()))
                                {
                                    Directory.CreateDirectory(Server.MapPath(".") + "\\Downloads\\Gallery\\" + obj_tbl_ProjectWork.ProjectWork_Id.ToString());
                                }
                                if (item.Value.Length > 0)
                                {
                                    File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\Gallery\\" + obj_tbl_ProjectWork.ProjectWork_Id.ToString() + "\\" + item.Key, item.Value);
                                    string Path1 = "\\Downloads\\Gallery\\" + obj_tbl_ProjectWork.ProjectWork_Id.ToString() + "\\" + item.Key;
                                    strQuery = "set dateformat dmy; insert into tbl_ProjectWorkGallery (ProjectWorkGallery_Work_Id, ProjectWorkGallery_Path, ProjectWorkGallery_AddedBy, ProjectWorkGallery_AddedOn, ProjectWorkGallery_Status) values ('" + obj_tbl_ProjectWork.ProjectWork_Id + "', '" + Path1 + "', '" + obj_tbl_ProjectWork.ProjectWork_AddedBy + "', getdate(), 1)";
                                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                                }
                            }
                        }
                    }

                    Update_tbl_ProjectSalientFeatures(obj_tbl_ProjectWork.ProjectWork_Id, obj_tbl_ProjectWork.ProjectWork_AddedBy, trans, cn);
                    if (obj_tbl_ProjectSalientFeatures_Li != null)
                    {
                        for (int i = 0; i < obj_tbl_ProjectSalientFeatures_Li.Count; i++)
                        {
                            Insert_tbl_ProjectSalientFeatures(obj_tbl_ProjectSalientFeatures_Li[i], trans, cn);
                        }
                    }
                    trans.Commit();
                    cn.Close();
                    flag = true;
                }
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private int Create_Vendor(string Vendor_PAN, string Vendor_Name, int Added_By, SqlConnection cn, SqlTransaction trans)
    {
        tbl_PersonDetail obj_PersonDetail = new tbl_PersonDetail();
        obj_PersonDetail.Person_AddedBy = Added_By;
        obj_PersonDetail.Person_Id = 0;
        obj_PersonDetail.PersonDetail_Code = "";
        obj_PersonDetail.Person_BranchOffice_Id = 1;
        obj_PersonDetail.Person_Name = Vendor_Name;
        obj_PersonDetail.Person_Status = 1;

        tbl_PersonJuridiction obj_PersonJuridiction = new tbl_PersonJuridiction();
        obj_PersonJuridiction.M_Level_Id = 3;
        obj_PersonJuridiction.PersonJuridiction_PAN = Vendor_PAN;
        obj_PersonJuridiction.PersonJuridiction_AddedBy = Added_By;
        obj_PersonJuridiction.PersonJuridiction_DepartmentId = 0;
        obj_PersonJuridiction.PersonJuridiction_DesignationId = 0;
        obj_PersonJuridiction.PersonJuridiction_ParentPerson_Id = 0;
        obj_PersonJuridiction.PersonJuridiction_Status = 1;

        obj_PersonJuridiction.PersonJuridiction_GSTIN = Vendor_PAN;
        obj_PersonJuridiction.PersonJuridiction_UserTypeId = 5;

        obj_PersonDetail.Person_Id = Insert_tbl_PersonDetail(obj_PersonDetail, trans, cn);
        obj_PersonJuridiction.PersonJuridiction_PersonId = obj_PersonDetail.Person_Id;
        Insert_tbl_PersonJuridiction(obj_PersonJuridiction, trans, cn);
        return obj_PersonDetail.Person_Id;
    }

    private int Update_Vendor(string Vendor_PAN, string Vendor_Name, int Added_By, int Vendor_Id, SqlConnection cn, SqlTransaction trans)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_PersonDetail set Person_Name = '" + Vendor_Name + "' where Person_Id = '" + Vendor_Id + "' ";
        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);

        strQuery = " set dateformat dmy; update tbl_PersonJuridiction set PersonJuridiction_Firm_Name = '" + Vendor_Name + "', PersonJuridiction_PAN = '" + Vendor_PAN + "' where PersonJuridiction_PersonId = '" + Vendor_Id + "'";
        ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        return Vendor_Id;
    }
    #endregion

    #region Data Dump CNDS
    public DataSet get_tbl_ProjectWork_Data_Dump_MIS_CNDS(string Scheme_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, int Step_Status, bool isPivot, string fromDate, string tillDate)
    {
        string strQuery = "";
        DataSet dt = new DataSet();
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        string SanctionedCost = "";
        if (Client == "CNDS")
        {
            SanctionedCost = "[Sanctioned Cost (In Lakhs)] = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "[Sanctioned Cost (In Lakhs)] = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        row_number() over (order by Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name) Sr_No,
                        Scheme = Project_Name, 
						[CGM] = Zone_Name, 
						GM = Circle_Name,
						Unit = Division_Name, 
						District = Jurisdiction_Name_Eng,                         
						[Project Name] = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        [Project Code] = ProjectWork_ProjectCode, 
						[Client Name] = NodalDept.Person_Name,
                        [Scheme] = NodalDeptScheme_Name,
                        [Under NGT] = ProjectWork_UnderNGT,
                        [Under DCU] = ProjectWork_UnderDCU,
                        [Under CM Ghoshna] = ProjectWork_UnderCM,
                        [Under MSDP] = ProjectWork_UnderMSDP,
                        SanctionedCostCond
						[GO Date] = convert(char(10), ProjectWork_GO_Date, 103), 
                        [GO No] = ProjectWork_GO_No,
						[Centage (In Lakhs)] = ProjectWork_Centage, 
						[Tender Cost Including GST (In Lakhs)] = tProjectWorkPkg.tender_cost,
                        [Tender Cost Excluding GST (In Lakhs)] = tProjectWorkPkg.tender_cost_1,
						[Total Funds released (In Lakhs)] = isnull(tGO_Release.GO_Total, 0),
						[Total Expenditure (In Lakhs)] = isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0),
                              
						[Concern PM] = tEx.Person_Contact,	  
						[Concern GM] = tSE.Person_Contact,	  
						[Concern CM] = tZCE.Person_Contact,	  

                        [Project Start Date (As per Agreement)] = case when ISDATE(ProjectWorkPkg_Agreement_Date) = 1 then convert(date, ProjectWorkPkg_Agreement_Date, 103) else null end,
						[Actual Start Date] = case when ISDATE(ProjectWorkPkg_Start_Date) = 1 then convert(date, ProjectWorkPkg_Start_Date, 103) else null end,
                        [Project End Date (As per Agreement)] = case when ISDATE(ProjectWorkPkg_Due_Date) = 1 then convert(date, ProjectWorkPkg_Due_Date, 103) else null end,
                        [Actual End Date] = case when ISDATE(ProjectWorkPkg_End_Date_Extended) = 1 then convert(date, ProjectWorkPkg_End_Date_Extended, 103) else null end, 
                        
						FPCond 

                        [Physical Progress (%)] = isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0), 
                        Vendor = tVendor.List_Vendor, 
                        Issue = REPLACE(REPLACE((case when ltrim(rtrim(isnull(tIssue.Issue_1, '') + isnull(tIssue.SubIssue_1, '') + isnull(tIssue.Comments_1, ''))) != '' then (isnull(tIssue.Issue_1, '') + ': ' + isnull(tIssue.SubIssue_1, '') + ': ' + isnull(tIssue.Comments_1, '')) else '' end) 
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_2, '') + isnull(tIssue.SubIssue_2, '') + isnull(tIssue.Comments_2, ''))) != '' then (isnull(tIssue.Issue_2, '') + ': ' + isnull(tIssue.SubIssue_2, '') + ': ' + isnull(tIssue.Comments_2, '')) else '' end)
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_3, '') + isnull(tIssue.SubIssue_3, '') + isnull(tIssue.Comments_3, ''))) != '' then (isnull(tIssue.Issue_3, '') + ': ' + isnull(tIssue.SubIssue_3, '') + ': ' + isnull(tIssue.Comments_3, '')) else '' end), CHAR(13),''), CHAR(10),'')
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectWork_ProjectType_Id
					left join tbl_Program on Program_Id = ProjectWork_Is_Phase_1
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join tbl_PersonDetail NodalDept on NodalDept.Person_Id = ProjectWork_NodalDepartment_Id
                    left join tbl_NodalDeptScheme on ProjectWork_NodalDeptScheme_Id = NodalDeptScheme_Id
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_DivisionId order by Person_Id desc) rrP,
							PersonJuridiction_DivisionId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (4, 9, 1056)
					) tEx on tEx.PersonJuridiction_DivisionId = ProjectWork_DivisionId and tEx.rrP = 1
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_CircleId order by Person_Id desc) rrP,
							PersonJuridiction_CircleId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (1035, 1040)
					) tSE on tSE.PersonJuridiction_CircleId = Division_CircleId and tSE.rrP = 1
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_ZoneId order by Person_Id desc) rrP,
							PersonJuridiction_ZoneId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (1042, 1044)
					) tZCE on tZCE.PersonJuridiction_ZoneId = Circle_ZoneId and tZCE.rrP = 1
					left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
							GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
						from 
						(
							select 
								ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
								ProjectWorkGO_Work_Id, 
								GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
								GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
								ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
								ProjectWorkGO_GO_Number,
								ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
								ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
							from tbl_ProjectWorkGO 
							where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
						) tGO_Release 
						group by ProjectWorkGO_Work_Id
					) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id					
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1)
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
                        select 
	                        ProjectWorkIssueDetails_WorkId, 
                            Issue_1 = max(case when rr = 1 then ProjectIssue_Name else null end),
                            SubIssue_1 = max(case when rr = 1 then Dependency_Name else null end),
                            Comments_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Comments else null end),

                            Issue_2 = max(case when rr = 2 then ProjectIssue_Name else null end),
                            SubIssue_2 = max(case when rr = 2 then Dependency_Name else null end),
                            Comments_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Comments else null end),

                            Issue_3 = max(case when rr = 3 then ProjectIssue_Name else null end),
                            SubIssue_3 = max(case when rr = 3 then Dependency_Name else null end),
                            Comments_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Comments else null end)
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWorkIssueDetails_WorkId order by ProjectWorkIssueDetails_Id desc) rr,
		                        ProjectWorkIssueDetails_Issue_Id,
		                        ProjectWorkIssueDetails_Category,
		                        ProjectWorkIssueDetails_Dependency_Id,
		                        ProjectWorkIssueDetails_Date = convert(char(10), ProjectWorkIssueDetails_Date, 103),
		                        ProjectWorkIssueDetails_Comments = REPLACE(REPLACE(ProjectWorkIssueDetails_Comments, CHAR(13),''), CHAR(10),''),
		                        ProjectWorkIssueDetails_WorkId, 
		                        Dependency_Name = REPLACE(REPLACE(Dependency_Name, CHAR(13),''), CHAR(10),''), 
		                        ProjectIssue_Name = REPLACE(REPLACE(ProjectIssue_Name, CHAR(13),''), CHAR(10),'')
	                        from tbl_ProjectWorkIssueDetails 
	                        left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id
	                        left join tbl_Dependency on Dependency_Id = ProjectWorkIssueDetails_Dependency_Id
	                        where ProjectWorkIssueDetails_Status = 1 and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0
                        ) tIssue where rr < 4
                        group by ProjectWorkIssueDetails_WorkId
                    ) tIssue on tIssue.ProjectWorkIssueDetails_WorkId = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target, 
                            ProjectWorkFinancialTarget_TargetMonth, 
							Target_Month_Year = convert(varchar, ProjectWorkFinancialTarget_Month) + '-' + convert(varchar, ProjectWorkFinancialTarget_Year), 
							Target_Month_Year1 = convert(varchar, [dbo].[DaysInMonth](RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2), convert(varchar, ProjectWorkFinancialTarget_Year))) + '/' + RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2) + '/' + convert(varchar, ProjectWorkFinancialTarget_Year) 
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join
					(
						SELECT	
							ProjectWorkPkg_Work_Id,
							STUFF((SELECT ', ' + CAST(isnull(Person_Name, '') + ', Mob: ' + isnull(Person_Mobile1, '') AS VARCHAR(3000)) [text()]
							from tbl_ProjectWorkPkg
							join tbl_PersonDetail on Person_Id = ProjectWorkPkg_Vendor_Id
							WHERE tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id = t.ProjectWorkPkg_Work_Id and ProjectWorkPkg_Status = 1
							FOR XML PATH(''), TYPE)
							.value('.','NVARCHAR(MAX)'),1,2,' ') as List_Vendor
						FROM tbl_ProjectWorkPkg t
						join tbl_PersonDetail t1 on t1.Person_Id = t.ProjectWorkPkg_Vendor_Id
						where t.ProjectWorkPkg_Status = 1
						GROUP BY ProjectWorkPkg_Work_Id
					) tVendor on tVendor.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    where tbl_ProjectWork.ProjectWork_Status = 1";
        strQuery = strQuery.Replace("FPCond", FP);
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (Scheme_Id != "")
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_Project_Id in (" + Scheme_Id + ")";
        }
        if (Step_Status != -1)
        {
            strQuery += " and (isnull(Step_1, 0) + isnull(Step_2, 0) + isnull(Step_3, 0) + isnull(Step_4, 0) + isnull(Step_5, 0) + isnull(Step_6, 0) + isnull(Step_7, 0)) = '" + Step_Status + "' ";
        }
        if (District_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DivisionId = '" + Division_Id + "'";
        }

        if (tillDate != "")
        {
            strQuery = strQuery.Replace("TillDateConditionInvoice", "and convert(date, PackageInvoice_Date, 103) <= convert(date, '" + tillDate + "', 103)");
        }
        else
        {
            strQuery = strQuery.Replace("TillDateConditionInvoice", "");
        }
        strQuery += " order by Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region CM Dashboard CNDS
    public DataSet get_CM_Dashboard_CNDS_1()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
					select 
	                    Datadate = convert(char(10), Datadate, 103),
	                    District_Code, 
	                    District_Name, 
	                    KPI1_Data
                    from CMDARPAN_CNDS.dbo.[table-data] 
                    join CMDARPAN_CNDS.dbo.tbl_Darpan_Master on District_Code = Lvl3_Code
                    where Datadate = (select max(Datadate) from CMDARPAN_CNDS.dbo.[table-data])
                    order by District_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_CM_Dashboard_CNDS_2()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
					select 
	                    Datadate = convert(char(10), Datadate, 103),
	                    District_Code, 
	                    District_Name, 
	                    KPI1_Data, 
	                    KPI2_Data, 
	                    KPI3_Data, 
	                    KPI4_Data, 
	                    KPI5_Data,
	                    KPI6_Data, 
	                    KPI7_Data
                    from CMDARPAN_CNDS2.dbo.[table-data] 
                    join CMDARPAN_CNDS2.dbo.tbl_Darpan_Master on District_Code = Lvl3_Code
                    where Datadate = (select max(Datadate) from CMDARPAN_CNDS2.dbo.[table-data])
                    order by District_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Nodal Circle Linking
    public bool Insert_tbl_NodalCircleLink(List<tbl_NodalCircleLink> obj_tbl_NodalCircleLink_Li, int Added_By, int Circle_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                update_tbl_NodalCircleLink(Circle_Id, Added_By, trans, cn);
                for (int i = 0; i < obj_tbl_NodalCircleLink_Li.Count; i++)
                {
                    Insert_tbl_NodalCircleLink(obj_tbl_NodalCircleLink_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_NodalCircleLink(tbl_NodalCircleLink obj_tbl_NodalCircleLink, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_NodalCircleLink ( [NodalCircleLink_AddedBy],[NodalCircleLink_AddedOn],[NodalCircleLink_Nodal_Id],[NodalCircleLink_Circle_Id],[NodalCircleLink_Status] ) values ('" + obj_tbl_NodalCircleLink.NodalCircleLink_AddedBy + "', getdate(), '" + obj_tbl_NodalCircleLink.NodalCircleLink_Nodal_Id + "', '" + obj_tbl_NodalCircleLink.NodalCircleLink_Circle_Id + "', '" + obj_tbl_NodalCircleLink.NodalCircleLink_Status + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void update_tbl_NodalCircleLink(int Circle_Id, int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_NodalCircleLink set NodalCircleLink_Status = 0, NodalCircleLink_ModifiedBy = '" + Added_By + "', NodalCircleLink_ModifiedOn = getdate() where NodalCircleLink_Status = 1 and [NodalCircleLink_Circle_Id] = '" + Circle_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public DataSet get_tbl_Nodal_Circle_Link(int Circle_Id, bool ShowAll)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Person_Id, 
                        Person_Name, 
						NodalCircleLink_Id,
						NodalCircleLink_Nodal_Id,
						NodalCircleLink_Circle_Id
                    from tbl_PersonDetail 
                    join tbl_PersonJuridiction on Person_Id = PersonJuridiction_PersonId
					leftCondition join tbl_NodalCircleLink on NodalCircleLink_Nodal_Id = Person_Id and NodalCircleLink_Status = 1 and NodalCircleLink_Circle_Id = Circle_IdCond
                    where Person_Status = 1 and PersonJuridiction_UserTypeId = 12 
					order by Person_Name";
        strQuery = strQuery.Replace("Circle_IdCond", Circle_Id.ToString());
        if (ShowAll)
        {
            strQuery = strQuery.Replace("leftCondition", "left");
        }
        else
        {
            strQuery = strQuery.Replace("leftCondition", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Dashboard PMIS CNDS
    public DataSet get_PMIS_Dashboard_CNDS(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, int NodalDept_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
	                    Data_Type = 'Project Count',
	                    Total = convert(varchar, count(*)), 
	                    WithIn_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1 then 1 else 0 end)),
	                    OutSide_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1 then 1 else 0 end)), 
	                    Completed = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end)),
	                    OnGoing = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end))
                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond

                    union all

                    select 
	                    Data_Type = 'Sanctioned Cost',
	                    Total = convert(varchar, sum(isnull(ProjectWork_Budget, 0))),
	                    WithIn_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1 then isnull(ProjectWork_Budget, 0) else 0 end)),
	                    OutSide_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1 then isnull(ProjectWork_Budget, 0) else 0 end)), 
	                    Completed = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end)),
	                    OnGoing = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end))
                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond

                    union all

                    select 
	                    Data_Type = 'Released Amount',
	                    Total = convert(varchar, sum(isnull(tGO_Release.GO_Total, 0))),
	                    WithIn_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)),
	                    OutSide_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)), 
	                    Completed = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)),
	                    OnGoing = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end))
                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000)  
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond 

                    union all

                    select 
	                    Data_Type = 'Total Expenditure',
	                    Total = convert(varchar, sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0))),
	                    WithIn_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0)) else 0 end)),
	                    OutSide_UP = convert(varchar, sum(case when isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0)) else 0 end)), 
	                    Completed = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0)) else 0 end)),
	                    OnGoing = convert(varchar, sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0)) else 0 end))
                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join 
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))) 
	                    from tbl_PackageInvoice
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
	                    where PackageInvoice_Status = 1 and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1)
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != 0)
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id = '" + NodalDept_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_PMIS_Dashboard_CNDS_Filter(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, int Updation, string ProgressType, string FromDate, string TillDate, string NodalDepartmentScheme_Id, int FundingPattern_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        string Client = ConfigurationManager.AppSettings.Get("Client");
        strQuery = @"set dateformat dmy; 
                    select 
	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond NodalDepartmentScheme_IdCond FundingPattern_IdCond ";
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", " and ProjectWork_NodalDeptScheme_Id in (" + NodalDepartmentScheme_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", "");
        }
        if (FundingPattern_Id != 0)
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", " and ProjectWork_NodalDeptScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ");
        }
        else
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        if (ProgressType == "Physical")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) = 0 ";
                }
                else if (Updation == 1)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 10 ";
                }
                else if (Updation == 2)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 10 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 20 ";
                }
                else if (Updation == 3)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 20 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 30 ";
                }
                else if (Updation == 4)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 30 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 40 ";
                }
                else if (Updation == 5)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 40 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 6)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 60 ";
                }
                else if (Updation == 7)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 60 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 70 ";
                }
                else if (Updation == 8)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 70 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 80 ";
                }
                else if (Updation == 9)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 80 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 90 ";
                }
                else if (Updation == 10)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 90 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 25)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 25 ";
                }
                else if (Updation == 50)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 25 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 75)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 75 ";
                }
                else if (Updation == 99)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 75 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 11)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) >= 100 ";
                }
            }
        }
        if (ProgressType == "Financial")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                }
                else if (Updation == 1)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                }
                else if (Updation == 2)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                }
                else if (Updation == 3)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                }
                else if (Updation == 4)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                }
                else if (Updation == 5)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 6)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                }
                else if (Updation == 7)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                }
                else if (Updation == 8)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                }
                else if (Updation == 9)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                }
                else if (Updation == 10)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
                else if (Updation == 11)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                }

                else if (Updation == 25)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                }
                else if (Updation == 50)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 75)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                }
                else if (Updation == 99)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
            }
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Delay Analysis CNDS
    public DataSet get_PMIS_Dashboard_CNDS_Delay_Analysis(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, string NodalDepartmentScheme_Id, bool Delay_Ongoing, string FromDate, string TillDate, int FundingPattern_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
					select 
						Total_Projects = count(tData.ProjectWork_Id),
						No_Delay = sum(case when isnull(tData.No_Delay, 0) = 1 then 1 else 0 end), 
						Delay_Without_Issue = sum(case when isnull(tData.No_Delay, 0) = 0 and isnull(tData.Total_Issue, 0) = 0 then 1 else 0 end), 
						Delay_With_Issue = sum(case when isnull(tData.No_Delay, 0) = 0 and isnull(tData.Total_Issue, 0) > 0 then 1 else 0 end), 
                        Delay = count(tData.ProjectWork_Id) - sum(case when isnull(tData.No_Delay, 0) = 1 then 1 else 0 end)
					from 
					(
						select 
							ProjectWork_Id,
							No_Delay = case when isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 then case when (tProjectWorkPkg.ProjectWorkPkg_Due_Date > convert(date, getdate(), 103)) then 1 else 0 end when isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) >= 100 then case when (tProjectWorkPkg.ProjectWorkPkg_Due_Date <= convert(date, getdate(), 103)) then 1 else 0 end else null end, 
							Total_Issue = isnull(tIssue.Total_Issue, 0)
						from tbl_ProjectWork
						left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
						left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
						left join tbl_Division on Division_Id = ProjectWork_DivisionId
						left join tbl_Circle on Circle_Id = Division_CircleId
						left join tbl_Zone on Zone_Id = Circle_ZoneId
						left join 
						(
							select 
								row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
								ProjectWorkFinancialTarget_ProjectWork_Id, 
								ProjectWorkFinancialTarget_Target, 
								ProjectWorkPhysicalTarget_Target
							from tbl_ProjectWorkFinancialTarget
							where ProjectWorkFinancialTarget_Status = 1   
						) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
						left join 
						(
                            select 
	                            ProjectWorkPkg_Work_Id,
	                            tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                            tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                            ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                            ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                            ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                            ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                            from (
                            select 
                                ProjectWorkPkg_Work_Id,
                                tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                            ProjectWorkPkg_Due_Date,
                                ProjectWorkPkg_Start_Date, 
	                            ProjectWorkPkg_Agreement_Date, 
                                ProjectWorkPkg_ExtendDate, 
                                ProjectWorkPkg_Percent, 
	                            ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                            Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                            from tbl_ProjectWorkPkg 
                            left join 
                            (
	                            select 
		                            ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                            Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                            from tbl_Tender_Cost_Pkg_Wise_Automated
                            ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                            where ProjectWorkPkg_Status = 1	
                            ) tData
                            group by ProjectWorkPkg_Work_Id
						) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
						left join
						(
							select 
								count(ProjectWorkIssueDetails_Id) Total_Issue,
								ProjectWorkIssueDetails_WorkId 
							from tbl_ProjectWorkIssueDetails 
							where ProjectWorkIssueDetails_Status = 1 and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0
							group by ProjectWorkIssueDetails_WorkId
						) tIssue on tIssue.ProjectWorkIssueDetails_WorkId = ProjectWork_Id
						where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond NodalDepartmentScheme_IdCond Delay_OngoingCond FromDateCond TillDateCond FundingPattern_IdCond
					) tData ";

        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (Delay_Ongoing)
        {
            strQuery = strQuery.Replace("Delay_OngoingCond", " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 ");
        }
        else
        {
            strQuery = strQuery.Replace("Delay_OngoingCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", " and ProjectWork_NodalDeptScheme_Id in (" + NodalDepartmentScheme_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", "");
        }
        if (FundingPattern_Id != 0)
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", " and ProjectWork_NodalDeptScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ");
        }
        else
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }

        if (FromDate != "")
        {
            strQuery = strQuery.Replace("FromDateCond", " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ");
        }
        else
        {
            strQuery = strQuery.Replace("FromDateCond", " ");
        }
        if (TillDate != "")
        {
            strQuery = strQuery.Replace("TillDateCond", " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ");
        }
        else
        {
            strQuery = strQuery.Replace("TillDateCond", " ");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region One Pager Detailed
    public DataSet get_tbl_ProjectWork_One_Pager_Detailed(int ProjectWork_Id)
    {
        int Scheme_Id = 0;
        string strQuery = "";
        DataSet ds = new DataSet();
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        strQuery = "select ProjectWork_Project_Id from tbl_ProjectWork where ProjectWork_Id = " + ProjectWork_Id + "";
        ds = ExecuteSelectQuery(strQuery);
        if (AllClasses.CheckDataSet(ds))
        {
            Scheme_Id = Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
        }

        strQuery = @"set dateformat dmy; 
                    select 
                        tbl_ProjectWork.ProjectWork_Id, 
                        Jurisdiction_Name_Eng, 
                        Zone_Name, 
						Circle_Name, 
                        Division_Name, 
                        ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
						ProjectWork_Budget = convert(decimal(18, 3), (isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0))),
						Work_Cost = convert(decimal(18, 3), isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)), 
                        Tender_Cost_1 = isnull(tProjectWorkPkg.tender_cost_1, 0),
                        Tender_Cost = isnull(tProjectWorkPkg.tender_cost, 0),
	                    Instalment_1_state_central = isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0), 
	                    Instalment_2_state_central = isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0), 
	                    Instalment_3_state_central = isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0), 
	                    Instalment_state_central = isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0),
						ULB_Share = convert(decimal(18, 3), Funding.ULB_Share), 
                        ULB_Share_As_Per_TenderCost = convert(decimal(18, 2), (convert(decimal(18, 3), isnull(tProjectWorkPkg.tender_cost, 0)) * M_Jurisdiction.ULB_Share) / 100),
	                    ULB_Share_Received,
                        SNAAccountLimit_AssignedLimit = isnull(ProjectSNA_SNAAccountLimit_AssignedLimit, 0),
						SNAAccountLimitUsed_UsedLimit = isnull(ProjectSNA_SNAAccountLimitUsed_UsedLimit, 0),
						SNAAccountAvailableLimit = isnull(ProjectSNA_SNAAccountAvailableLimit, 0),
                        SNAAccountPipelineLimit = isnull(ProjectSNA_SNAAccountPipelineLimit, 0), 
                        SNAAccountPipelineLimitInvoice = isnull(ProjectSNA_SNAAccountPipelineLimitInvoice, 0),
                        SNAAccountPipelineLimitADP = isnull(ProjectSNA_SNAAccountPipelineLimitADP, 0),
                        SNAAccountPipelineLimitMA = isnull(ProjectSNA_SNAAccountPipelineLimitMA, 0),
                        SNAAccountPipelineLimitDR = isnull(ProjectSNA_SNAAccountPipelineLimitDR, 0),
                        Total_Expenditure_Till_August,
	                    Total_Expenditure_After_August,
	                    Total_Expenditure_Till_Date = isnull(Total_Expenditure_Till_Date, 0) + isnull(Expenditure_Bank, 0),
	                    Available_Amount_For_Limit_Allotment = convert(decimal(18, 2), case when (isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0)) > 0 then (((isnull(tProjectWorkPkg.tender_cost, 0) * (100 - M_Jurisdiction.ULB_Share)) / 100) + isnull(ULB_Share_Received, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) - (isnull(Total_Expenditure_Till_Date, 0) + isnull(Expenditure_Bank, 0))) else (isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0) + isnull(ULB_Share_Received, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) - (isnull(Total_Expenditure_Till_Date, 0) + isnull(Expenditure_Bank, 0))) end), 
                        ProjectWork_Project_Id, 
                        Project_Name, 
						Project_Name_C = Project_Name + ' / ' + ProjectWork_ProjectCode,
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
                        ProjectWork_GO_No,
                        Central_Share = convert(decimal(18, 3), Funding.Central_Share), 
						State_Share = convert(decimal(18, 3), Funding.State_Share), 
						Total_Share = convert(decimal(18, 3), isnull(Funding.Central_Share, 0)) + convert(decimal(18, 3), isnull(Funding.State_Share, 0)) + convert(decimal(18, 3), isnull(Funding.ULB_Share, 0)),
                        Work_Cost_A = Work_Cost,
						Centage = convert(decimal(18, 3), ProjectWork_Centage), 
						Total_Cost = convert(decimal(18, 3), isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0) + isnull(ProjectWork_Centage, 0)),
						tGO_Release.GO_CentralShare, 
						tGO_Release.GO_StateShare, 
						tGO_Release.GO_ULBShare, 
						tGO_Release.ProjectWorkGO_Centage,
                        Total_GO_Share = isnull(tGO_Release.GO_CentralShare, 0) + isnull(tGO_Release.GO_StateShare, 0) + isnull(tGO_Release.GO_ULBShare, 0) + isnull(tGO_Release.ProjectWorkGO_Centage, 0),
                        tGO_Release.Total_GO,
                        GO_Installment_1 = isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_Centage_1, 0),
                        tGO_ReleaseInstallment.GO_Path_1,
	                    GO_Installment_2 = isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_Centage_2, 0),
                        tGO_ReleaseInstallment.GO_Path_2,
	                    GO_Installment_3 = isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_Centage_3, 0),
                        tGO_ReleaseInstallment.GO_Path_3,
	                    GO_Installment_1_WithoutCentage = isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0),
                        GO_Installment_2_WithoutCentage = isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0),
                        GO_Installment_3_WithoutCentage = isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0),
	                    GO_Installment_WithoutCentage = isnull(tGO_ReleaseInstallment.GO_CentralShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_1, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_2, 0) + isnull(tGO_ReleaseInstallment.GO_CentralShare_3, 0) + isnull(tGO_ReleaseInstallment.GO_StateShare_3, 0), 
                        ProjectWork_Status, 
						ULB_Name, 
						ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
						Step_Count = isnull(Step_1, 0) + isnull(Step_2, 0) + isnull(Step_3, 0) + isnull(Step_4, 0) + isnull(Step_5, 0) + isnull(Step_6, 0) + isnull(Step_7, 0), 
						Total_Invoice = isnull(tInvoice.Total_Invoice, 0), 
						Total_Invoice_Value = convert(decimal(18, 3), isnull(tInvoice.Total_Invoice_Value, 0)), 
						Deffered_Value = convert(decimal(18, 3), isnull(tInvoice.Deffered_Value, 0)), 
						tPrevInvoice.Amount,
                        Total_Amount = convert(decimal(18, 3), isnull(tPrevInvoice.Amount, 0)) + convert(decimal(18, 3), isnull(tInvoice.Total_Invoice_Value, 0)),  
                        Payment_Done_Value = convert(decimal(18, 3), isnull(tPrevInvoice.Amount, 0)) + convert(decimal(18, 3), isnull(tInvoice.Payment_Done_Value, 0)), 
                        Total_Amount_ADP = convert(decimal(18, 3), isnull(tPrevInvoiceADP.Amount, 0)) + convert(decimal(18, 3), isnull(tADP.Total_Value_ADP, 0)), 
                        Payment_Done_Value_ADP = convert(decimal(18, 3), isnull(tPrevInvoiceADP.Amount, 0)) + convert(decimal(18, 3), isnull(tADP.Payment_Done_Value_ADP, 0)), 
                        FPCond
                        Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)),  
						SNAAccountAvailableLimitRs = convert(decimal(18, 0), isnull(ProjectSNA_SNAAccountAvailableLimit, 0) * 100000), 
						Exp_Per = convert(decimal(18, 0), case when isnull(ProjectSNA_SNAAccountLimit_AssignedLimit, 0) > 0 then (isnull(ProjectSNA_SNAAccountLimitUsed_UsedLimit, 0) * 100 / isnull(ProjectSNA_SNAAccountLimit_AssignedLimit, 0)) else 0 end), 
                        Total_Invoice_Count = isnull(ProjectSNA_Total_Invoice_Count, 0),
                        Total_Invoice_Count_INV = isnull(ProjectSNA_Invoice_Count, 0), 
	                    Total_Invoice_Count_ADP = isnull(ProjectSNA_ADP_Count, 0), 
	                    Total_Invoice_Count_MA = isnull(ProjectSNA_MA_Count, 0), 
	                    Total_Invoice_Count_DR = isnull(ProjectSNA_DR_Count, 0), 
						SNAAccountMaster.SNAAccountMaster_ACCT_NO, 
						SNAAccountMaster.SNAAccountMaster_Id, 
                        Bal_As_PNB = SNAAccountMaster.SNAAccountMaster_Balance,
						tEx.Person_Contact, 
                        FinancialTarget = isnull(tLimitNeeded.ProjectWorkFinancialTarget_TargetA, 0), 
                        Physical_Component = dbo.get_Physical_Component(tbl_ProjectWork.ProjectWork_Id, ProjectWork_Project_Id), 
                        ProjectWorkPkg_Start_Date = convert(char(10), ProjectWorkPkg_Agreement_Date, 103),
                        Target_Date_Agreement = convert(char(10), ProjectWorkPkg_Due_Date, 103),
                        Target_Date_Agreement_Extended = convert(char(10), ProjectWorkPkg_End_Date_Extended, 103), 
						Variation = case when isnull(tVariation.Total_Projects, 0) > 0 then 'Yes' else 'No' end, 
                        tClosure.HandoverDone, 
                        tClosure.FinancialClosureApplicable,                 
                        ProjectType_Name
                    from tbl_ProjectWork
                    LEFT JOIN tbl_ProjectWorkDataCompiled on ProjectWorkDataCompiled_WorkId = ProjectWork_Id 
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                    left join
                    (
                        select 
	                        ProjectWork_Account_Statement_WorkId, 
	                        Expenditure_Bank = sum(isnull(Batch_Amount, 0)) / 100000
                        from tbl_ProjectWork_Account_Statement 
                        where ProjectWork_Account_Statement_Status = 1 and Response_Status = 'Success' and Failure_Reason_Description = 'NA' and isnull(CBSTxnId, '') != '' DateCondition_Amrut_1
                        group by ProjectWork_Account_Statement_WorkId
                    ) tExp_Bank on tExp_Bank.ProjectWork_Account_Statement_WorkId = ProjectWork_Id
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_DivisionId order by Person_Id desc) rrP,
							PersonJuridiction_DivisionId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Designation_DesignationName, '') + ' - ' + isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (4, 9, 1056)
					) tEx on tEx.PersonJuridiction_DivisionId = ProjectWork_DivisionId and tEx.rrP = 1
                    left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join tbl_ProjectType on ProjectType_Id = ProjectWork_ProjectType_Id
					left join tbl_ProjectSNA on ProjectSNA_ProjectWork_Id = ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkFundingPattern_ProjectWorkId, 
							Central_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 1 then ProjectWorkFundingPattern_Value else 0 end), 
							State_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 2 then ProjectWorkFundingPattern_Value else 0 end), 
							ULB_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 3 then ProjectWorkFundingPattern_Value else 0 end) 
						from tbl_ProjectWorkFundingPattern 
						where ProjectWorkFundingPattern_Status = 1 
						group by ProjectWorkFundingPattern_ProjectWorkId
					) Funding on Funding.ProjectWorkFundingPattern_ProjectWorkId = ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
							count(ProjectWorkGO_Id) Total_GO, 
							GO_CentralShare  = sum(isnull(convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 0)), 
							GO_StateShare = sum(isnull(convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 0)), 
							GO_ULBShare = sum(isnull(convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 0)), 
							ProjectWorkGO_Centage = sum(isnull(convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 0)) 
						from tbl_ProjectWorkGO 
						where ProjectWorkGO_Status = 1 and isnull(ProjectWorkGO_EntryType, '') != '' 
						group by ProjectWorkGO_Work_Id
					) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = ProjectWork_Id
                    left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare_1 = max(case when rrGO = 1 then GO_CentralShare else null end),
		                    GO_StateShare_1 = max(case when rrGO = 1 then GO_StateShare else null end),
		                    GO_No_Date_1 = max(case when rrGO = 1 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
		                    GO_Centage_1 = max(case when rrGO = 1 then ProjectWorkGO_Centage else null end),
		                    GO_Path_1 = max(case when rrGO = 1 then ProjectWorkGO_Document_Path else null end),
		                    GO_CentralShare_2 = max(case when rrGO = 2 then GO_CentralShare else null end),
		                    GO_StateShare_2 = max(case when rrGO = 2 then GO_StateShare else null end),
		                    GO_No_Date_2 = max(case when rrGO = 2 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
		                    GO_Centage_2 = max(case when rrGO = 2 then ProjectWorkGO_Centage else null end),
                            GO_Path_2 = max(case when rrGO = 2 then ProjectWorkGO_Document_Path else null end),		                    
                            GO_CentralShare_3 = max(case when rrGO = 3 then GO_CentralShare else null end),
		                    GO_StateShare_3 = max(case when rrGO = 3 then GO_StateShare else null end),
		                    GO_No_Date_3 = max(case when rrGO = 3 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
		                    GO_Centage_3 = max(case when rrGO = 3 then ProjectWorkGO_Centage else null end), 
                            GO_Path_3 = max(case when rrGO = 3 then ProjectWorkGO_Document_Path else null end),	
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
                                ProjectWorkGO_Document_Path
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_ReleaseInstallment on tGO_ReleaseInstallment.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000, 
							Payment_Done_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000, 
							Deffered_Value_ADP = sum(case when (isnull(PackageADPApproval_Next_Designation_Id, 0) = 0 and isnull(PackageADPApproval_Next_Organisation_Id, 0) = 0 and  PackageADPApproval_Status_Id not in (1, 6)) then isnull(Package_ADP_ADPTotalAmount, 0) else 0 end) / 100000, 
							Payment_Done_Value_ADP = sum(case when (isnull(PackageADPApproval_Next_Designation_Id, 0) = 0 and isnull(PackageADPApproval_Next_Organisation_Id, 0) = 0 and  PackageADPApproval_Status_Id in (1, 6)) then isnull(Package_ADP_ADPTotalAmount, 0) else 0 end) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
					left join 
					(
						select 
							ROW_NUMBER() over (partition by SNAAccountMaster_ProjectWotk_Id order by SNAAccountMaster_Id desc) rrSNAcc,
							SNAAccountMaster_Id,
							SNAAccountMaster_ProjectWotk_Id,
							SNAAccountMaster_ACCT_NO, 
                            SNAAccountMaster_Balance = convert(decimal(18, 2), isnull(SNAAccountMaster_Balance, 0) / 100000)
						from tbl_SNAAccountMaster
						where SNAAccountMaster_Status = 1
					) SNAAccountMaster on SNAAccountMaster_ProjectWotk_Id = ProjectWork_Id and rrSNAcc = 1
                    left join
                    (
	                    select 
		                    row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrV,
		                    ProjectWorkFinancialTarget_TargetA, 
		                    ProjectWorkFinancialTarget_ProjectWork_Id
	                    from tbl_ProjectWorkFinancialTarget
	                    where ProjectWorkFinancialTarget_Status = 1 and isnull(ProjectWorkFinancialTarget_TargetA, 0) > 0 
                    ) tLimitNeeded on tLimitNeeded.ProjectWorkFinancialTarget_ProjectWork_Id = ProjectWork_Id and tLimitNeeded.rrV = 1
                    left join
					(
						select 
							ProjectWorkPkg_Work_Id,
							count(*) Total_Projects
						from tbl_Package_ExtraItem
						join tbl_ProjectWorkPkg on Package_ExtraItem_ProjectWorkPkg_Id = ProjectWorkPkg_Id
						join tbl_ProjectWork on ProjectWork_Id = ProjectWorkPkg_Work_Id
						left join tbl_Division on Division_Id = ProjectWork_DivisionId
						left join tbl_Circle on Circle_Id = Division_CircleId
						left join tbl_Zone on Zone_Id = Circle_ZoneId
						where Package_ExtraItem_Status = 1 and ProjectWork_Status = 1
						group by ProjectWorkPkg_Work_Id
					) tVariation on tVariation.ProjectWorkPkg_Work_Id = ProjectWork_Id
					left join
					(
						select 
	                        ProjectClosure_Id,
                            ProjectClosure_Work_Id,
                            PhysicalClosureApplicable = case when ProjectClosure_ClosureApplicable = 'Y' then 'Yes' else 'No' end,
                            HandoverNoteSend = case when ProjectClosure_HandoverNoteSend = 'Y' then 'Yes' else 'No' end,
                            ProjectClosure_HandoverNote_No_TentitiveDate = case when convert(char(10), ProjectClosure_HandoverNote_No_TentitiveDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_HandoverNote_No_TentitiveDate, 103) end,
                            ProjectClosure_HandoverNote_No_Comments,
                            ProjectClosure_HandoverNote_Yes_LetterNo,
                            ProjectClosure_HandoverNote_Yes_LetterDate = case when convert(char(10), ProjectClosure_HandoverNote_Yes_LetterDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_HandoverNote_Yes_LetterDate, 103) end,
                            ProjectClosure_HandoverNote_Yes_LetterPath,
                            ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod = case when convert(char(10), ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) end,
                            HandoverDone = case when ProjectClosure_HandoverDone = 'Y' then 'Yes' else 'No' end,
                            ProjectClosure_HandoverDone_Yes_LetterNo,
                            ProjectClosure_HandoverDone_Yes_LetterDate = case when convert(char(10), ProjectClosure_HandoverDone_Yes_LetterDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_HandoverDone_Yes_LetterDate, 103) end,
                            ProjectClosure_HandoverDone_Yes_LetterPath,
                            ProjectClosure_HandoverDone_No_TentitiveDate = case when convert(char(10), ProjectClosure_HandoverDone_No_TentitiveDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_HandoverDone_No_TentitiveDate, 103) end,
                            ProjectClosure_HandoverDone_No_Comments,
                            FinancialClosureApplicable = case when ProjectClosure_FinancialClosureApplicable = 'Y' then 'Yes' else 'No' end,
                            ProjectClosure_FinancialClosureApplicable_Yes_LetterNo,
                            ProjectClosure_FinancialClosureApplicable_Yes_LetterDate = case when convert(char(10), ProjectClosure_FinancialClosureApplicable_Yes_LetterDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_FinancialClosureApplicable_Yes_LetterDate, 103) end,
                            ProjectClosure_FinancialClosureApplicable_Yes_LetterPath,
                            ProjectClosure_FinancialClosureApplicable_No_TentitiveDate = case when convert(char(10), ProjectClosure_FinancialClosureApplicable_No_TentitiveDate, 103) = '01/01/1900' then '' else convert(char(10), ProjectClosure_FinancialClosureApplicable_No_TentitiveDate, 103) end,
                            ProjectClosure_FinancialClosureApplicable_No_Comments, 
                            Under_Defect_Libelity_Period = case when datediff(DD, (case when convert(char(10), ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) = '01/01/1900' then null else convert(date, ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) end), getdate()) <= 0 then 1 else 0 end, 
                            Is_FCP = case when (case when datediff(DD, (case when convert(char(10), ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) = '01/01/1900' then null else convert(date, ProjectClosure_HandoverDone_Yes_DefectLibelityPeriod, 103) end), getdate()) <= 0 then 1 else 0 end) = 1 and isnull(ProjectClosure_FinancialClosureApplicable, '') != 'Y' then 1 else 0 end
                        from tbl_ProjectClosure
                        where ProjectClosure_Status = 1
					) tClosure on tClosure.ProjectClosure_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 and ProjectWork_Id = " + ProjectWork_Id + "";
        strQuery = strQuery.Replace("FPCond", FP);
        strQuery += Environment.NewLine;

        strQuery += @"select 
                        FundingPattern_Id,
                        FundingPattern_Name,
					    ProjectWorkFundingPattern_Percentage,
					    ProjectWorkFundingPattern_Value 
					from tbl_FundingPattern 
					join tbl_ProjectWorkFundingPattern on FundingPattern_Id = ProjectWorkFundingPattern_FundingPatternId and ProjectWorkFundingPattern_ProjectWorkId = '" + ProjectWork_Id + "' and ProjectWorkFundingPattern_Status = 1 where FundingPattern_Status = 1 order by FundingPattern_Id ";

        strQuery += Environment.NewLine;

        strQuery += @" select 
                            PhysicalProgressComponent_Id,
                            PhysicalProgressComponent_Component,
                            Unit_Name,
                            ProjectPkg_PhysicalProgress_Id=isnull(ProjectPkg_PhysicalProgress_Id,0), 
                            ProjectPkg_PhysicalProgress_MasterValue, 
                            ProjectPkg_PhysicalProgress_MasterValueF, 
                            PhysicalProgressComponent_EnableList, 
                            UC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgress,
                            UC_PhysicalProgress.ProjectUC_PhysicalProgress_WithheldProgress,
                            UC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalFunctional,
                            UC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalNonFunctional,
                            UC_PhysicalProgress.ProjectUC_PhysicalProgress_Remarks
                        from tbl_PhysicalProgressComponent
                        left join tbl_Unit on Unit_Id = PhysicalProgressComponent_Unit_Id
                        join tbl_ProjectPkg_PhysicalProgress on ProjectPkg_PhysicalProgress_PhysicalProgressComponent_Id = PhysicalProgressComponent_Id and ProjectPkg_PhysicalProgress_PrjectWork_Id = '" + ProjectWork_Id + "'  and ProjectPkg_PhysicalProgress_Status = 1 left join (select ROW_NUMBER() over (partition by ProjectUC_PhysicalProgress_PhysicalProgressComponent_Id order by ProjectUC_PhysicalProgress_Id desc) rrr, ProjectUC_PhysicalProgress_Id, ProjectUC_PhysicalProgress_ProjectWork_Id, ProjectUC_PhysicalProgress_PhysicalProgressComponent_Id, ProjectUC_PhysicalProgress_PhysicalProgress, ProjectUC_PhysicalProgress_WithheldProgress, ProjectUC_PhysicalProgress_PhysicalFunctional, ProjectUC_PhysicalProgress_PhysicalNonFunctional, ProjectUC_PhysicalProgress_Remarks from tbl_ProjectUC_PhysicalProgress where ProjectUC_PhysicalProgress_ProjectWork_Id = '" + ProjectWork_Id + "' and ProjectUC_PhysicalProgress_Status = 1) UC_PhysicalProgress on UC_PhysicalProgress.ProjectUC_PhysicalProgress_PhysicalProgressComponent_Id = PhysicalProgressComponent_Id and rrr = 1 where PhysicalProgressComponent_Status = 1 and PhysicalProgressComponent_ProjectId = '" + Scheme_Id + "' ";

        strQuery += Environment.NewLine;

        strQuery += @"select
                            ProjectWorkIssueDetails_Id = isnull(ProjectWorkIssueDetails_Id,0),
    	                    ProjectWorkIssueDetails_Issue_Id = isnull(ProjectWorkIssueDetails_Issue_Id,0),
    	                    ProjectWorkIssueDetails_Dependency_Id = isnull(ProjectWorkIssueDetails_Dependency_Id,0),
    						ULB_Name,
                            ProjectWork_ProjectCode,
                            ProjectIssue_Name = REPLACE(REPLACE(ProjectIssue_Name, CHAR(13),''), CHAR(10),''),
    						Dependency_Name,
    						ProjectWork_Project_Id, 
    	                    Project_Name, 
    	                    ProjectWork_ProjectCode, 
    	                    ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
    	                    Jurisdiction_Name_Eng, 
    	                    Division_Name, 
    	                    Circle_Name, 
    	                    Zone_Name,
    	                    ProjectWorkIssueDetails_Date = convert(char(10), ProjectWorkIssueDetails_AddedOn, 103),
    	                    ProjectWorkIssueDetails_Comments = REPLACE(REPLACE(ProjectWorkIssueDetails_Comments, CHAR(13),''), CHAR(10),''),
                            ProjectWorkIssueDetails_Path,
                            ProjectWorkIssueDetails_Category,
    	                    ProjectWorkIssueDetails_WorkId, 
                            ProjectWorkIssueDetails_DateResolved = convert(char(10), ProjectWorkIssueDetails_DateResolved, 103)
                        from tbl_ProjectWorkIssueDetails
    					left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id 
    					left join tbl_ProjectWork on ProjectWork_Id=ProjectWorkIssueDetails_WorkId 
    					left join tbl_Dependency  on Dependency_Id= ProjectWorkIssueDetails_Dependency_Id 
    					left join tbl_Project on Project_Id = ProjectWork_Project_Id
                        left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
                        left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
                        left join tbl_Division on Division_Id = ProjectWork_DivisionId
                        left join tbl_Circle on Circle_Id = Division_CircleId
                        left join tbl_Zone on Zone_Id = Circle_ZoneId
    					where ProjectWork_Status = 1 and ProjectWorkIssueDetails_Status = 1 and ProjectWork_Id = " + ProjectWork_Id + "";
        if (Scheme_Id == 1013)
        {
            strQuery = strQuery.Replace("DateCondition_Amrut_1", " and convert(date, dateadd(DD, -10, convert(date, Expiry_Date, 103)), 103) > convert(date, '31/05/2023', 103) ");
        }
        else
        {
            strQuery = strQuery.Replace("DateCondition_Amrut_1", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Issue Analysis CNDS
    public DataSet get_PMIS_Dashboard_Issue_CNDS(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, string NodalDepartmentScheme_Id, bool Issue_Ongoing, bool Remove_Internal_Issue, string FromDate, string TillDate, int FundingPattern_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectWorkIssueDetails_Issue_Id,
	                    ProjectIssue_Name,
	                    Total_Projects_With_Issue = count(distinct ProjectWorkIssueDetails_WorkId),
	                    count(*) Total_Isues
                    from tbl_ProjectWorkIssueDetails 
                    join tbl_ProjectWork on ProjectWork_Id = ProjectWorkIssueDetails_WorkId
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join tbl_PersonDetail on Person_Id = ProjectWork_NodalDepartment_Id
                    left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id
                    left join 
					(
						select 
							row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkPhysicalTarget_Target desc, ProjectWorkFinancialTarget_Id desc) rrT,
							* 
						from (
						select 
							row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id, ProjectWorkPhysicalTarget_Target order by ProjectWorkPhysicalTarget_Target, ProjectWorkFinancialTarget_Id) rrV,
							ProjectWorkFinancialTarget_Id,
							ProjectWorkFinancialTarget_ProjectWork_Id, 
							ProjectWorkFinancialTarget_Target, 
							ProjectWorkPhysicalTarget_Target, 
							ProjectWorkFinancialTarget_Month,
							ProjectWorkFinancialTarget_Year,
							ProjectWorkFinancialTarget_AddedOn,
							ProjectWorkFinancialTarget_TargetMonth
						from tbl_ProjectWorkFinancialTarget
						where ProjectWorkFinancialTarget_Status = 1 
						) tData where tData.rrV = 1
					) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and tTarget.rrT = 1
                    where ProjectWorkIssueDetails_Status = 1 and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0 and ProjectWork_Status = 1 Jurisdiction_InCond Issue_OngoingCond Remove_Internal_IssueCond ";
        if (Remove_Internal_Issue)
        {
            strQuery = strQuery.Replace("Remove_Internal_IssueCond", " and isnull(ProjectWorkIssueDetails_Issue_Id, 0) not in (7, 8) ");
        }
        else
        {
            strQuery = strQuery.Replace("Remove_Internal_IssueCond", "");
        }
        if (Issue_Ongoing)
        {
            strQuery = strQuery.Replace("Issue_OngoingCond", " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 ");
        }
        else
        {
            strQuery = strQuery.Replace("Issue_OngoingCond", "");
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectCode != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (NodalDept_Id != "")
        {
            strQuery += " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")";
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery += " and ProjectWork_NodalDeptScheme_Id in (" + NodalDepartmentScheme_Id + ")";
        }
        if (FundingPattern_Id != 0)
        {
            strQuery += " and ProjectWork_NodalDeptScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ")";
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery += " and ProjectWork_ProjectType_Id = '" + Type_Id + "'";
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        strQuery += Environment.NewLine;
        strQuery += @"group by ProjectWorkIssueDetails_Issue_Id, ProjectIssue_Name
                    order by count(*) desc, ProjectIssue_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master NodalDeptScheme
    public DataSet get_tbl_NodalDeptScheme(int NodalDept_Id, int Scheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        NodalDeptScheme_Id, 
                        NodalDeptScheme_NodalDept_Id, 
                        NodalDeptScheme_FundingPattern_Id,
                        Person_Name, 
                        FundingPattern_Name,
                        NodalDeptScheme_Name, 
                        NodalDeptScheme_AddedOn, 
                        NodalDeptScheme_AddedBy, 
                        NodalDeptScheme_ModifiedOn, 
                        NodalDeptScheme_ModifiedBy, 
                        NodalDeptScheme_Status 
                    from tbl_NodalDeptScheme
                    join tbl_PersonDetail on Person_Id = NodalDeptScheme_NodalDept_Id
                    left join tbl_FundingPattern on FundingPattern_Id = NodalDeptScheme_FundingPattern_Id
                    where NodalDeptScheme_Status = 1";
        if (NodalDept_Id != 0)
        {
            strQuery += " and NodalDeptScheme_NodalDept_Id = '" + NodalDept_Id + "'";
        }
        if (Scheme_Id != 0)
        {
            strQuery += " and NodalDeptScheme_FundingPattern_Id = '" + Scheme_Id + "'";
        }
        strQuery += " order by Person_Name, NodalDeptScheme_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_NodalDeptScheme(string NodalDept_Id_In, int Scheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @" set dateformat dmy; 
                    select 
                        NodalDeptScheme_Id, 
                        NodalDeptScheme_NodalDept_Id, 
                        NodalDeptScheme_FundingPattern_Id,
                        Person_Name, 
                        FundingPattern_Name, 
                        NodalDeptScheme_Name, 
                        NodalDeptScheme_AddedOn, 
                        NodalDeptScheme_AddedBy, 
                        NodalDeptScheme_ModifiedOn, 
                        NodalDeptScheme_ModifiedBy, 
                        NodalDeptScheme_Status 
                    from tbl_NodalDeptScheme
                    join tbl_PersonDetail on Person_Id = NodalDeptScheme_NodalDept_Id
                    left join tbl_FundingPattern on FundingPattern_Id = NodalDeptScheme_FundingPattern_Id
                    where NodalDeptScheme_Status = 1";
        if (NodalDept_Id_In != "0" || NodalDept_Id_In != "")
        {
            strQuery += " and NodalDeptScheme_NodalDept_Id in (" + NodalDept_Id_In + ") ";
        }
        if (Scheme_Id != 0)
        {
            strQuery += " and NodalDeptScheme_FundingPattern_Id = '" + Scheme_Id + "'";
        }
        strQuery += " order by NodalDeptScheme_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_NodalDeptScheme(tbl_NodalDeptScheme obj_tbl_NodalDeptScheme, int NodalDeptScheme_Id, ref string Msg)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                if (AllClasses.CheckDataSet(CheckDuplicacyNodalDeptScheme(obj_tbl_NodalDeptScheme.NodalDeptScheme_Name, NodalDeptScheme_Id.ToString(), trans, cn)))
                {
                    Msg = "A";
                    trans.Commit();
                    cn.Close();
                    return false;
                }
                if (NodalDeptScheme_Id == 0)
                {
                    Insert_tbl_NodalDeptScheme(obj_tbl_NodalDeptScheme, trans, cn);
                }
                else
                {
                    obj_tbl_NodalDeptScheme.NodalDeptScheme_Id = NodalDeptScheme_Id;
                    Update_tbl_NodalDeptScheme(obj_tbl_NodalDeptScheme, trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private DataSet CheckDuplicacyNodalDeptScheme(string NodalDeptScheme_Name, string NodalDeptSchemeId, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = " set dateformat dmy; Select  * from tbl_NodalDeptScheme  where NodalDeptScheme_Status=1 and  NodalDeptScheme_Name= '" + NodalDeptScheme_Name + "' ";
        if (NodalDeptSchemeId != "0")
        {
            strQuery += " AND NodalDeptScheme_Id <> '" + NodalDeptSchemeId + "'";
        }
        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return ds;
    }

    private int Insert_tbl_NodalDeptScheme(tbl_NodalDeptScheme obj_tbl_Post, SqlTransaction trans, SqlConnection cn)
    {
        DataSet ds = new DataSet();
        string strQuery = "";
        strQuery = " set dateformat dmy; insert into tbl_NodalDeptScheme (NodalDeptScheme_Name, NodalDeptScheme_NodalDept_Id, NodalDeptScheme_AddedBy, NodalDeptScheme_AddedOn, NodalDeptScheme_Status, NodalDeptScheme_FundingPattern_Id) values ('" + obj_tbl_Post.NodalDeptScheme_Name + "', '" + obj_tbl_Post.NodalDeptScheme_NodalDept_Id + "', '" + obj_tbl_Post.NodalDeptScheme_AddedBy + "',getdate(),'" + obj_tbl_Post.NodalDeptScheme_Status + "', '" + obj_tbl_Post.NodalDeptScheme_FundingPattern_Id + "');Select @@Identity";

        if (trans == null)
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        else
        {
            ds = ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
        return Convert.ToInt32(ds.Tables[0].Rows[0][0].ToString());
    }

    private void Update_tbl_NodalDeptScheme(tbl_NodalDeptScheme obj_tbl_Post, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_NodalDeptScheme set   NodalDeptScheme_Name = '" + obj_tbl_Post.NodalDeptScheme_Name + "', NodalDeptScheme_NodalDept_Id = '" + obj_tbl_Post.NodalDeptScheme_NodalDept_Id + "', NodalDeptScheme_FundingPattern_Id = '" + obj_tbl_Post.NodalDeptScheme_FundingPattern_Id + "' where NodalDeptScheme_Id = '" + obj_tbl_Post.NodalDeptScheme_Id + "' ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    public bool Delete_tbl_NodalDeptScheme(int NodalDeptScheme_Id, int person_Id)
    {
        try
        {
            string strQuery = "";
            strQuery = " set dateformat dmy; Update  tbl_NodalDeptScheme set   NodalDeptScheme_Status = 0, NodalDeptScheme_ModifiedBy = '" + person_Id + "', NodalDeptScheme_ModifiedOn = getdate() where NodalDeptScheme_Id = '" + NodalDeptScheme_Id + "' ";
            ExecuteSelectQuery(strQuery);
            return true;
        }
        catch
        {
            return false;
        }
    }
    #endregion

    #region PMS Scheme Wise Dashboard
    public DataSet get_PMIS_Dashboard_PMS_Scheme_Wise(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, int Updation, string ProgressType, string FromDate, string TillDate)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        string Client = ConfigurationManager.AppSettings.Get("Client");
        strQuery = @"set dateformat dmy; 
                    select 
                        Project_Name,
						Project_Id,

	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join tbl_Project on ProjectWork_Project_Id = Project_Id
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond ";
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        if (ProgressType == "Physical")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) = 0 ";
                }
                else if (Updation == 1)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 10 ";
                }
                else if (Updation == 2)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 10 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 20 ";
                }
                else if (Updation == 3)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 20 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 30 ";
                }
                else if (Updation == 4)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 30 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 40 ";
                }
                else if (Updation == 5)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 40 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 6)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 60 ";
                }
                else if (Updation == 7)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 60 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 70 ";
                }
                else if (Updation == 8)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 70 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 80 ";
                }
                else if (Updation == 9)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 80 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 90 ";
                }
                else if (Updation == 10)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 90 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 25)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 25 ";
                }
                else if (Updation == 50)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 25 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 75)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 75 ";
                }
                else if (Updation == 99)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 75 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 11)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) >= 100 ";
                }
            }
        }
        if (ProgressType == "Financial")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                }
                else if (Updation == 1)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                }
                else if (Updation == 2)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                }
                else if (Updation == 3)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                }
                else if (Updation == 4)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                }
                else if (Updation == 5)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 6)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                }
                else if (Updation == 7)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                }
                else if (Updation == 8)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                }
                else if (Updation == 9)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                }
                else if (Updation == 10)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
                else if (Updation == 11)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                }

                else if (Updation == 25)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                }
                else if (Updation == 50)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 75)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                }
                else if (Updation == 99)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
            }
        }
        strQuery += "   group by Project_Name, Project_Id";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_PMIS_Dashboard_Detailed(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string NodalDept_Id, int Jurisdiction_In, string FromDate, string TillDate, int Person_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
                        ROW_NUMBER() over (order by Project_Name, Project_Id) SrNo,

                        Project_Id, 
                        Project_Name, 
                        Project_Icon_Path, 

	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

                        Completed_Per = convert(decimal(18, 0), (sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end)) * 100 / count(*)),

                        Ongoing_Per = convert(decimal(18, 0), (sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end)) * 100 / count(*)),

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join tbl_Project on ProjectWork_Project_Id = Project_Id
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where Project_Status = 1 and ProjectWork_Status = 1 Project_IdCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Jurisdiction_InCond ";
        if (Person_Id > 0)
        {
            strQuery += @" and Project_Id in (select distinct PersonDetail_Scheme_Project_Id from tbl_PersonDetail_Scheme where PersonDetail_Scheme_Status = 1 and PersonDetail_Scheme_Person_Id = '" + Person_Id + "')";
        }
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }

        if (Division_Id > 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", "and (ProjectWork_DivisionId in (" + Division_Id + ") or ProjectWork_Id in (select ProjectWorkPkg_Work_Id from tbl_ProjectAdditionalArea join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = ProjectAdditionalArea_ProjectWorkPkg_Id and ProjectWorkPkg_Status = 1 where ProjectAdditionalArea_Status = 1 and ProjectAdditionalArea_DevisionId = '" + Division_Id + "'))");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (Circle_Id > 0 && Division_Id == 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", "and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Zone_Id > 0 && Division_Id == 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", "and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }

        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        strQuery += " group by Project_Id, Project_Name, Project_Icon_Path order by Project_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_PMIS_Dashboard_Zone_Wise_Detailed(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string NodalDept_Id, int Jurisdiction_In)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Id, 
                        Zone_Name, 

	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join tbl_Project on ProjectWork_Project_Id = Project_Id
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 Project_IdCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Jurisdiction_InCond ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        strQuery += " group by Zone_Id, Zone_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_PMIS_Dashboard_Circle_Wise_Detailed(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string NodalDept_Id, int Jurisdiction_In)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Id, 
                        Zone_Name, 

                        Circle_Id, 
                        Circle_Name, 

	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join tbl_Project on ProjectWork_Project_Id = Project_Id
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 Project_IdCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Jurisdiction_InCond ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        strQuery += " group by Zone_Id, Zone_Name, Circle_Id, Circle_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_PMIS_Dashboard_Division_Wise_Detailed(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string NodalDept_Id, int Jurisdiction_In)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Id, 
                        Zone_Name, 

                        Circle_Id, 
                        Circle_Name, 

                        Division_Id, 
                        Division_Name, 

	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
                    left join tbl_Project on ProjectWork_Project_Id = Project_Id
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 Project_IdCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Jurisdiction_InCond ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        strQuery += " group by Zone_Id, Zone_Name, Circle_Id, Circle_Name, Division_Id, Division_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Financial Year Wise Data
    public DataSet get_PMIS_Dashboard_FinancialYearWise(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, string FromDate, string TillDate)
    {
        string strQuery = "";
        DataSet ds = new DataSet();

        strQuery = @"set dateformat dmy; 
                    select 
						FinancialYear_Id = 0, 
						FinancialYear_Order = 0,
						FinancialYear_Comments = 'Before 2019-2020',
	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
					left join tbl_FinancialYear on FinancialYear_Id = (select FinancialYear_Id from tbl_FinancialYear where ProjectWork_GO_Date between FinancialYear_StartYear and FinancialYear_EndYear)
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 and FinancialYear_Order <= 14 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond

					union all

                    select 
						FinancialYear_Id, 
						FinancialYear_Order,
						FinancialYear_Comments,
	                    Total_Count = count(*), 
	                    Completed_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then 1 else 0 end),
	                    OnGoing_Count = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then 1 else 0 end), 

						Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
	                    Completed_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end),
	                    OnGoing_Sanction = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end), 

						Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
	                    Completed_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end),
	                    OnGoing_Tender = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(tProjectWorkPkg.tender_cost, 0) else 0 end), 

						Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
	                    Completed_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end),
	                    OnGoing_Release = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 

						Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
	                    Completed_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end),
	                    OnGoing_Expenditure = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) else 0 end), 

						Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0)), 
						Completed_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end), 
						OnGoing_Remaining_Amount = sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then isnull(ProjectWork_Budget, 0) else 0 end) - sum(case when convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 then (isnull(tGO_Release.GO_Total, 0)) else 0 end)
                    from tbl_ProjectWork
					left join tbl_FinancialYear on FinancialYear_Id = (select FinancialYear_Id from tbl_FinancialYear where ProjectWork_GO_Date between FinancialYear_StartYear and FinancialYear_EndYear)
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    where ProjectWork_Status = 1 and FinancialYear_Order > 14 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond
					group by FinancialYear_Id, FinancialYear_Comments, FinancialYear_Order
					order by FinancialYear_Order ";
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Data Updation Analysis
    public DataSet get_Data_Updation_Status(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)) ";
        }
        else
        {
            FP = "convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)) ";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectWork_DivisionId,
	                    Circle_Name,
	                    Division_Name,
	                    Total_Projects = count(*),
	                    Total_Login = max(tLogin.Total_Login),
	                    First_Login = max(tLogin.First_Login),
	                    Last_Login = max(tLogin.Last_Login),

	                    Release_More_Than_Sanction = sum(case when isnull(ProjectWork_Budget_R, 0) > 0 then (case when (isnull(tGO_Release.GO_Total, 0)) > isnull(ProjectWork_Budget_R, 0) then 1 else 0 end) else (case when (isnull(tGO_Release.GO_Total, 0)) > isnull(ProjectWork_Budget, 0) then 1 else 0 end) end), 

	                    Expenditure_More_Than_Sanction = sum(case when isnull(ProjectWork_Budget_R, 0) > 0 then (case when (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) > isnull(ProjectWork_Budget_R, 0) then 1 else 0 end) else (case when (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) > isnull(ProjectWork_Budget, 0) then 1 else 0 end) end), 

	                    Expenditure_More_Than_Release = sum(case when (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) > (isnull(tGO_Release.GO_Total, 0)) then 1 else 0 end), 

                        FP_More_100 = sum(case when (FPCond) > 100 then 1 else 0 end),

                        Diff_Physical_Financial_More = sum(case when ((isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) - (FPCond)) > 20 then 1 else 0 end),

	                    Agreement_Date_Less_Than_Start_Date = sum(case when DATEDIFF(DD, convert(date, Agreement_Date, 103), convert(date, Start_Date, 103)) < 0 then 1 else 0 end),
	                    Due_Date_Less_Than_Start_Date = sum(case when DATEDIFF(DD, convert(date, Agreement_Date, 103), convert(date, Due_Date, 103)) < 0 then 1 else 0 end),
	                    Due_Date_Less_Than_Agreement_Date = sum(case when DATEDIFF(DD, convert(date, Due_Date, 103), convert(date, Due_Date_Extended, 103)) < 0 then 1 else 0 end),

                        Agreement_Date_Invalid = sum(case when convert(char(10), convert(date, Agreement_Date, 103), 103) = '01/01/1900' then 1 else 0 end),

						Start_Date_Invalid = sum(case when convert(char(10), convert(date, Start_Date, 103), 103) = '01/01/1900' then 1 else 0 end),

						Due_Date_Invalid = sum(case when convert(char(10), convert(date, Due_Date, 103), 103) = '01/01/1900' then 1 else 0 end)

                    from tbl_ProjectWork
                    left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                    left join 
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id,
		                    Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
		                    Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
		                    Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103),
		                    Due_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103) 
	                    from 
	                    (
		                    select 
			                    ProjectWorkPkg_Work_Id,
			                    ProjectWorkPkg_AgreementAmount = case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end, 
			                    ProjectWorkPkg_Due_Date,
			                    ProjectWorkPkg_Start_Date,
			                    ProjectWorkPkg_Agreement_Date, 
			                    ProjectWorkPkg_ExtendDate, 
			                    ProjectWorkPkg_Percent
		                    from tbl_ProjectWorkPkg 
		                    where 	ProjectWorkPkg_Status=1	
	                    ) tData
	                    group by ProjectWorkPkg_Work_Id
                    )tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id, 
		                    Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
		                    GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
	                    from tbl_PackageInvoice
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
	                    where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id,
		                    Total_Invoice = count(*), 
		                    Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
		                    Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
	                    from tbl_PackageInvoice 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    join 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
			                    PackageInvoiceApproval_Next_Designation_Id,
			                    PackageInvoiceApproval_Next_Organisation_Id,
			                    PackageInvoiceApproval_Comments,
			                    PackageInvoiceApproval_AddedBy,
			                    PackageInvoiceApproval_AddedOn,
			                    PackageInvoiceApproval_Status_Id,
			                    PackageInvoiceApproval_Package_Id,
			                    PackageInvoiceApproval_PackageInvoice_Id,
			                    InvoiceStatus_Name,
			                    PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
			                    PackageInvoiceApproval_Id
		                    from tbl_PackageInvoiceApproval
		                    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
		                    where PackageInvoiceApproval_Status = 1
	                    ) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
	                    where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
	                    group by ProjectWorkPkg_Work_Id
                    ) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id,
		                    Total_Invoice_ADP = count(*), 
		                    Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
	                    from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    join 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
			                    PackageADPApproval_Next_Designation_Id,
			                    PackageADPApproval_Next_Organisation_Id,
			                    PackageADPApproval_Comments,
			                    PackageADPApproval_AddedBy,
			                    PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
			                    PackageADPApproval_Status_Id,
			                    PackageADPApproval_Package_Id,
			                    PackageADPApproval_Package_ADP_Id,
			                    InvoiceStatus_Name,
			                    PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
			                    PackageADPApproval_Id
		                    from tbl_PackageADPApproval
		                    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
		                    where PackageADPApproval_Status = 1
	                    ) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
	                    where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
	                    group by ProjectWorkPkg_Work_Id
                    ) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    left join 
                    (
	                    select 
		                    Division_Id_Login = Division_Id,
		                    COUNT(*) Total_Login, 
		                    convert(char(10), MIN(LoginHistory_LoggedInTime), 103) First_Login,
		                    convert(char(10), max(LoginHistory_LoggedInTime), 103) Last_Login
	                    from tbl_LoginHistory
	                    join tbl_PersonDetail on Person_Id = LoginHistory_PersonId
	                    join tbl_PersonJuridiction on PersonJuridiction_PersonId = LoginHistory_PersonId
	                    left join tbl_Division on PersonJuridiction_DivisionId = Division_Id
	                    left join tbl_Circle on Circle_Id = PersonJuridiction_CircleId
	                    left join tbl_Zone on Zone_Id = PersonJuridiction_ZoneId
	                    join 
	                    (
		                    select 
			                    distinct ProjectWork_DivisionId
		                    from tbl_ProjectWork 
		                    where ProjectWork_Status = 1 
	                    ) tUnit on tUnit.ProjectWork_DivisionId = Division_Id
	                    where CONVERT(date, convert(char(10), LoginHistory_LoggedInTime, 103), 103) >= CONVERT(date, '15/08/2023', 103) 
	                    group by Division_Id
                    ) tLogin on tLogin.Division_Id_Login = Division_Id
                    where ProjectWork_Status = 1  ";
        strQuery = strQuery.Replace("FPCond", FP);
        if (Division_Id > 0)
        {
            strQuery += " and (ProjectWork_DivisionId in (" + Division_Id + ") or ProjectWork_Id in (select ProjectWorkPkg_Work_Id from tbl_ProjectAdditionalArea join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = ProjectAdditionalArea_ProjectWorkPkg_Id and ProjectWorkPkg_Status = 1 where ProjectAdditionalArea_Status = 1 and ProjectAdditionalArea_DevisionId = '" + Division_Id + "')) ";
        }
        if (Circle_Id > 0 && Division_Id == 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Zone_Id > 0 && Division_Id == 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        strQuery += " group by ProjectWork_DivisionId, Circle_Name, Division_Name ";
        strQuery += " order by Circle_Name, Division_Name ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Data_Updation_Status_Details(int Zone_Id, int Circle_Id, int Division_Id, int Mode)
    {
        string FP = "";
        string FPWhere = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
            FPWhere = "convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)) ";
        }
        else
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
            FPWhere = "convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))";
        }
        string SanctionedCost = "";
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
						ProjectWork_StartDate = convert(char(10), ProjectWork_StartDate, 103), 
						ProjectWork_EndDate = convert(char(10), ProjectWork_EndDate, 103), 
						ProjectWorkPkg_Agreement_Date,
						ProjectWorkPkg_Due_Date, 
                        ProjectWorkPkg_Start_Date,
						Target_Date_Agreement_Extended = ProjectWorkPkg_End_Date_Extended,
                        ProjectWork_GO_No,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        ProjectWork_ProjectType_Id,
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
                        Division_Id, 
						Circle_Id, 
						Zone_Id, 
						tender_cost,
						tender_cost_1,
						Step_Count = isnull(Step_1, 0) + isnull(Step_2, 0) + isnull(Step_3, 0) + isnull(Step_4, 0) + isnull(Step_5, 0) + isnull(Step_6, 0) + isnull(Step_7, 0), 
						FPCond
                        Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)), 
                        Issue = REPLACE(REPLACE((case when ltrim(rtrim(isnull(tIssue.Issue_1, '') + isnull(tIssue.SubIssue_1, '') + isnull(tIssue.Comments_1, ''))) != '' then (isnull(tIssue.Issue_1, '') + ': ' + isnull(tIssue.SubIssue_1, '') + ': ' + isnull(tIssue.Comments_1, '')) else '' end) 
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_2, '') + isnull(tIssue.SubIssue_2, '') + isnull(tIssue.Comments_2, ''))) != '' then (isnull(tIssue.Issue_2, '') + ': ' + isnull(tIssue.SubIssue_2, '') + ': ' + isnull(tIssue.Comments_2, '')) else '' end)
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_3, '') + isnull(tIssue.SubIssue_3, '') + isnull(tIssue.Comments_3, ''))) != '' then (isnull(tIssue.Issue_3, '') + ': ' + isnull(tIssue.SubIssue_3, '') + ': ' + isnull(tIssue.Comments_3, '')) else '' end), CHAR(13),''), CHAR(10),'')
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
                            tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage),
		                    GO_Total = sum(ProjectWorkGO_TotalShare)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                    GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                    ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                    ProjectWorkGO_GO_Number,
			                    ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                    ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                    ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                    ) tGO_Release 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target, 
		                    ProjectWorkFinancialTarget_AddedOn,  
							ProjectWorkFinancialTarget_Month, 
							ProjectWorkFinancialTarget_Year,
		                    DaysDiff = DATEDIFF(DD, ProjectWorkFinancialTarget_AddedOn, getdate())
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
		                    GO_1 = max(case when rrGO = 1 then isnull(GOPath, '') else '' end),
		                    GO_2 = max(case when rrGO = 2 then isnull(GOPath, '') else '' end),
		                    GO_3 = max(case when rrGO = 3 then isnull(GOPath, '') else '' end)
	                    from 
	                    (
		                    select 
			                    ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                    ProjectWorkGO_Work_Id, 
			                    isnull(ProjectWorkGO_Document_Path, '') GOPath 
		                    from tbl_ProjectWorkGO 
		                    where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType = 'S'
	                    ) tGO group by ProjectWorkGO_Work_Id
                    ) tGOF on tGOF.ProjectWorkGO_Work_Id = ProjectWork_Id 
                    left join 
                    (
                        select 
	                        ProjectWorkIssueDetails_WorkId, 
                            Issue_1 = max(case when rr = 1 then ProjectIssue_Name else null end),
                            SubIssue_1 = max(case when rr = 1 then Dependency_Name else null end),
                            Comments_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Comments else null end),

                            Issue_2 = max(case when rr = 2 then ProjectIssue_Name else null end),
                            SubIssue_2 = max(case when rr = 2 then Dependency_Name else null end),
                            Comments_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Comments else null end),

                            Issue_3 = max(case when rr = 3 then ProjectIssue_Name else null end),
                            SubIssue_3 = max(case when rr = 3 then Dependency_Name else null end),
                            Comments_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Comments else null end)
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWorkIssueDetails_WorkId order by ProjectWorkIssueDetails_Id desc) rr,
		                        ProjectWorkIssueDetails_Issue_Id,
		                        ProjectWorkIssueDetails_Category,
		                        ProjectWorkIssueDetails_Dependency_Id,
		                        ProjectWorkIssueDetails_Date = convert(char(10), ProjectWorkIssueDetails_Date, 103),
		                        ProjectWorkIssueDetails_Comments = REPLACE(REPLACE(ProjectWorkIssueDetails_Comments, CHAR(13),''), CHAR(10),''),
		                        ProjectWorkIssueDetails_WorkId, 
		                        Dependency_Name = REPLACE(REPLACE(Dependency_Name, CHAR(13),''), CHAR(10),''), 
		                        ProjectIssue_Name = REPLACE(REPLACE(ProjectIssue_Name, CHAR(13),''), CHAR(10),'')
	                        from tbl_ProjectWorkIssueDetails 
	                        left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id
	                        left join tbl_Dependency on Dependency_Id = ProjectWorkIssueDetails_Dependency_Id
	                        where ProjectWorkIssueDetails_Status = 1 and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0
                        ) tIssue where rr < 4
                        group by ProjectWorkIssueDetails_WorkId
                    ) tIssue on tIssue.ProjectWorkIssueDetails_WorkId = tbl_ProjectWork.ProjectWork_Id
                    where ProjectWork_Status = 1 ";
        strQuery = strQuery.Replace("FPCond", FP);
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }

        if (Mode > 0)
        {
            if (Mode == 1)
            {
                strQuery += " and (isnull(tGO_Release.GO_Total, 0)) > (case when isnull(ProjectWork_Budget_R, 0) > 0 then isnull(ProjectWork_Budget_R, 0) else isnull(ProjectWork_Budget, 0) end) ";
            }
            else if (Mode == 2)
            {
                strQuery += " and (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) > (case when isnull(ProjectWork_Budget_R, 0) > 0 then isnull(ProjectWork_Budget_R, 0) else isnull(ProjectWork_Budget, 0) end) ";
            }
            else if (Mode == 3)
            {
                strQuery += " and (isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)) > (isnull(tGO_Release.GO_Total, 0)) ";
            }
            else if (Mode == 4)
            {
                if (Client == "CNDS")
                {
                    strQuery += " and convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)) > 100 ";
                }
                else
                {
                    strQuery += " and convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)) > 100 ";
                }
            }
            else if (Mode == 5)
            {
                strQuery += " and DATEDIFF(DD, convert(date, ProjectWorkPkg_Agreement_Date, 103), convert(date, ProjectWorkPkg_Start_Date, 103)) < 0 ";
            }
            else if (Mode == 6)
            {
                strQuery += " and DATEDIFF(DD, convert(date, ProjectWorkPkg_Agreement_Date, 103), convert(date, ProjectWorkPkg_Due_Date, 103)) < 0 ";
            }
            else if (Mode == 7)
            {
                strQuery += " and DATEDIFF(DD, convert(date, ProjectWorkPkg_Due_Date, 103), convert(date, ProjectWorkPkg_End_Date_Extended, 103)) < 0 ";
            }
            else if (Mode == 8)
            {
                strQuery += " and ((isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) - (FPWhereCond)) > 20 ";
            }
            else if (Mode == 9)
            {
                strQuery += " and convert(char(10), convert(date, ProjectWorkPkg_Agreement_Date, 103), 103) = '01/01/1900' ";
            }
            else if (Mode == 10)
            {
                strQuery += " and convert(char(10), convert(date, ProjectWorkPkg_Start_Date, 103), 103) = '01/01/1900' ";
            }
            else if (Mode == 11)
            {
                strQuery += " and convert(char(10), convert(date, ProjectWorkPkg_Due_Date, 103), 103) = '01/01/1900' ";
            }
        }
        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode";

        strQuery = strQuery.Replace("FPWhereCond", FPWhere);
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Dashboard Data Financial Year Wise Analysis
    public DataSet get_PMIS_Dashboard_CNDS_Financial_Year_Wise(int Zone_Id, int Circle_Id, int Division_Id, string Project_Id, int District_Id, int ULB_Id, string ProjectCode, string Type_Id, string NodalDept_Id, int Jurisdiction_In, int Updation, string ProgressType, string FromDate, string TillDate, string NodalDepartmentScheme_Id, string Type, bool YearType, int FundingPattern_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (YearType)
        {
            strQuery = @"set dateformat dmy; 
					    select 
						    Year, 
						    Total_Count = sum(isnull(Total_Count, 0)),
						    Total_Sanction = sum(isnull(Total_Sanction, 0)),
						    Total_Tender = sum(isnull(Total_Tender, 0)),
						    Total_Release = sum(isnull(Total_Release, 0)),
						    Total_Expenditure = sum(isnull(Total_Expenditure, 0)),
						    Total_Remaining_Amount = sum(isnull(Total_Remaining_Amount, 0))
					    from (
                        select 						
						    Year = case when convert(date, ProjectWork_GO_Date, 103) <= convert(date, '31/03/2020', 103) then 'Before FY 2019-2020' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then 'FY 2020-2021' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then 'FY 2021-2022' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then 'FY 2022-2023' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then 'FY 2023-2024' else '' end,
	                        Total_Count = count(*), 
						    Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
						    Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
						    Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
						    Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
						    Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0))
                        from tbl_ProjectWork
                        left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                        left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                        left join tbl_Division on Division_Id = ProjectWork_DivisionId
                        left join tbl_Circle on Circle_Id = Division_CircleId
                        left join tbl_Zone on Zone_Id = Circle_ZoneId
                        left join
                        (
	                        select 
		                        ProjectWorkGO_Work_Id, 
                                Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                        from tbl_ProjectWorkGO 
	                        where ProjectWorkGO_Status = 1 
	                        group by ProjectWorkGO_Work_Id
                        ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkFinancialTarget_Target, 
                                ProjectWorkPhysicalTarget_Target
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1   
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					    left join 
                        (
                            select 
	                            ProjectWorkPkg_Work_Id,
	                            tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                            tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                            ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                            ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                            ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                            ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                            from (
                            select 
                                ProjectWorkPkg_Work_Id,
                                tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
                                tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                            ProjectWorkPkg_Due_Date,
                                ProjectWorkPkg_Start_Date, 
	                            ProjectWorkPkg_Agreement_Date, 
                                ProjectWorkPkg_ExtendDate, 
                                ProjectWorkPkg_Percent, 
	                            ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                            Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                            from tbl_ProjectWorkPkg 
                            left join 
                            (
	                            select 
		                            ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                            Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                            from tbl_Tender_Cost_Pkg_Wise_Automated
                            ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                            where ProjectWorkPkg_Status = 1	
                            ) tData
                            group by ProjectWorkPkg_Work_Id
                        ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					    left join 
                        (
	                        select 
		                        ProjectWorkGO_Work_Id, 
		                        GO_CentralShare = sum(GO_CentralShare),
		                        GO_StateShare = sum(GO_StateShare), 
		                        GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                        GO_Centage = sum(ProjectWorkGO_Centage),
		                        GO_Total = sum(ProjectWorkGO_TotalShare)
	                        from 
	                        (
		                        select 
			                        ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                        ProjectWorkGO_Work_Id, 
			                        GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                        GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                        ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                        ProjectWorkGO_GO_Number,
			                        ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                        ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                        ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                        from tbl_ProjectWorkGO 
		                        where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                        ) tGO_Release 
	                        group by ProjectWorkGO_Work_Id
                        ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					    left join
					    (
						    select 
							    ProjectWorkPkg_Work_Id, 
							    Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							    GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						    from tbl_PackageInvoice
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						    where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						    group by ProjectWorkPkg_Work_Id
					    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                        left join
                        (
                            select 
		                        ProjectWorkPkg_Work_Id,
		                        Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                        from tbl_Package_ADP
	                        inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                        join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                        where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                        group by ProjectWorkPkg_Work_Id
                        ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                        left join 
					    (
						    select 
							    ProjectWorkPkg_Work_Id,
							    Total_Invoice = count(*), 
							    Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							    Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						    from tbl_PackageInvoice 
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						    join 
						    (
							    select 
								    ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								    PackageInvoiceApproval_Next_Designation_Id,
								    PackageInvoiceApproval_Next_Organisation_Id,
								    PackageInvoiceApproval_Comments,
								    PackageInvoiceApproval_AddedBy,
								    PackageInvoiceApproval_AddedOn,
								    PackageInvoiceApproval_Status_Id,
								    PackageInvoiceApproval_Package_Id,
								    PackageInvoiceApproval_PackageInvoice_Id,
								    InvoiceStatus_Name,
								    PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								    PackageInvoiceApproval_Id
							    from tbl_PackageInvoiceApproval
							    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							    where PackageInvoiceApproval_Status = 1
						    ) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						    where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						    group by ProjectWorkPkg_Work_Id
					    ) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                        left join 
					    (
						    select 
							    ProjectWorkPkg_Work_Id,
							    Total_Invoice_ADP = count(*), 
							    Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						    from tbl_Package_ADP 
                            join
                            (
                                select
                                    Package_ADP_Item_Package_ADP_Id,
		                            Total_Line_Items = count(*),
		                            Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                                from tbl_Package_ADP_Item
                                where Package_ADP_Item_Status = 1
                                group by Package_ADP_Item_Package_ADP_Id
                            ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						    join 
						    (
							    select 
								    ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								    PackageADPApproval_Next_Designation_Id,
								    PackageADPApproval_Next_Organisation_Id,
								    PackageADPApproval_Comments,
								    PackageADPApproval_AddedBy,
								    PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								    PackageADPApproval_Status_Id,
								    PackageADPApproval_Package_Id,
								    PackageADPApproval_Package_ADP_Id,
								    InvoiceStatus_Name,
								    PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								    PackageADPApproval_Id
							    from tbl_PackageADPApproval
							    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							    where PackageADPApproval_Status = 1
						    ) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						    where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						    group by ProjectWorkPkg_Work_Id
					    ) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                        where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond NodalDepartmentScheme_IdCond TypeCond FundingPattern_IdCond 
					    group by case when convert(date, ProjectWork_GO_Date, 103) <= convert(date, '31/03/2020', 103) then 'Before FY 2019-2020' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2020', 103) and convert(date, '31/03/2021', 103) then 'FY 2020-2021' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2021', 103) and convert(date, '31/03/2022', 103) then 'FY 2021-2022' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2022', 103) and convert(date, '31/03/2023', 103) then 'FY 2022-2023' when convert(date, ProjectWork_GO_Date, 103) between convert(date, '01/04/2023', 103) and convert(date, '31/03/2024', 103) then 'FY 2023-2024' else '' end
					    ) tData where Year != 'Before FY 2019-2020' 
					    group by Year ";
        }
        else
        {
            strQuery = @"set dateformat dmy; 
					    select 
						    Year, 
						    Total_Count = sum(isnull(Total_Count, 0)),
						    Total_Sanction = sum(isnull(Total_Sanction, 0)),
						    Total_Tender = sum(isnull(Total_Tender, 0)),
						    Total_Release = sum(isnull(Total_Release, 0)),
						    Total_Expenditure = sum(isnull(Total_Expenditure, 0)),
						    Total_Remaining_Amount = sum(isnull(Total_Remaining_Amount, 0))
					    from (
                        select 						
						    Year = case when datepart(YYYY, ProjectWork_GO_Date) < 2020 then 'Before 2020' else convert(varchar, datepart(YYYY, ProjectWork_GO_Date)) end,
	                        Total_Count = count(*), 
						    Total_Sanction = sum(isnull(ProjectWork_Budget, 0)),
						    Total_Tender = sum(isnull(tProjectWorkPkg.tender_cost, 0)),
						    Total_Release = sum(isnull(tGO_Release.GO_Total, 0)),
						    Total_Expenditure = sum(isnull(tPrevInvoice.Amount, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0)),
						    Total_Remaining_Amount = sum(isnull(ProjectWork_Budget, 0)) - sum(isnull(tGO_Release.GO_Total, 0))
                        from tbl_ProjectWork
                        left join M_Jurisdiction District on District.M_Jurisdiction_Id = ProjectWork_DistrictId
                        left join M_Jurisdiction Mandal on Mandal.M_Jurisdiction_Id = District.Parent_Jurisdiction_Id
                        left join tbl_Division on Division_Id = ProjectWork_DivisionId
                        left join tbl_Circle on Circle_Id = Division_CircleId
                        left join tbl_Zone on Zone_Id = Circle_ZoneId
                        left join
                        (
	                        select 
		                        ProjectWorkGO_Work_Id, 
                                Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                        from tbl_ProjectWorkGO 
	                        where ProjectWorkGO_Status = 1 
	                        group by ProjectWorkGO_Work_Id
                        ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkFinancialTarget_Target, 
                                ProjectWorkPhysicalTarget_Target
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1   
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					    left join 
                        (
                            select 
	                            ProjectWorkPkg_Work_Id,
	                            tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                            tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                            ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                            ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                            ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                            ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                            from (
                            select 
                                ProjectWorkPkg_Work_Id,
                                tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
                                tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                            ProjectWorkPkg_Due_Date,
                                ProjectWorkPkg_Start_Date, 
	                            ProjectWorkPkg_Agreement_Date, 
                                ProjectWorkPkg_ExtendDate, 
                                ProjectWorkPkg_Percent, 
	                            ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                            Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                            from tbl_ProjectWorkPkg 
                            left join 
                            (
	                            select 
		                            ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                            Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                            Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                            from tbl_Tender_Cost_Pkg_Wise_Automated
                            ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                            where ProjectWorkPkg_Status = 1	
                            ) tData
                            group by ProjectWorkPkg_Work_Id
                        ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					    left join 
                        (
	                        select 
		                        ProjectWorkGO_Work_Id, 
		                        GO_CentralShare = sum(GO_CentralShare),
		                        GO_StateShare = sum(GO_StateShare), 
		                        GO_ULBShare = sum(ProjectWorkGO_ULBShare), 
		                        GO_Centage = sum(ProjectWorkGO_Centage),
		                        GO_Total = sum(ProjectWorkGO_TotalShare)
	                        from 
	                        (
		                        select 
			                        ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
			                        ProjectWorkGO_Work_Id, 
			                        GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
			                        GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
			                        ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
			                        ProjectWorkGO_GO_Number,
			                        ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000), 
			                        ProjectWorkGO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
			                        ProjectWorkGO_TotalShare = convert(decimal(18, 2), ProjectWorkGO_TotalRelease / 100000) 
		                        from tbl_ProjectWorkGO 
		                        where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
	                        ) tGO_Release 
	                        group by ProjectWorkGO_Work_Id
                        ) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					    left join
					    (
						    select 
							    ProjectWorkPkg_Work_Id, 
							    Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							    GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						    from tbl_PackageInvoice
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						    where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						    group by ProjectWorkPkg_Work_Id
					    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                        left join
                        (
                            select 
		                        ProjectWorkPkg_Work_Id,
		                        Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                        from tbl_Package_ADP
	                        inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                        join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                        where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                        group by ProjectWorkPkg_Work_Id
                        ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                        left join 
					    (
						    select 
							    ProjectWorkPkg_Work_Id,
							    Total_Invoice = count(*), 
							    Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							    Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						    from tbl_PackageInvoice 
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						    join 
						    (
							    select 
								    ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								    PackageInvoiceApproval_Next_Designation_Id,
								    PackageInvoiceApproval_Next_Organisation_Id,
								    PackageInvoiceApproval_Comments,
								    PackageInvoiceApproval_AddedBy,
								    PackageInvoiceApproval_AddedOn,
								    PackageInvoiceApproval_Status_Id,
								    PackageInvoiceApproval_Package_Id,
								    PackageInvoiceApproval_PackageInvoice_Id,
								    InvoiceStatus_Name,
								    PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								    PackageInvoiceApproval_Id
							    from tbl_PackageInvoiceApproval
							    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							    where PackageInvoiceApproval_Status = 1
						    ) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						    where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						    group by ProjectWorkPkg_Work_Id
					    ) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                        left join 
					    (
						    select 
							    ProjectWorkPkg_Work_Id,
							    Total_Invoice_ADP = count(*), 
							    Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						    from tbl_Package_ADP 
                            join
                            (
                                select
                                    Package_ADP_Item_Package_ADP_Id,
		                            Total_Line_Items = count(*),
		                            Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                                from tbl_Package_ADP_Item
                                where Package_ADP_Item_Status = 1
                                group by Package_ADP_Item_Package_ADP_Id
                            ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						    join 
						    (
							    select 
								    ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								    PackageADPApproval_Next_Designation_Id,
								    PackageADPApproval_Next_Organisation_Id,
								    PackageADPApproval_Comments,
								    PackageADPApproval_AddedBy,
								    PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								    PackageADPApproval_Status_Id,
								    PackageADPApproval_Package_Id,
								    PackageADPApproval_Package_ADP_Id,
								    InvoiceStatus_Name,
								    PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								    PackageADPApproval_Id
							    from tbl_PackageADPApproval
							    left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							    where PackageADPApproval_Status = 1
						    ) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						    where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						    group by ProjectWorkPkg_Work_Id
					    ) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                        where ProjectWork_Status = 1 Project_IdCond ProjectCodeCond Zone_IdCond Circle_IdCond Division_IdCond District_IdCond ULB_IdCond NodalDept_IdCond Type_IdCond Jurisdiction_InCond NodalDepartmentScheme_IdCond TypeCond FundingPattern_IdCond
					    group by datepart(YYYY, ProjectWork_GO_Date)
					    ) tData where Year != 'Before 2020' 
					    group by Year ";
        }
        if (Type != "")
        {
            if (Type == "OnGoing")
            {
                strQuery = strQuery.Replace("TypeCond", " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ");
            }
            if (Type == "Completed")
            {
                strQuery = strQuery.Replace("TypeCond", " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) >= 100 ");
            }
        }
        else
        {
            strQuery = strQuery.Replace("TypeCond", "");
        }
        if (FromDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) >= convert(date, '" + FromDate + "', 103) ";
        }
        if (TillDate != "")
        {
            strQuery += " and convert(date, ProjectWork_GO_Date, 103) <= convert(date, '" + TillDate + "', 103) ";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery = strQuery.Replace("Project_IdCond", " and ProjectWork_Project_Id in ( " + Project_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("Project_IdCond", "");
        }
        if (ProjectCode != "")
        {
            strQuery = strQuery.Replace("ProjectCodeCond", " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("ProjectCodeCond", "");
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Circle_ZoneId = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", "");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Division_CircleId = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", "");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and ProjectWork_DivisionId = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", "");
        }
        if (District_Id != 0)
        {
            strQuery = strQuery.Replace("District_IdCond", " and ProjectWork_DistrictId = '" + District_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("District_IdCond", "");
        }
        if (ULB_Id != 0)
        {
            strQuery = strQuery.Replace("ULB_IdCond", " and ProjectWork_ULB_Id = '" + ULB_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("ULB_IdCond", "");
        }
        if (NodalDept_Id != "")
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", " and ProjectWork_NodalDepartment_Id in (" + NodalDept_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDept_IdCond", "");
        }
        if (NodalDepartmentScheme_Id != "")
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", " and ProjectWork_NodalDeptScheme_Id in (" + NodalDepartmentScheme_Id + ")");
        }
        else
        {
            strQuery = strQuery.Replace("NodalDepartmentScheme_IdCond", "");
        }
        if (FundingPattern_Id != 0)
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", " and ProjectWork_NodalDeptScheme_Id in (select NodalDeptScheme_Id from tbl_NodalDeptScheme where NodalDeptScheme_FundingPattern_Id = " + FundingPattern_Id + ") ");
        }
        else
        {
            strQuery = strQuery.Replace("FundingPattern_IdCond", "");
        }
        if (Type_Id != "" && Type_Id != "0")
        {
            strQuery = strQuery.Replace("Type_IdCond", " and ProjectWork_ProjectType_Id = '" + Type_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Type_IdCond", "");
        }
        if (Jurisdiction_In != -1)
        {
            if (Jurisdiction_In == 1)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) = 1");
            }
            if (Jurisdiction_In == 0)
            {
                strQuery = strQuery.Replace("Jurisdiction_InCond", " and isnull(Mandal.Parent_Jurisdiction_Id, 0) != 1");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Jurisdiction_InCond", " ");
        }
        if (ProgressType == "Physical")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) = 0 ";
                }
                else if (Updation == 1)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 10 ";
                }
                else if (Updation == 2)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 10 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 20 ";
                }
                else if (Updation == 3)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 20 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 30 ";
                }
                else if (Updation == 4)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 30 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 40 ";
                }
                else if (Updation == 5)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 40 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 6)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 60 ";
                }
                else if (Updation == 7)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 60 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 70 ";
                }
                else if (Updation == 8)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 70 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 80 ";
                }
                else if (Updation == 9)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 80 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 90 ";
                }
                else if (Updation == 10)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 90 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 25)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 0 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 25 ";
                }
                else if (Updation == 50)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 25 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 50 ";
                }
                else if (Updation == 75)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 50 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) <= 75 ";
                }
                else if (Updation == 99)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) > 75 and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) < 100 ";
                }
                else if (Updation == 11)
                {
                    strQuery += " and isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0) >= 100 ";
                }
            }
        }
        if (ProgressType == "Financial")
        {
            if (Updation != -1)
            {
                if (Updation == 0)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) = 0 ";
                    }
                }
                else if (Updation == 1)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 10 ";
                    }
                }
                else if (Updation == 2)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 10 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 20 ";
                    }
                }
                else if (Updation == 3)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 20 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 30 ";
                    }
                }
                else if (Updation == 4)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 30 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 40 ";
                    }
                }
                else if (Updation == 5)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 40 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 6)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 60 ";
                    }
                }
                else if (Updation == 7)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 60 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 70 ";
                    }
                }
                else if (Updation == 8)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 70 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 80 ";
                    }
                }
                else if (Updation == 9)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 80 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 90 ";
                    }
                }
                else if (Updation == 10)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 90 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
                else if (Updation == 11)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) >= 100 ";
                    }
                }

                else if (Updation == 25)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 0 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 25 ";
                    }
                }
                else if (Updation == 50)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 25 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 50 ";
                    }
                }
                else if (Updation == 75)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 50 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) <= 75 ";
                    }
                }
                else if (Updation == 99)
                {
                    if (Client == "CNDS")
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                    else
                    {
                        strQuery += " and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) > 75 and (convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end))) < 100 ";
                    }
                }
            }
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Tender Cost Calculation
    public DataSet get_Tender_Cost_Calculation_Analysis(int Zone_Id, int Circle_Id, int Division_Id, string ProjectCode, string Project_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        tbl_ProjectWork.ProjectWork_Id, 
                        tbl_ProjectWorkPkg.ProjectWorkPkg_Id, 
                        ProjectWork_Project_Id, 
                        tbl_ProjectWork.ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(tbl_ProjectWork.ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        tbl_ProjectWorkPkg.ProjectWorkPkg_Name,
                        tbl_ProjectWorkPkg.ProjectWorkPkg_Code,
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
                        Division_Id, 
						Circle_Id, 
						Zone_Id, 
						Amount_Without_GST_12,
						Amount_Without_GST_18,
						Total_Invoice_Value_WithOutGST_12,
						Total_Invoice_Value_WithOutGST_18,
						Tender_Cost_Exclude_GST,
						Total_12_With_GST,
						Diff_With_Naked_Tender_Cost,
						Remaining_With_18_Per,
						Final_Tender_Cost	
                    from tbl_ProjectWorkPkg 
					join tbl_Tender_Cost_Pkg_Wise_Automated on tbl_Tender_Cost_Pkg_Wise_Automated.ProjectWorkPkg_Id = tbl_ProjectWorkPkg.ProjectWorkPkg_Id
					join tbl_ProjectWork on ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectWork_Status = 1 and ProjectWorkPkg_Status = 1 ";
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectCode != "")
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_ProjectCode like '%" + ProjectCode + "%'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }

        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, tbl_ProjectWork.ProjectWork_ProjectCode, tbl_ProjectWorkPkg.ProjectWorkPkg_Code ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Lokarpan / Shilanyas
    public bool Update_tbl_ProjectWork_Shilanyas_Lokarpan(List<tbl_ProjectWork> obj_tbl_ProjectWork_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        string strQuery = "";

        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                for (int i = 0; i < obj_tbl_ProjectWork_Li.Count; i++)
                {
                    strQuery = " set dateformat dmy; update tbl_ProjectWork set ProjectWork_ShilanyasStatus = '" + obj_tbl_ProjectWork_Li[i].ProjectWork_ShilanyasStatus + "', ProjectWork_lokarpanStatus = '" + obj_tbl_ProjectWork_Li[i].ProjectWork_lokarpanStatus + "', ProjectWork_DistrictId = '" + obj_tbl_ProjectWork_Li[i].ProjectWork_DistrictId + "', ProjectWork_ULB_Id = '" + obj_tbl_ProjectWork_Li[i].ProjectWork_ULB_Id + "' where ProjectWork_Status = 1 and ProjectWork_Id = '" + obj_tbl_ProjectWork_Li[i].ProjectWork_Id + "' ";
                    ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch (Exception ee)
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region Bidders Master Info Reposirory
    public DataSet get_Bidders_Statics()
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    Total_Bidders = count(distinct JalPrahariBidderDPR_BidderInfo_Id),
	                    Lead_Bidder = sum(case when isnull(JalPrahariBidderDPR_Is_Lead, 0) = 1 and isnull(JalPrahariBidderDPR_Is_JV, 0) = 0 then 1 else 0 end),
	                    JV_Bidder = sum(isnull(JalPrahariBidderDPR_Is_JV, 0))
                    from tbl_JalPrahariBidderDPR 
                    where JalPrahariBidderDPR_Status = 1 ";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_JalPrahariBidderDPR_Linked(int BidderInfo_Id, int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectDPR_Name,
                        ProjectDPR_Id,
                        ProjectDPR_Code, 
                        Data_Bind = isnull(ProjectDPR_Code, '') + ' - ' + isnull(ProjectDPR_Name, ''),
                        JalPrahariBidderDPR_BidderInfo_Id
                    from tbl_JalPrahariBidderDPR 
                    join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id and ProjectDPR_Status = 1 and ProjectDPR_Project_Id = 1016
                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
                    join tbl_Circle on Circle_Id = Division_CircleId 
                    where JalPrahariBidderDPR_Status = 1 and JalPrahariBidderDPR_BidderInfo_Id = '" + BidderInfo_Id + "' ";
        if (Zone_Id > 0)
        {
            strQuery += "and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += "and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += "and ProjectDPR_DivisionId = '" + Division_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Update_JalPrahariBidderDPR_Linking(int BidderInfo_Id, string DPR_Id_In, string ProjectDPR_Code, bool WithJV)
    {
        bool rVal = false;
        string strQuery = "";
        if (ProjectDPR_Code == "")
        {
            strQuery = @"set dateformat dmy; 
                    update tbl_JalPrahariBidderDPR set JalPrahariBidderDPR_DPR_Id = 0 where JalPrahariBidderDPR_BidderInfo_Id = '" + BidderInfo_Id + "' and JalPrahariBidderDPR_DPR_Id in (" + DPR_Id_In + ")";
        }
        else
        {
            DataSet ds = new DataSet();
            string DPR_Id = "0";
            string Is_Lead = "0";
            string Is_JV = "0";
            if (WithJV)
            {
                Is_Lead = "0";
                Is_JV = "1";
            }
            else
            {
                Is_Lead = "1";
                Is_JV = "0";
            }

            strQuery = @"set dateformat dmy; select ProjectDPR_Id from tbl_ProjectDPR where ProjectDPR_Status = 1 and ProjectDPR_Project_Id = 1016 and ProjectDPR_Code = '" + ProjectDPR_Code + "'";
            ds = ExecuteSelectQuery(strQuery);
            if (AllClasses.CheckDataSet(ds))
            {
                DPR_Id = ds.Tables[0].Rows[0]["ProjectDPR_Id"].ToString();
                if (DPR_Id != "0")
                {
                    strQuery = @"set dateformat dmy; 
                                insert into tbl_JalPrahariBidderDPR
                                (
	                                JalPrahariBidderDPR_BidderInfo_Id,
	                                JalPrahariBidderDPR_DPR_Id,
	                                JalPrahariBidderDPR_Is_Lead,
	                                JalPrahariBidderDPR_Is_JV,
	                                JalPrahariBidderDPR_AddedBy,
	                                JalPrahariBidderDPR_AddedOn,
	                                JalPrahariBidderDPR_Status
                                ) values ('" + BidderInfo_Id + "', '" + DPR_Id + "', '" + Is_Lead + "', '" + Is_JV + "', 1, getdate(), 1)";
                    ExecuteSelectQuery(strQuery);
                }
            }
        }
        try
        {
            ExecuteSelectQuery(strQuery);
            rVal = true;
        }
        catch
        {
            rVal = false;
        }
        return rVal;
    }

    public DataSet get_Bidders_Master_Data(string GST_PAN_No, string FirmName, int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    JalPrahariBidderInfo_Id,
	                    JalPrahariBidderInfo_BidderName,
	                    JalPrahariBidderInfo_BidderPAN,
	                    JalPrahariBidderInfo_GSTIN,
	                    JalPrahariBidderInfo_MobileNo, 
                        Total_Participated = isnull(tJalPrahariBidderDPR.Total_Participated, 0),
	                    Participated_As_Lead = isnull(tJalPrahariBidderDPR.Participated_As_Lead, 0), 
	                    Participated_As_JV = isnull(tJalPrahariBidderDPR.Participated_As_JV, 0)
                    from tbl_JalPrahariBidderInfo 
                    leftCondition join
                    (
	                    select 
		                    JalPrahariBidderDPR_BidderInfo_Id,
		                    count(distinct JalPrahariBidderDPR_DPR_Id) Total_Participated,
		                    Participated_As_Lead = sum(isnull(JalPrahariBidderDPR_Is_Lead, 0)),
		                    Participated_As_JV = sum(isnull(JalPrahariBidderDPR_Is_JV, 0))		
	                    from tbl_JalPrahariBidderDPR
                        join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id and ProjectDPR_Status = 1 and ProjectDPR_Project_Id = 1016
						join tbl_Division on Division_Id = ProjectDPR_DivisionId
						join tbl_Circle on Circle_Id = Division_CircleId
	                    where JalPrahariBidderDPR_Status = 1 Zone_IdCondition Circle_IdCondition Division_IdCondition 
	                    group by JalPrahariBidderDPR_BidderInfo_Id
                    ) tJalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderInfo_Id
                    where JalPrahariBidderInfo_Status = 1 FirmNameCond
                    order by isnull(tJalPrahariBidderDPR.Total_Participated, 0) desc, JalPrahariBidderInfo_BidderName";
        if (Zone_Id + Circle_Id + Division_Id > 0)
        {
            strQuery = strQuery.Replace("leftCondition", "");
            if (Zone_Id > 0)
            {
                strQuery = strQuery.Replace("Zone_IdCondition", " and Circle_ZoneId = " + Zone_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Zone_IdCondition", " ");
            }
            if (Circle_Id > 0)
            {
                strQuery = strQuery.Replace("Circle_IdCondition", " and Division_CircleId = " + Circle_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Circle_IdCondition", " ");
            }
            if (Division_Id > 0)
            {
                strQuery = strQuery.Replace("Division_IdCondition", " and ProjectDPR_DivisionId = " + Division_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Division_IdCondition", " ");
            }
        }
        else
        {
            strQuery = strQuery.Replace("leftCondition", "left");
            strQuery = strQuery.Replace("Zone_IdCondition", "");
            strQuery = strQuery.Replace("Circle_IdCondition", "");
            strQuery = strQuery.Replace("Division_IdCondition", "");
        }

        if (FirmName != "")
        {
            strQuery = strQuery.Replace("FirmNameCond", " and JalPrahariBidderInfo_BidderName like '%" + FirmName + "%'");
        }
        else
        {
            strQuery = strQuery.Replace("FirmNameCond", " ");
        }
        if (GST_PAN_No != "")
        {
            strQuery = strQuery.Replace("GST_PAN_NoCond", " and (JalPrahariBidderInfo_GSTIN like '%" + GST_PAN_No + "%' or JalPrahariBidderInfo_BidderPAN like '%" + GST_PAN_No + "%')");
        }
        else
        {
            strQuery = strQuery.Replace("GST_PAN_NoCond", " ");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_Bidders_Data(Bidders_Info obj_Bidders_Info)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    Total_Participated = count(distinct JalPrahariBidderDPR_DPR_Id),
	                    Participated_As_Lead = sum(isnull(JalPrahariBidderDPR_Is_Lead, 0)),
	                    Participated_As_JV = sum(isnull(JalPrahariBidderDPR_Is_JV, 0)), 
	                    Technically_Qualified = sum(isnull(tProjectDPRBidder.TechnicalQualified, 0)), 
	                    Financially_Qualified = sum(isnull(tProjectDPRBidder.FinancialQualified, 0))
                    from tbl_JalPrahariBidderDPR 
                    leftCondition join
                    (
	                    select 
		                    ProjectDPRBidder_DPR_Id,
		                    ProjectDPRBidder_BidderAmount = sum(isnull(ProjectDPRBidder_BidderAmount, 0)),
		                    TechnicalQualified = sum(case when isnull(ProjectDPRBidder_TechnicalQualified, 0) = 1 then 1 else 0 end),
		                    FinancialQualified = sum(case when isnull(ProjectDPRBidder_FinancialQualified, 0) = 1 then 1 else 0 end)
	                    from tbl_ProjectDPRBidder
                        join tbl_ProjectDPR on ProjectDPR_Id = ProjectDPRBidder_DPR_Id and ProjectDPR_Status = 1 and ProjectDPR_Project_Id = 1016
						join tbl_Division on Division_Id = ProjectDPR_DivisionId
						join tbl_Circle on Circle_Id = Division_CircleId
	                    where ProjectDPRBidder_Status = 1 and (ProjectDPRBidder_Lead_JalPrahari_Master_Id = JalPrahariBidderInfo_IdCond or ProjectDPRBidder_JV_JalPrahari_Master_Id = JalPrahariBidderInfo_IdCond) Zone_IdCondition Circle_IdCondition Division_IdCondition 
	                    group by ProjectDPRBidder_DPR_Id
                    ) tProjectDPRBidder on ProjectDPRBidder_DPR_Id = JalPrahariBidderDPR_DPR_Id
                    where JalPrahariBidderDPR_Status = 1 and JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderInfo_IdCond ";
        strQuery = strQuery.Replace("JalPrahariBidderInfo_IdCond", obj_Bidders_Info.JalPrahariBidderInfo_Id.ToString());
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery = strQuery.Replace("Zone_IdCondition", " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Zone_IdCondition", " ");
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery = strQuery.Replace("Circle_IdCondition", " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Circle_IdCondition", " ");
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery = strQuery.Replace("Division_IdCondition", " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Division_IdCondition", " ");
            }
            strQuery = strQuery.Replace("leftCondition", "");
        }
        else
        {
            strQuery = strQuery.Replace("leftCondition", "left");
            strQuery = strQuery.Replace("Zone_IdCondition", "");
            strQuery = strQuery.Replace("Circle_IdCondition", "");
            strQuery = strQuery.Replace("Division_IdCondition", "");
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Participated_Projects(Bidders_Info obj_Bidders_Info, string Mode)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct
                        ProjectDPR_Id, 
                        Project_Name, 
                        ProjectDPR_Name = REPLACE(REPLACE(ProjectDPR_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectDPR_ProjectTypeId,
						ProjectType_Name,
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Circle_Id, 
						Zone_Name, 
						Zone_Id, 
						ProjectDPR_DistrictId, 
                        ProjectDPR_ULBId, 
						ProjectDPR_DivisionId, 
						Division_CircleId, 
                        ProjectDPR_CapexCost = convert(decimal(18, 2), ProjectDPR_CapexCost),
                        ProjectDPR_OandM_Cost = convert(decimal(18, 2), ProjectDPR_OandM_Cost),
                        ProjectDPR_ACA_Cost = convert(decimal(18, 2), ProjectDPR_ACA_Cost),
                        ProjectDPR_Project_Cost = convert(decimal(18, 2), ProjectDPR_Project_Cost),
                        ProjectDPR_Comments,
                        ProjectDPR_Code
                    from tbl_ProjectDPR 
					left join tbl_Project on Project_Id = ProjectDPR_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectDPR_ProjectTypeId
					left join M_Jurisdiction on M_Jurisdiction.M_Jurisdiction_Id = ProjectDPR_DistrictId
					left join tbl_ULB on ULB_Id = ProjectDPR_ULBId
					left join tbl_Division on Division_Id = ProjectDPR_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
					where ProjectDPR_Status = 1 and ProjectDPR_Id in 
                    (
	                    select 
		                    distinct ProjectDPRBidder_DPR_Id
	                    from tbl_ProjectDPRBidder
                        join tbl_ProjectDPR on ProjectDPR_Id = ProjectDPRBidder_DPR_Id and ProjectDPR_Status = 1 and ProjectDPR_Project_Id = 1016
	                    join tbl_Division on Division_Id = ProjectDPR_DivisionId
	                    join tbl_Circle on Circle_Id = Division_CircleId
	                    where ProjectDPRBidder_Status = 1 ModeCond and (ProjectDPRBidder_Lead_JalPrahari_Master_Id = JalPrahariBidderInfo_IdCond or ProjectDPRBidder_JV_JalPrahari_Master_Id = JalPrahariBidderInfo_IdCond) Zone_IdCondition Circle_IdCondition Division_IdCondition 
                    )";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
                strQuery = strQuery.Replace("Zone_IdCondition", " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Zone_IdCondition", " ");
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
                strQuery = strQuery.Replace("Circle_IdCondition", " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Circle_IdCondition", " ");
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
                strQuery = strQuery.Replace("Division_IdCondition", " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "");
            }
            else
            {
                strQuery = strQuery.Replace("Division_IdCondition", " ");
            }
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCondition", "");
            strQuery = strQuery.Replace("Circle_IdCondition", "");
            strQuery = strQuery.Replace("Division_IdCondition", "");
        }
        strQuery = strQuery.Replace("JalPrahariBidderInfo_IdCond", obj_Bidders_Info.JalPrahariBidderInfo_Id.ToString());
        if (Mode == "")
        {
            strQuery = strQuery.Replace("ModeCond", "");
        }
        else
        {
            if (Mode == "Lead")
            {
                strQuery = strQuery.Replace("ModeCond", " and ProjectDPRBidder_Lead_JalPrahari_Master_Id = " + obj_Bidders_Info.JalPrahariBidderInfo_Id.ToString());
            }
            else if (Mode == "JV")
            {
                strQuery = strQuery.Replace("ModeCond", " and ProjectDPRBidder_JV_JalPrahari_Master_Id = " + obj_Bidders_Info.JalPrahariBidderInfo_Id.ToString());
            }
            else if (Mode == "TQ")
            {
                strQuery = strQuery.Replace("ModeCond", " and isnull(ProjectDPRBidder_TechnicalQualified, 0) = 1 ");
            }
            else if (Mode == "FQ")
            {
                strQuery = strQuery.Replace("ModeCond", " and isnull(ProjectDPRBidder_FinancialQualified, 0) = 1 ");
            }
            else
            {
                strQuery = strQuery.Replace("ModeCond", "");
            }
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Work_Order_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
                        JalPrahariBidder_Order_Id,
                        JalPrahariBidder_Order_BidderInfo_Id,
                        JalPrahariBidder_Order_Name_Of_Work,
                        JalPrahariBidder_Order_StartDate = convert(char(10), JalPrahariBidder_Order_StartDate, 103),
                        JalPrahariBidder_Order_EndDate = convert(char(10), JalPrahariBidder_Order_EndDate, 103),
                        JalPrahariBidder_Order_Amount,
                        JalPrahariBidder_Order_Inflation,
                        JalPrahariBidder_Order_Amount_After_Inflation,
                        JalPrahariBidder_Order_JV_Share,
                        JalPrahariBidder_Order_JV_Contract_Value,
                        JalPrahariBidder_Order_Simmilar_Nature,
                        JalPrahariBidder_Order_Completed,
                        JalPrahariBidder_Order_Comissioned,
                        JalPrahariBidder_Order_Comments, 
                        JalPrahariBidder_Order_BidderType, 
                        JalPrahariBidder_Order_OrderPath,
                        JalPrahariBidder_Order_VerificationPath,
                        JalPrahariBidder_Order_VerificationLetterPath,
                        JalPrahariBidder_Order_VerificationLetterDate = convert(char(10), JalPrahariBidder_Order_VerificationLetterDate, 103), 
                        JalPrahariBidder_Order_VerificationLetterPath1,
                        JalPrahariBidder_Order_VerificationLetterDate1 = convert(char(10), JalPrahariBidder_Order_VerificationLetterDate1, 103), 
                        JalPrahariBidder_Order_VerificationLetterPath2,
                        JalPrahariBidder_Order_VerificationLetterDate2 = convert(char(10), JalPrahariBidder_Order_VerificationLetterDate2, 103), 
                        JalPrahariBidder_Order_ReminderCount, 
						JalPrahariBidder_Order_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidder_Order
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidder_Order_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
                    left join tbl_PersonDetail on Person_Id = JalPrahariBidder_Order_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidder_Order_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidder_Order_Status = 1 and JalPrahariBidder_Order_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Net_Worth_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
	                    JalPrahariBidderDoc_Id,
                        JalPrahariBidderDoc_BidderInfo_Id,
                        JalPrahariBidderDoc_DocType_Id,
                        JalPrahariBidderDoc_Path,
                        JalPrahariBidderDoc_PathVerification,
                        JalPrahariBidderDoc_PathVerificationLetter, 
						JalPrahariBidderDoc_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidderDoc
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderDoc_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
					left join tbl_PersonDetail on Person_Id = JalPrahariBidderDoc_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidderDoc_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidderDoc_Status = 1 and JalPrahariBidderDoc_DocType_Id = 1 and JalPrahariBidderDoc_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Solvency_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
	                    JalPrahariBidderDoc_Id,
                        JalPrahariBidderDoc_BidderInfo_Id,
                        JalPrahariBidderDoc_DocType_Id,
                        JalPrahariBidderDoc_Path,
                        JalPrahariBidderDoc_PathVerification,
                        JalPrahariBidderDoc_PathVerificationLetter, 
						JalPrahariBidderDoc_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidderDoc
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderDoc_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
					left join tbl_PersonDetail on Person_Id = JalPrahariBidderDoc_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidderDoc_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidderDoc_Status = 1 and JalPrahariBidderDoc_DocType_Id = 2 and JalPrahariBidderDoc_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Balance_Sheet_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
	                    JalPrahariBidderDoc_Id,
                        JalPrahariBidderDoc_BidderInfo_Id,
                        JalPrahariBidderDoc_DocType_Id,
                        JalPrahariBidderDoc_Path,
                        JalPrahariBidderDoc_PathVerification,
                        JalPrahariBidderDoc_PathVerificationLetter, 
						JalPrahariBidderDoc_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidderDoc
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderDoc_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
					left join tbl_PersonDetail on Person_Id = JalPrahariBidderDoc_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidderDoc_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidderDoc_Status = 1 and JalPrahariBidderDoc_DocType_Id = 3 and JalPrahariBidderDoc_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_ITR_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
	                    JalPrahariBidderDoc_Id,
                        JalPrahariBidderDoc_BidderInfo_Id,
                        JalPrahariBidderDoc_DocType_Id,
                        JalPrahariBidderDoc_Path,
                        JalPrahariBidderDoc_PathVerification,
                        JalPrahariBidderDoc_PathVerificationLetter, 
						JalPrahariBidderDoc_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidderDoc
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderDoc_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
					left join tbl_PersonDetail on Person_Id = JalPrahariBidderDoc_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidderDoc_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidderDoc_Status = 1 and JalPrahariBidderDoc_DocType_Id = 4 and JalPrahariBidderDoc_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Bidders_Bid_Capacity_Repos(Bidders_Info obj_Bidders_Info, int DPR_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select distinct 
	                    JalPrahariBidderDoc_Id,
                        JalPrahariBidderDoc_BidderInfo_Id,
                        JalPrahariBidderDoc_DocType_Id,
                        JalPrahariBidderDoc_Path,
                        JalPrahariBidderDoc_PathVerification,
                        JalPrahariBidderDoc_PathVerificationLetter, 
						JalPrahariBidderDoc_AddedBy, 
						Person_Name, 
						Division_Name
                    from tbl_JalPrahariBidderDoc
                    left join tbl_JalPrahariBidderDPR on JalPrahariBidderDPR_BidderInfo_Id = JalPrahariBidderDoc_BidderInfo_Id
                    left join tbl_ProjectDPR on ProjectDPR_Id = JalPrahariBidderDPR_DPR_Id
					left join tbl_PersonDetail on Person_Id = JalPrahariBidderDoc_AddedBy
                    left join tbl_PersonJuridiction on PersonJuridiction_PersonId = JalPrahariBidderDoc_AddedBy
					left join tbl_Division on Division_Id = PersonJuridiction_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where JalPrahariBidderDoc_Status = 1 and JalPrahariBidderDoc_DocType_Id = 5 and JalPrahariBidderDoc_BidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        if (obj_Bidders_Info.Zone_Id + obj_Bidders_Info.Circle_Id + obj_Bidders_Info.Division_Id > 0)
        {
            if (obj_Bidders_Info.Zone_Id > 0)
            {
                strQuery += " and Circle_ZoneId = " + obj_Bidders_Info.Zone_Id + "";
            }
            if (obj_Bidders_Info.Circle_Id > 0)
            {
                strQuery += " and Division_CircleId = " + obj_Bidders_Info.Circle_Id + "";
            }
            if (obj_Bidders_Info.Division_Id > 0)
            {
                strQuery += " and ProjectDPR_DivisionId = " + obj_Bidders_Info.Division_Id + "";
            }
        }
        if (DPR_Id > 0)
        {
            strQuery += " and JalPrahariBidderDPR_DPR_Id = " + DPR_Id + "";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Generate Project Code
    public string get_Project_Code(string Unit_No, string Year_Code, SqlTransaction trans, SqlConnection cn)
    {
        int val = 0;
        DataTable dt = new DataTable();
        DataTable dtVoucher = new DataTable();
        string sql = "select count(*) from tbl_ProjectDPR where ProjectDPR_Status = 1 ";

        if (trans == null)
        {
            dt = ExecuteSelectQuery(sql).Tables[0];
        }
        else
        {
            dt = ExecuteSelectQuerywithTransaction(cn, sql, trans).Tables[0];
        }
        try
        {
            if (AllClasses.CheckDt(dt))
            {
                val = Convert.ToInt32(dt.Rows[0][0].ToString()) + 1;
            }
            else
            {
                val = 1;
            }
        }
        catch (Exception)
        {
            val = 1;
        }
        val = val + 17671;
        return Unit_No + val.ToString().PadLeft(5, '0');
    }
    #endregion

    #region Map View
    public DataSet get_District_GIS()
    {
        DataSet ds = new DataSet();
        string sql = "select distinct District from CMNSY_Data order by District";
        try
        {
            ds = ExecuteSelectQuery(sql);
        }
        catch (Exception)
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_ULB_GIS(string District)
    {
        DataSet ds = new DataSet();
        string sql = "select distinct ULB = Type + ' - ' + ULB from CMNSY_Data where District = '" + District + "' order by ULB";
        try
        {
            ds = ExecuteSelectQuery(sql);
        }
        catch (Exception)
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_GIS_Data(string District, string ULB, string Phase_In, string Building_Type)
    {
        DataSet ds = new DataSet();
        string sql = "select * from CMNSY_Data where 1 = 1 ";
        if (District != "")
        {
            sql += "and District = '" + District + "'";
        }
        if (ULB != "")
        {
            sql += "and ULB = '" + ULB + "'";
        }
        if (Phase_In != "")
        {
            sql += "and Phase in (" + Phase_In + ") ";
        }
        if (Building_Type != "")
        {
            sql += "and Building_Type in (" + Building_Type + ")";
        }
        try
        {
            ds = ExecuteSelectQuery(sql);
        }
        catch (Exception)
        {
            ds = null;
        }
        return ds;
    }
    public DataSet get_Map_View_SVG()
    {
        DataSet ds = new DataSet();
        string sql = @"select 
                            tbl_District_MAP_SVG.*, 
                            Class_1 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_1 = 0) then 'st1' when tData.Dist_HQ_Phase_1 = 1 then 'st2' else 'st0' end,
                            Class_2 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_2 = 0) then 'st1' when tData.Dist_HQ_Phase_2 = 1 then 'st2' else 'st0' end
                        from tbl_District_MAP_SVG
                        left join
                        (
	                        select 
		                        District_Id, 
		                        max(case when Dist_HQ = 'Yes' then 1 else 0 end) Dist_HQ,  
		                        max(case when Phase_1 = 'Yes' then 1 else 0 end) Phase_1,  
		                        max(case when Phase_2 = 'Yes' then 1 else 0 end) Phase_2, 
		                        max(case when (Dist_HQ = 'Yes' and Phase_1 = 'Yes') then 1 else 0 end) Dist_HQ_Phase_1,  
		                        max(case when (Dist_HQ = 'Yes' and Phase_2 = 'Yes') then 1 else 0 end) Dist_HQ_Phase_2 
	                        from CMNSY_Data2
	                        group by District_Id
                        ) tData on tData.District_Id = tbl_District_MAP_SVG.District_Id";
        sql += Environment.NewLine;
        sql += @"select 
	                distinct 
	                Class_1 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_1 = 0) then 'st1_Legend' when tData.Dist_HQ_Phase_1 = 1 then 'st2_Legend' else 'st0_Legend' end,
	                Legend_1 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_1 = 0) then 'District Headquarter Not Covred In Phase 1' when tData.Dist_HQ_Phase_1 = 1 then 'District Headquarter and Covred In Phase 1' else 'NA' end,
                    Class_2 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_2 = 0) then 'st1_Legend' when tData.Dist_HQ_Phase_2 = 1 then 'st2_Legend' else 'st0_Legend' end,
                    Legend_2 = case when (tData.Dist_HQ = 1 and tData.Dist_HQ_Phase_2 = 0) then 'District Headquarter Not Covred In Phase 2' when tData.Dist_HQ_Phase_2 = 1 then 'District Headquarter and Covred In Phase 2' else 'NA' end
                from tbl_District_MAP_SVG
                left join
                (
	                select 
		                District_Id, 
		                max(case when Dist_HQ = 'Yes' then 1 else 0 end) Dist_HQ,  
		                max(case when Phase_1 = 'Yes' then 1 else 0 end) Phase_1,  
		                max(case when Phase_2 = 'Yes' then 1 else 0 end) Phase_2, 
		                max(case when (Dist_HQ = 'Yes' and Phase_1 = 'Yes') then 1 else 0 end) Dist_HQ_Phase_1,  
		                max(case when (Dist_HQ = 'Yes' and Phase_2 = 'Yes') then 1 else 0 end) Dist_HQ_Phase_2 
	                from CMNSY_Data2
	                group by District_Id
                ) tData on tData.District_Id = tbl_District_MAP_SVG.District_Id";
        try
        {
            ds = ExecuteSelectQuery(sql);
        }
        catch (Exception)
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region MPR
    public DataSet get_tbl_ProjectWork_Data_Dump_MPR(string Scheme_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";

        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "[Financial Progress (%)] = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }

        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        row_number() over (order by Project_Name, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name) Sr_No,
                        tbl_ProjectWork.ProjectWork_Id, 
                        [Zone] = Zone_Name, 
						Circle = Circle_Name,
						Division = Division_Name, 
                        Town = Jurisdiction_Name_Eng,                         
                        [Project Name] = REPLACE(REPLACE(REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), char(92), ''), char(39), ''), 
                        [Project Code] = ProjectWork_ProjectCode, 
						[Project Type] = ProjectType_Name,
                        [Total Cost Including Centage (In Lakhs)] = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),
						[Work Cost (In Lakhs)] = case when (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) = 0 then isnull(ProjectWork_Budget, 0) else (isnull(Funding.Central_Share, 0) + isnull(Funding.State_Share, 0) + isnull(Funding.ULB_Share, 0)) end, 
						[Tender Cost Including GST (In Lakhs)] = tProjectWorkPkg.tender_cost,
                        [Tender Cost Excluding GST (In Lakhs)] = tProjectWorkPkg.tender_cost_1,
                        [Agreement / Date Of Start] = case when ISDATE(ProjectWorkPkg_Agreement_Date) = 1 then convert(date, ProjectWorkPkg_Agreement_Date, 103) else null end,
						
                        [Completion Date As Per Agreement] = case when ISDATE(ProjectWorkPkg_Due_Date) = 1 then convert(date, ProjectWorkPkg_Due_Date, 103) else null end,
                        [Completion Date As Extended] = case when ISDATE(ProjectWorkPkg_End_Date_Extended) = 1 then convert(date, ProjectWorkPkg_End_Date_Extended, 103) else null end, 
												
						[Central + State Share 1st Instalment (In Lakhs)] = isnull(tGO_Release.GO_CentralShare_1, 0) + isnull(tGO_Release.GO_StateShare_1, 0), 
						[Centage 1st Instalment (In Lakhs)] = tGO_Release.GO_Centage_1,
						
						[Central + State Share 2nd Instalment (In Lakhs)] = isnull(tGO_Release.GO_CentralShare_2, 0) + isnull(tGO_Release.GO_StateShare_2, 0), 
						[Centage 2nd Instalment (In Lakhs)] = tGO_Release.GO_Centage_2,

						[Central + State Share 3rd Instalment (In Lakhs)] = isnull(tGO_Release.GO_CentralShare_3, 0) + isnull(tGO_Release.GO_StateShare_3, 0), 
						[Centage 3rd Instalment (In Lakhs)] = tGO_Release.GO_Centage_3,
						
						[Work  (Central +State Share) (In Lakhs)] = isnull(tGO_Release.GO_CentralShare_1, 0) + isnull(tGO_Release.GO_StateShare_1, 0) + isnull(tGO_Release.GO_CentralShare_2, 0) + isnull(tGO_Release.GO_StateShare_2, 0) + isnull(tGO_Release.GO_CentralShare_3, 0) + isnull(tGO_Release.GO_StateShare_3, 0), 
						[ULB Share Released (In Lakhs)] = isnull(tGO_ReleaseULB.GO_ULBShare, 0), 
						
						[Total (WORK + ULB) (In Lakhs)] = isnull(tGO_Release.GO_CentralShare_1, 0) + isnull(tGO_Release.GO_StateShare_1, 0) + isnull(tGO_Release.GO_CentralShare_2, 0) + isnull(tGO_Release.GO_StateShare_2, 0) + isnull(tGO_Release.GO_CentralShare_3, 0) + isnull(tGO_Release.GO_StateShare_3, 0) + isnull(tGO_ReleaseULB.GO_ULBShare, 0),
						
						[Total (With centage) (In Lakhs)] = isnull(tGO_Release.GO_Centage_1, 0) + isnull(tGO_Release.GO_Centage_2, 0) + isnull(tGO_Release.GO_Centage_3, 0) + isnull(tGO_Release.GO_CentralShare_1, 0) + isnull(tGO_Release.GO_StateShare_1, 0) + isnull(tGO_Release.GO_CentralShare_2, 0) + isnull(tGO_Release.GO_StateShare_2, 0) + isnull(tGO_Release.GO_CentralShare_3, 0) + isnull(tGO_Release.GO_StateShare_3, 0) + isnull(tGO_ReleaseULB.GO_ULBShare, 0),

						[Total Expenditure Till Date (In Lakhs)] = isnull(tPrevInvoice.Amount, 0) +  isnull(tPrevInvoiceADP.Amount, 0) + isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tADP.Total_Value_ADP, 0),

                        [Physical Progress (%)] = isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0), 
						FPCond
						[Concern EE] = tEx.Person_Contact,	  
						[Concern SE] = tSE.Person_Contact,	  
						[Concern ZCE] = tZCE.Person_Contact,	
                        Vendor = REPLACE(REPLACE(REPLACE(REPLACE(tVendor.List_Vendor, CHAR(13),''), CHAR(10),''), char(92), ''), char(39), ''),
                        Physical_Component = dbo.get_Physical_Component(tbl_ProjectWork.ProjectWork_Id, ProjectWork_Project_Id)                        
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join tbl_ProjectType on ProjectType_Id = ProjectWork_ProjectType_Id
					left join tbl_Program on Program_Id = ProjectWork_Is_Phase_1
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkFundingPattern_ProjectWorkId, 
							Central_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 1 then ProjectWorkFundingPattern_Value else 0 end), 
							State_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 2 then ProjectWorkFundingPattern_Value else 0 end), 
							ULB_Share = max(case when ProjectWorkFundingPattern_FundingPatternId = 3 then ProjectWorkFundingPattern_Value else 0 end) 
						from tbl_ProjectWorkFundingPattern 
						where ProjectWorkFundingPattern_Status = 1 
						group by ProjectWorkFundingPattern_ProjectWorkId
					) Funding on Funding.ProjectWorkFundingPattern_ProjectWorkId = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
							GO_CentralShare_1 = max(case when rrGO = 1 then GO_CentralShare else null end),
							GO_StateShare_1 = max(case when rrGO = 1 then GO_StateShare else null end),
							GO_No_Date_1 = max(case when rrGO = 1 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_1 = max(case when rrGO = 1 then ProjectWorkGO_Centage else null end),
							GO_CentralShare_2 = max(case when rrGO = 2 then GO_CentralShare else null end),
							GO_StateShare_2 = max(case when rrGO = 2 then GO_StateShare else null end),
							GO_No_Date_2 = max(case when rrGO = 2 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_2 = max(case when rrGO = 2 then ProjectWorkGO_Centage else null end),
							GO_CentralShare_3 = max(case when rrGO = 3 then GO_CentralShare else null end),
							GO_StateShare_3 = max(case when rrGO = 3 then GO_StateShare else null end),
							GO_No_Date_3 = max(case when rrGO = 3 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_Centage_3 = max(case when rrGO = 3 then ProjectWorkGO_Centage else null end), 
		                    GO_CentralShare = sum(GO_CentralShare),
		                    GO_StateShare = sum(GO_StateShare), 
		                    GO_Centage = sum(ProjectWorkGO_Centage)
						from 
						(
							select 
								ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
								ProjectWorkGO_Work_Id, 
								GO_CentralShare  = convert(decimal(18, 2), ProjectWorkGO_CentralShare / 100000), 
								GO_StateShare = convert(decimal(18, 2), ProjectWorkGO_StateShare / 100000), 
								ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
								ProjectWorkGO_GO_Number,
								ProjectWorkGO_Centage = convert(decimal(18, 2), ProjectWorkGO_Centage / 100000) 
							from tbl_ProjectWorkGO 
							where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'S'
						) tGO_Release 
						group by ProjectWorkGO_Work_Id
					) tGO_Release on tGO_Release.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
						select 
							ProjectWorkGO_Work_Id, 
		                    GO_ULBShare = sum(GO_ULBShare),
							GO_ULBShare_1 = max(case when rrGO = 1 then GO_ULBShare else null end),
							GO_ULB_No_Date_1 = max(case when rrGO = 1 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_2 = max(case when rrGO = 2 then GO_ULBShare else null end),
							GO_ULB_No_Date_2 = max(case when rrGO = 2 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_3 = max(case when rrGO = 3 then GO_ULBShare else null end), 
							GO_ULB_No_Date_3 = max(case when rrGO = 3 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end), 
							GO_ULBShare_4 = max(case when rrGO = 4 then GO_ULBShare else null end),
							GO_ULB_No_Date_4 = max(case when rrGO = 4 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_5 = max(case when rrGO = 5 then GO_ULBShare else null end),
							GO_ULB_No_Date_5 = max(case when rrGO = 5 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end),
							GO_ULBShare_6 = max(case when rrGO = 6 then GO_ULBShare else null end), 
							GO_ULB_No_Date_6 = max(case when rrGO = 6 then ProjectWorkGO_GO_Date + ', GO No: ' + ProjectWorkGO_GO_Number else null end)
						from 
						(
							select 
								ROW_NUMBER() over (partition by ProjectWorkGO_Work_Id order by ProjectWorkGO_Id) rrGO, 
								ProjectWorkGO_Work_Id, 
								GO_ULBShare = convert(decimal(18, 2), ProjectWorkGO_ULBShare / 100000), 
								ProjectWorkGO_GO_Date = convert(char(10), ProjectWorkGO_GO_Date, 103), 
								ProjectWorkGO_GO_Number
							from tbl_ProjectWorkGO 
							where ProjectWorkGO_Status = 1 and ProjectWorkGO_EntryType= 'U'
						) tGO_Release 
						group by ProjectWorkGO_Work_Id
					) tGO_ReleaseULB on tGO_ReleaseULB.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType='Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1)
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
	                        ProjectWorkIssueDetails_WorkId, 
	                        Issue_1 = max(case when rr = 1 then ProjectIssue_Name else null end),
                            SubIssue_1 = max(case when rr = 1 then Dependency_Name else null end),
	                        Issue_Id_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Comments else null end),

	                        Issue_2 = max(case when rr = 2 then ProjectIssue_Name else null end),
                            SubIssue_2 = max(case when rr = 2 then Dependency_Name else null end),
                            Issue_Id_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Comments else null end),

	                        Issue_3 = max(case when rr = 3 then ProjectIssue_Name else null end),
                            SubIssue_3 = max(case when rr = 3 then Dependency_Name else null end),
                            Issue_Id_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Comments else null end)
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWorkIssueDetails_WorkId order by ProjectWorkIssueDetails_Id desc) rr,
		                        ProjectWorkIssueDetails_Issue_Id,
		                        ProjectWorkIssueDetails_Category,
		                        ProjectWorkIssueDetails_Dependency_Id,
		                        ProjectWorkIssueDetails_Date = convert(char(10), ProjectWorkIssueDetails_Date, 103),
		                        ProjectWorkIssueDetails_Comments = REPLACE(REPLACE(ProjectWorkIssueDetails_Comments, CHAR(13),''), CHAR(10),''),
		                        ProjectWorkIssueDetails_WorkId, 
		                        Dependency_Name = REPLACE(REPLACE(Dependency_Name, CHAR(13),''), CHAR(10),''), 
		                        ProjectIssue_Name = REPLACE(REPLACE(ProjectIssue_Name, CHAR(13),''), CHAR(10),'')
	                        from tbl_ProjectWorkIssueDetails 
	                        left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id
	                        left join tbl_Dependency on Dependency_Id = ProjectWorkIssueDetails_Dependency_Id
	                        where ProjectWorkIssueDetails_Status = 1 and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0
                        ) tIssue where rr < 4
                        group by ProjectWorkIssueDetails_WorkId
                    ) tIssue on tIssue.ProjectWorkIssueDetails_WorkId = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target, 
                            ProjectWorkFinancialTarget_TargetMonth, 
							Target_Month_Year = convert(varchar, ProjectWorkFinancialTarget_Month) + '-' + convert(varchar, ProjectWorkFinancialTarget_Year), 
							Target_Month_Year1 = convert(varchar, [dbo].[DaysInMonth](RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2), convert(varchar, ProjectWorkFinancialTarget_Year))) + '/' + RIGHT('00'+CAST(convert(varchar, ProjectWorkFinancialTarget_Month) AS VARCHAR(2)),2) + '/' + convert(varchar, ProjectWorkFinancialTarget_Year) 
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_DivisionId order by Person_Id desc) rrP,
							PersonJuridiction_DivisionId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (4, 9, 1056)
					) tEx on tEx.PersonJuridiction_DivisionId = ProjectWork_DivisionId and tEx.rrP = 1
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_CircleId order by Person_Id desc) rrP,
							PersonJuridiction_CircleId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (1035, 1040)
					) tSE on tSE.PersonJuridiction_CircleId = Division_CircleId and tSE.rrP = 1
					left join 
					(
						select 
							ROW_NUMBER() over (partition by PersonJuridiction_ZoneId order by Person_Id desc) rrP,
							PersonJuridiction_ZoneId, 
							Person_Name, 
							Person_Mobile1, 
							Person_Contact = (isnull(Person_Name, '') + ', ' + isnull(Person_Mobile1, ''))
						from tbl_PersonDetail
						join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id
						join tbl_Designation on Designation_Id = PersonJuridiction_DesignationId
						where Person_Status = 1 and PersonJuridiction_DesignationId in (1042, 1044)
					) tZCE on tZCE.PersonJuridiction_ZoneId = Circle_ZoneId and tZCE.rrP = 1
                    left join
					(
						SELECT	
							ProjectWorkPkg_Work_Id,
							STUFF((SELECT ', ' + CAST(isnull(Person_Name, '') + ', Mob: ' + isnull(Person_Mobile1, '') AS VARCHAR(3000)) [text()]
							from tbl_ProjectWorkPkg
							join tbl_PersonDetail on Person_Id = ProjectWorkPkg_Vendor_Id
							WHERE tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id = t.ProjectWorkPkg_Work_Id and ProjectWorkPkg_Status = 1
							FOR XML PATH(''), TYPE)
							.value('.','NVARCHAR(MAX)'),1,2,' ') as List_Vendor
						FROM tbl_ProjectWorkPkg t
						join tbl_PersonDetail t1 on t1.Person_Id = t.ProjectWorkPkg_Vendor_Id
						where t.ProjectWorkPkg_Status = 1
						GROUP BY ProjectWorkPkg_Work_Id
					) tVendor on tVendor.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    where tbl_ProjectWork.ProjectWork_Status = 1  ";
        strQuery = strQuery.Replace("FPCond", FP);
        if (Scheme_Id != "")
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_Project_Id in (" + Scheme_Id + ")";
        }

        if (District_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DivisionId = '" + Division_Id + "'";
        }
        strQuery += " order by Project_Name, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode, tbl_ProjectWork.ProjectWork_Name";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Division Physical Target
    public DataSet get_tbl_DivisionPhysicalTarget(int Year, int Zone_Id, int Circle_Id, int Division_Id, string Order_By)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Name, 
                        Circle_Name, 
	                    Division_Name,
                        Zone_Id, 
                        Circle_Id,
	                    Division_Id,
	                    DivisionPhysicalTarget_Id,
	                    DivisionPhysicalTarget_DivisionId,
	                    DivisionPhysicalTarget_Year,
	                    DivisionPhysicalTarget_PhysicalCompletionTarget,
	                    DivisionPhysicalTarget_PhysicalCompletionAchivment,
                        PhysicalCompletionAchivment_Per = case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end,
	                    DivisionPhysicalTarget_PhysicalHandoverTarget,
	                    DivisionPhysicalTarget_PhysicalHandoverAchivment,
                        PhysicalHandoverAchivment_Per = case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end,
	                    DivisionPhysicalTarget_FinancialHandoverTarget,
	                    DivisionPhysicalTarget_FinancialHandoverAchivment, 
                        FinancialHandoverAchivment_Per = case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end
                    from tbl_Division 
                    join tbl_Circle on Circle_Id = Division_CircleId                     
                    join tbl_Zone on Zone_Id = Circle_ZoneId                     
                    left join 
                    (
                        select 
		                    ROW_NUMBER() over (partition by DivisionPhysicalTarget_Year, DivisionPhysicalTarget_DivisionId order by DivisionPhysicalTarget_Id desc) rr,
		                    DivisionPhysicalTarget_Id,
		                    DivisionPhysicalTarget_DivisionId,
		                    DivisionPhysicalTarget_Year,
		                    DivisionPhysicalTarget_PhysicalCompletionTarget,
		                    DivisionPhysicalTarget_PhysicalCompletionAchivment,
		                    DivisionPhysicalTarget_PhysicalHandoverTarget,
		                    DivisionPhysicalTarget_PhysicalHandoverAchivment,
		                    DivisionPhysicalTarget_FinancialHandoverTarget,
		                    DivisionPhysicalTarget_FinancialHandoverAchivment
                        from tbl_DivisionPhysicalTarget
                        where DivisionPhysicalTarget_Status = 1 and DivisionPhysicalTarget_Year = YearCondition  
                    ) tbl_DivisionPhysicalTarget on Division_Id = DivisionPhysicalTarget_DivisionId   
                    where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond ";
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Zone_Id = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", " ");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Circle_Id = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", " ");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and Division_Id = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", " ");
        }
        strQuery = strQuery.Replace("YearCondition", Year.ToString());
        if (Order_By == "Unit")
        {
            strQuery += " order by replace(Division_Name, 'UNIT - ', '')";
        }
        else if (Order_By == "Physical")
        {
            strQuery += " order by case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end desc ";
        }
        else if (Order_By == "Handover")
        {
            strQuery += " order by case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end desc ";
        }
        else if (Order_By == "Financial")
        {
            strQuery += " order by case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end desc ";
        }
        else
        {
            strQuery += " order by replace(Division_Name, 'UNIT - ', '')";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_DivisionPhysicalTarget(List<tbl_DivisionPhysicalTarget> obj_tbl_DivisionPhysicalTarget_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                for (int i = 0; i < obj_tbl_DivisionPhysicalTarget_Li.Count; i++)
                {
                    Update_tbl_DivisionPhysicalTarget(obj_tbl_DivisionPhysicalTarget_Li[i], trans, cn);
                    Insert_tbl_DivisionPhysicalTarget(obj_tbl_DivisionPhysicalTarget_Li[i], trans, cn);
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_DivisionPhysicalTarget(tbl_DivisionPhysicalTarget obj_tbl_DivisionPhysicalTarget, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_DivisionPhysicalTarget ( [DivisionPhysicalTarget_AddedBy],[DivisionPhysicalTarget_AddedOn],[DivisionPhysicalTarget_DivisionId],[DivisionPhysicalTarget_FinancialHandoverAchivment],[DivisionPhysicalTarget_FinancialHandoverTarget],[DivisionPhysicalTarget_PhysicalCompletionAchivment],[DivisionPhysicalTarget_PhysicalCompletionTarget],[DivisionPhysicalTarget_PhysicalHandoverAchivment],[DivisionPhysicalTarget_PhysicalHandoverTarget],[DivisionPhysicalTarget_Status],[DivisionPhysicalTarget_Year] ) values ('" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_AddedBy + "', getdate(), '" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_DivisionId + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_FinancialHandoverAchivment + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_FinancialHandoverTarget + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_PhysicalCompletionAchivment + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_PhysicalCompletionTarget + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_PhysicalHandoverAchivment + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_PhysicalHandoverTarget + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_Status + "','" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_Year + "');Select @@Identity";


        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_DivisionPhysicalTarget(tbl_DivisionPhysicalTarget obj_tbl_DivisionPhysicalTarget, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_DivisionPhysicalTarget set  DivisionPhysicalTarget_Status = 0, DivisionPhysicalTarget_ModifiedOn = getDate(), DivisionPhysicalTarget_ModifiedBy = '" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_AddedBy + "' where DivisionPhysicalTarget_Year = '" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_Year + "' and DivisionPhysicalTarget_DivisionId = '" + obj_tbl_DivisionPhysicalTarget.DivisionPhysicalTarget_DivisionId + "' and DivisionPhysicalTarget_Status = 1 ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public DataSet get_tbl_PhysicalTargetDashboardView(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        if (Zone_Id == 0 && Circle_Id == 0 && Division_Id == 0)
        {//Group By Zone
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
	                        Zone_Id, 
                            Circle_Name = '', 
                            Circle_Id = '', 
                            Division_Name = '',
                            Division_Id = '',
	                        DivisionPhysicalTarget_Year = max(DivisionPhysicalTarget_Year),
	                        DivisionPhysicalTarget_PhysicalCompletionTarget = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalCompletionAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0)),
                            PhysicalCompletionAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end),
	                        DivisionPhysicalTarget_PhysicalHandoverTarget = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalHandoverAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0)),
                            PhysicalHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end),
	                        DivisionPhysicalTarget_FinancialHandoverTarget = sum(isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0)),
	                        DivisionPhysicalTarget_FinancialHandoverAchivment = sum(isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0)), 
                            FinancialHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionPhysicalTarget_DivisionId order by DivisionPhysicalTarget_Id desc) rr,
		                        DivisionPhysicalTarget_Id,
		                        DivisionPhysicalTarget_DivisionId,
		                        DivisionPhysicalTarget_Year,
		                        DivisionPhysicalTarget_PhysicalCompletionTarget,
		                        DivisionPhysicalTarget_PhysicalCompletionAchivment,
		                        DivisionPhysicalTarget_PhysicalHandoverTarget,
		                        DivisionPhysicalTarget_PhysicalHandoverAchivment,
		                        DivisionPhysicalTarget_FinancialHandoverTarget,
		                        DivisionPhysicalTarget_FinancialHandoverAchivment
                            from tbl_DivisionPhysicalTarget
                            where DivisionPhysicalTarget_Status = 1  
                        ) tbl_DivisionPhysicalTarget on Division_Id = DivisionPhysicalTarget_DivisionId and tbl_DivisionPhysicalTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Zone_Id 
                        order by Zone_Name ";
        }
        else if (Zone_Id > 0 && Circle_Id == 0 && Division_Id == 0)
        {//Group By Circle
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
	                        Zone_Id, 
                            Circle_Name = '', 
                            Circle_Id = '', 
                            Division_Name = '',
                            Division_Id = '',
	                        DivisionPhysicalTarget_Year = max(DivisionPhysicalTarget_Year),
	                        DivisionPhysicalTarget_PhysicalCompletionTarget = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalCompletionAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0)),
                            PhysicalCompletionAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end),
	                        DivisionPhysicalTarget_PhysicalHandoverTarget = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalHandoverAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0)),
                            PhysicalHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end),
	                        DivisionPhysicalTarget_FinancialHandoverTarget = sum(isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0)),
	                        DivisionPhysicalTarget_FinancialHandoverAchivment = sum(isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0)), 
                            FinancialHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionPhysicalTarget_DivisionId order by DivisionPhysicalTarget_Id desc) rr,
		                        DivisionPhysicalTarget_Id,
		                        DivisionPhysicalTarget_DivisionId,
		                        DivisionPhysicalTarget_Year,
		                        DivisionPhysicalTarget_PhysicalCompletionTarget,
		                        DivisionPhysicalTarget_PhysicalCompletionAchivment,
		                        DivisionPhysicalTarget_PhysicalHandoverTarget,
		                        DivisionPhysicalTarget_PhysicalHandoverAchivment,
		                        DivisionPhysicalTarget_FinancialHandoverTarget,
		                        DivisionPhysicalTarget_FinancialHandoverAchivment
                            from tbl_DivisionPhysicalTarget
                            where DivisionPhysicalTarget_Status = 1  
                        ) tbl_DivisionPhysicalTarget on Division_Id = DivisionPhysicalTarget_DivisionId and tbl_DivisionPhysicalTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Zone_Id 
                        order by Zone_Name ";
        }
        else if (Zone_Id > 0 && Circle_Id > 0 && Division_Id == 0)
        {//Group By Division
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Circle_Name, 
	                        Zone_Id, 
                            Circle_Id,
                            Division_Name = '',
                            Division_Id = '',
	                        DivisionPhysicalTarget_Year = max(DivisionPhysicalTarget_Year),
	                        DivisionPhysicalTarget_PhysicalCompletionTarget = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalCompletionAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0)),
                            PhysicalCompletionAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end),
	                        DivisionPhysicalTarget_PhysicalHandoverTarget = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0)),
	                        DivisionPhysicalTarget_PhysicalHandoverAchivment = sum(isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0)),
                            PhysicalHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end),
	                        DivisionPhysicalTarget_FinancialHandoverTarget = sum(isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0)),
	                        DivisionPhysicalTarget_FinancialHandoverAchivment = sum(isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0)), 
                            FinancialHandoverAchivment_Per = sum(case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionPhysicalTarget_DivisionId order by DivisionPhysicalTarget_Id desc) rr,
		                        DivisionPhysicalTarget_Id,
		                        DivisionPhysicalTarget_DivisionId,
		                        DivisionPhysicalTarget_Year,
		                        DivisionPhysicalTarget_PhysicalCompletionTarget,
		                        DivisionPhysicalTarget_PhysicalCompletionAchivment,
		                        DivisionPhysicalTarget_PhysicalHandoverTarget,
		                        DivisionPhysicalTarget_PhysicalHandoverAchivment,
		                        DivisionPhysicalTarget_FinancialHandoverTarget,
		                        DivisionPhysicalTarget_FinancialHandoverAchivment
                            from tbl_DivisionPhysicalTarget
                            where DivisionPhysicalTarget_Status = 1  
                        ) tbl_DivisionPhysicalTarget on Division_Id = DivisionPhysicalTarget_DivisionId and tbl_DivisionPhysicalTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Circle_Name, Zone_Id, Circle_Id
                        order by Zone_Name, Circle_Name ";
        }
        else
        {
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Circle_Name, 
	                        Division_Name,
                            Zone_Id, 
                            Circle_Id,
	                        Division_Id,
	                        DivisionPhysicalTarget_Id,
	                        DivisionPhysicalTarget_DivisionId,
	                        DivisionPhysicalTarget_Year,
	                        DivisionPhysicalTarget_PhysicalCompletionTarget,
	                        DivisionPhysicalTarget_PhysicalCompletionAchivment,
                            PhysicalCompletionAchivment_Per = case when isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalCompletionAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalCompletionTarget, 0))) end,
	                        DivisionPhysicalTarget_PhysicalHandoverTarget,
	                        DivisionPhysicalTarget_PhysicalHandoverAchivment,
                            PhysicalHandoverAchivment_Per = case when isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_PhysicalHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_PhysicalHandoverTarget, 0))) end,
	                        DivisionPhysicalTarget_FinancialHandoverTarget,
	                        DivisionPhysicalTarget_FinancialHandoverAchivment, 
                            FinancialHandoverAchivment_Per = case when isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionPhysicalTarget_FinancialHandoverAchivment, 0) * 100/ isnull(DivisionPhysicalTarget_FinancialHandoverTarget, 0))) end
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionPhysicalTarget_DivisionId order by DivisionPhysicalTarget_Id desc) rr,
		                        DivisionPhysicalTarget_Id,
		                        DivisionPhysicalTarget_DivisionId,
		                        DivisionPhysicalTarget_Year,
		                        DivisionPhysicalTarget_PhysicalCompletionTarget,
		                        DivisionPhysicalTarget_PhysicalCompletionAchivment,
		                        DivisionPhysicalTarget_PhysicalHandoverTarget,
		                        DivisionPhysicalTarget_PhysicalHandoverAchivment,
		                        DivisionPhysicalTarget_FinancialHandoverTarget,
		                        DivisionPhysicalTarget_FinancialHandoverAchivment
                            from tbl_DivisionPhysicalTarget
                            where DivisionPhysicalTarget_Status = 1  
                        ) tbl_DivisionPhysicalTarget on Division_Id = DivisionPhysicalTarget_DivisionId and tbl_DivisionPhysicalTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        order by replace(Division_Name, 'UNIT - ', '') ";
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Zone_Id = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", " ");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Circle_Id = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", " ");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and Division_Id = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", " ");
        }
        
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Master Division Physical Target
    public DataSet get_tbl_DivisionFinancialTarget(int Year, int Zone_Id, int Circle_Id, int Division_Id, string Order_By)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        Zone_Name, 
                        Circle_Name, 
	                    Division_Name,
                        Zone_Id, 
                        Circle_Id,
	                    Division_Id,
	                    DivisionFinancialTarget_Id,
	                    DivisionFinancialTarget_DivisionId,
	                    DivisionFinancialTarget_Year,
		                DivisionFinancialTarget_YearTarget,
                        DivisionFinancialTarget_YearAchivment = isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0),
                        YearAchivment_Per = case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end, 
						DivisionFinancialTarget_Q1Target,
						DivisionFinancialTarget_Q1Achivment,
                        Q1Achivment_Per = case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end,
						DivisionFinancialTarget_Q2Target,
						DivisionFinancialTarget_Q2Achivment,
                        Q2Achivment_Per = case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end,
						DivisionFinancialTarget_Q3Target,
						DivisionFinancialTarget_Q3Achivment,
                        Q3Achivment_Per = case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end,
						DivisionFinancialTarget_Q4Target,
						DivisionFinancialTarget_Q4Achivment, 
                        Q4Achivment_Per = case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end
                    from tbl_Division 
                    join tbl_Circle on Circle_Id = Division_CircleId                     
                    join tbl_Zone on Zone_Id = Circle_ZoneId                     
                    left join 
                    (
                        select 
		                    ROW_NUMBER() over (partition by DivisionFinancialTarget_Year, DivisionFinancialTarget_DivisionId order by DivisionFinancialTarget_Id desc) rr,
		                    DivisionFinancialTarget_Id,
		                    DivisionFinancialTarget_DivisionId,
		                    DivisionFinancialTarget_Year,
		                    DivisionFinancialTarget_YearTarget,
							DivisionFinancialTarget_Q1Target,
							DivisionFinancialTarget_Q1Achivment,
							DivisionFinancialTarget_Q2Target,
							DivisionFinancialTarget_Q2Achivment,
							DivisionFinancialTarget_Q3Target,
							DivisionFinancialTarget_Q3Achivment,
							DivisionFinancialTarget_Q4Target,
							DivisionFinancialTarget_Q4Achivment
                        from tbl_DivisionFinancialTarget
                        where DivisionFinancialTarget_Status = 1 and DivisionFinancialTarget_Year = YearCondition  
                    ) tbl_DivisionFinancialTarget on Division_Id = DivisionFinancialTarget_DivisionId   
                    where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond ";
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Zone_Id = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", " ");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Circle_Id = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", " ");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and Division_Id = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", " ");
        }
        strQuery = strQuery.Replace("YearCondition", Year.ToString());
        if (Order_By == "Unit")
        {
            strQuery += " order by replace(Division_Name, 'UNIT - ', '')";
        }
        else if (Order_By == "YearAchivment")
        {
            strQuery += " order by case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end desc";
        }
        else if (Order_By == "Q1")
        {
            strQuery += " order by case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end desc";
        }
        else if (Order_By == "Q2")
        {
            strQuery += " order by case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end desc";
        }
        else if (Order_By == "Q3")
        {
            strQuery += " order by case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end desc";
        }
        else if (Order_By == "Q4")
        {
            strQuery += " order by case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end desc";
        }
        else
        {
            strQuery += " order by replace(Division_Name, 'UNIT - ', '')";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public bool Insert_tbl_DivisionFinancialTarget(List<tbl_DivisionFinancialTarget> obj_tbl_DivisionFinancialTarget_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                for (int i = 0; i < obj_tbl_DivisionFinancialTarget_Li.Count; i++)
                {
                    Update_tbl_DivisionFinancialTarget(obj_tbl_DivisionFinancialTarget_Li[i], trans, cn);
                    Insert_tbl_DivisionFinancialTarget(obj_tbl_DivisionFinancialTarget_Li[i], trans, cn);
                }

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    private string Insert_tbl_DivisionFinancialTarget(tbl_DivisionFinancialTarget obj_tbl_DivisionFinancialTarget, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_DivisionFinancialTarget ( [DivisionFinancialTarget_AddedBy],[DivisionFinancialTarget_AddedOn],[DivisionFinancialTarget_DivisionId],[DivisionFinancialTarget_Q1Achivment],[DivisionFinancialTarget_Q1Target],[DivisionFinancialTarget_Q2Achivment],[DivisionFinancialTarget_Q2Target],[DivisionFinancialTarget_Q3Achivment],[DivisionFinancialTarget_Q3Target],[DivisionFinancialTarget_Q4Achivment],[DivisionFinancialTarget_Q4Target],[DivisionFinancialTarget_Status],[DivisionFinancialTarget_Year],[DivisionFinancialTarget_YearTarget] ) values ('" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_AddedBy + "',getdate(), '" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_DivisionId + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q1Achivment + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q1Target + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q2Achivment + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q2Target + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q3Achivment + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q3Target + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q4Achivment + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Q4Target + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Status + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Year + "','" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_YearTarget + "');Select @@Identity";


        if (trans == null)
        {
            return ExecuteSelectQuery(strQuery).Tables[0].Rows[0][0].ToString();
        }
        else
        {
            return ExecuteSelectQuerywithTransaction(cn, strQuery, trans).Tables[0].Rows[0][0].ToString();
        }
    }

    private void Update_tbl_DivisionFinancialTarget(tbl_DivisionFinancialTarget obj_tbl_DivisionFinancialTarget, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; Update  tbl_DivisionFinancialTarget set  DivisionFinancialTarget_Status = 0, DivisionFinancialTarget_ModifiedOn = getDate(), DivisionFinancialTarget_ModifiedBy = '" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_AddedBy + "' where DivisionFinancialTarget_Year = '" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_Year + "' and DivisionFinancialTarget_DivisionId = '" + obj_tbl_DivisionFinancialTarget.DivisionFinancialTarget_DivisionId + "' and DivisionFinancialTarget_Status = 1 ";
        if (trans == null)
        {
            ExecuteSelectQuery(strQuery);
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    public DataSet get_tbl_FinancialTarget_DashboardView(int Zone_Id, int Circle_Id, int Division_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        if (Zone_Id == 0 && Circle_Id == 0 && Division_Id == 0)
        {//Group By Zone
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Zone_Id, 
                            Circle_Name = '', 
                            Circle_Id = '', 
                            Division_Name = '',
                            Division_Id = '',
                            DivisionFinancialTarget_Year = max(DivisionFinancialTarget_Year),
		                    DivisionFinancialTarget_YearTarget = sum(isnull(DivisionFinancialTarget_YearTarget, 0)),
                            DivisionFinancialTarget_YearAchivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)),
                            YearAchivment_Per = sum(case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end), 
						    DivisionFinancialTarget_Q1Target = sum(isnull(DivisionFinancialTarget_Q1Target, 0)),
						    DivisionFinancialTarget_Q1Achivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0)),
                            Q1Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end),
						    DivisionFinancialTarget_Q2Target = sum(isnull(DivisionFinancialTarget_Q2Target, 0)),
						    DivisionFinancialTarget_Q2Achivment = sum(isnull(DivisionFinancialTarget_Q2Achivment, 0)),
                            Q2Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end),
						    DivisionFinancialTarget_Q3Target = sum(isnull(DivisionFinancialTarget_Q3Target, 0)),
						    DivisionFinancialTarget_Q3Achivment = sum(isnull(DivisionFinancialTarget_Q3Achivment, 0)),
                            Q3Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end),
						    DivisionFinancialTarget_Q4Target = sum(isnull(DivisionFinancialTarget_Q4Target, 0)),
						    DivisionFinancialTarget_Q4Achivment = sum(isnull(DivisionFinancialTarget_Q4Achivment, 0)), 
                            Q4Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 0), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionFinancialTarget_DivisionId order by DivisionFinancialTarget_Id desc) rr,
		                        DivisionFinancialTarget_Id,
		                        DivisionFinancialTarget_DivisionId,
		                        DivisionFinancialTarget_Year,
		                        DivisionFinancialTarget_YearTarget,
							    DivisionFinancialTarget_Q1Target,
							    DivisionFinancialTarget_Q1Achivment,
							    DivisionFinancialTarget_Q2Target,
							    DivisionFinancialTarget_Q2Achivment,
							    DivisionFinancialTarget_Q3Target,
							    DivisionFinancialTarget_Q3Achivment,
							    DivisionFinancialTarget_Q4Target,
							    DivisionFinancialTarget_Q4Achivment
                            from tbl_DivisionFinancialTarget
                            where DivisionFinancialTarget_Status = 1  
                        ) tbl_DivisionFinancialTarget on Division_Id = DivisionFinancialTarget_DivisionId and tbl_DivisionFinancialTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Zone_Id
                        order by Zone_Name ";
        }
        else if (Zone_Id > 0 && Circle_Id == 0 && Division_Id == 0)
        {//Group By Circle
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Zone_Id, 
                            Circle_Name = '', 
                            Circle_Id = '', 
                            Division_Name = '',
                            Division_Id = '',
                            DivisionFinancialTarget_Year = max(DivisionFinancialTarget_Year),
		                    DivisionFinancialTarget_YearTarget = sum(isnull(DivisionFinancialTarget_YearTarget, 0)),
                            DivisionFinancialTarget_YearAchivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)),
                            YearAchivment_Per = sum(case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end), 
						    DivisionFinancialTarget_Q1Target = sum(isnull(DivisionFinancialTarget_Q1Target, 0)),
						    DivisionFinancialTarget_Q1Achivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0)),
                            Q1Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end),
						    DivisionFinancialTarget_Q2Target = sum(isnull(DivisionFinancialTarget_Q2Target, 0)),
						    DivisionFinancialTarget_Q2Achivment = sum(isnull(DivisionFinancialTarget_Q2Achivment, 0)),
                            Q2Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end),
						    DivisionFinancialTarget_Q3Target = sum(isnull(DivisionFinancialTarget_Q3Target, 0)),
						    DivisionFinancialTarget_Q3Achivment = sum(isnull(DivisionFinancialTarget_Q3Achivment, 0)),
                            Q3Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end),
						    DivisionFinancialTarget_Q4Target = sum(isnull(DivisionFinancialTarget_Q4Target, 0)),
						    DivisionFinancialTarget_Q4Achivment = sum(isnull(DivisionFinancialTarget_Q4Achivment, 0)), 
                            Q4Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionFinancialTarget_DivisionId order by DivisionFinancialTarget_Id desc) rr,
		                        DivisionFinancialTarget_Id,
		                        DivisionFinancialTarget_DivisionId,
		                        DivisionFinancialTarget_Year,
		                        DivisionFinancialTarget_YearTarget,
							    DivisionFinancialTarget_Q1Target,
							    DivisionFinancialTarget_Q1Achivment,
							    DivisionFinancialTarget_Q2Target,
							    DivisionFinancialTarget_Q2Achivment,
							    DivisionFinancialTarget_Q3Target,
							    DivisionFinancialTarget_Q3Achivment,
							    DivisionFinancialTarget_Q4Target,
							    DivisionFinancialTarget_Q4Achivment
                            from tbl_DivisionFinancialTarget
                            where DivisionFinancialTarget_Status = 1  
                        ) tbl_DivisionFinancialTarget on Division_Id = DivisionFinancialTarget_DivisionId and tbl_DivisionFinancialTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Zone_Id
                        order by Zone_Name ";
        }
        else if (Zone_Id > 0 && Circle_Id > 0 && Division_Id == 0)
        {//Group By Division
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Circle_Name, 
	                        Zone_Id, 
                            Circle_Id,
                            Division_Name = '',
                            Division_Id = '',
	                        DivisionFinancialTarget_Year = max(DivisionFinancialTarget_Year),
		                    DivisionFinancialTarget_YearTarget = sum(isnull(DivisionFinancialTarget_YearTarget, 0)),
                            DivisionFinancialTarget_YearAchivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)),
                            YearAchivment_Per = sum(case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end), 
						    DivisionFinancialTarget_Q1Target = sum(isnull(DivisionFinancialTarget_Q1Target, 0)),
						    DivisionFinancialTarget_Q1Achivment = sum(isnull(DivisionFinancialTarget_Q1Achivment, 0)),
                            Q1Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end),
						    DivisionFinancialTarget_Q2Target = sum(isnull(DivisionFinancialTarget_Q2Target, 0)),
						    DivisionFinancialTarget_Q2Achivment = sum(isnull(DivisionFinancialTarget_Q2Achivment, 0)),
                            Q2Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end),
						    DivisionFinancialTarget_Q3Target = sum(isnull(DivisionFinancialTarget_Q3Target, 0)),
						    DivisionFinancialTarget_Q3Achivment = sum(isnull(DivisionFinancialTarget_Q3Achivment, 0)),
                            Q3Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end),
						    DivisionFinancialTarget_Q4Target = sum(isnull(DivisionFinancialTarget_Q4Target, 0)),
						    DivisionFinancialTarget_Q4Achivment = sum(isnull(DivisionFinancialTarget_Q4Achivment, 0)), 
                            Q4Achivment_Per = sum(case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end)
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionFinancialTarget_DivisionId order by DivisionFinancialTarget_Id desc) rr,
		                        DivisionFinancialTarget_Id,
		                        DivisionFinancialTarget_DivisionId,
		                        DivisionFinancialTarget_Year,
		                        DivisionFinancialTarget_YearTarget,
							    DivisionFinancialTarget_Q1Target,
							    DivisionFinancialTarget_Q1Achivment,
							    DivisionFinancialTarget_Q2Target,
							    DivisionFinancialTarget_Q2Achivment,
							    DivisionFinancialTarget_Q3Target,
							    DivisionFinancialTarget_Q3Achivment,
							    DivisionFinancialTarget_Q4Target,
							    DivisionFinancialTarget_Q4Achivment
                            from tbl_DivisionFinancialTarget
                            where DivisionFinancialTarget_Status = 1  
                        ) tbl_DivisionFinancialTarget on Division_Id = DivisionFinancialTarget_DivisionId and tbl_DivisionFinancialTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        group by Zone_Name, Circle_Name, Zone_Id, Circle_Id
                        order by Zone_Name, Circle_Name ";
        }
        else
        {
            strQuery = @"set dateformat dmy; 
                        select 
                            Zone_Name, 
                            Circle_Name, 
	                        Division_Name,
                            Zone_Id, 
                            Circle_Id,
	                        Division_Id,
	                        DivisionFinancialTarget_Id,
	                        DivisionFinancialTarget_DivisionId,
	                        DivisionFinancialTarget_Year,
		                    DivisionFinancialTarget_YearTarget,
                            DivisionFinancialTarget_YearAchivment = isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0),
                            YearAchivment_Per = case when isnull(DivisionFinancialTarget_YearTarget, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) + isnull(DivisionFinancialTarget_Q2Achivment, 0) + isnull(DivisionFinancialTarget_Q3Achivment, 0) + isnull(DivisionFinancialTarget_Q4Achivment, 0)) * 100 / isnull(DivisionFinancialTarget_YearTarget, 0)) end, 
						    DivisionFinancialTarget_Q1Target,
						    DivisionFinancialTarget_Q1Achivment,
                            Q1Achivment_Per = case when isnull(DivisionFinancialTarget_Q1Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q1Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q1Target, 0))) end,
						    DivisionFinancialTarget_Q2Target,
						    DivisionFinancialTarget_Q2Achivment,
                            Q2Achivment_Per = case when isnull(DivisionFinancialTarget_Q2Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q2Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q2Target, 0))) end,
						    DivisionFinancialTarget_Q3Target,
						    DivisionFinancialTarget_Q3Achivment,
                            Q3Achivment_Per = case when isnull(DivisionFinancialTarget_Q3Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q3Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q3Target, 0))) end,
						    DivisionFinancialTarget_Q4Target,
						    DivisionFinancialTarget_Q4Achivment, 
                            Q4Achivment_Per = case when isnull(DivisionFinancialTarget_Q4Target, 0) = 0 then 0 else convert(decimal(18, 2), (isnull(DivisionFinancialTarget_Q4Achivment, 0) * 100 / isnull(DivisionFinancialTarget_Q4Target, 0))) end
                        from tbl_Division 
                        join tbl_Circle on Circle_Id = Division_CircleId                     
                        join tbl_Zone on Zone_Id = Circle_ZoneId                     
                        left join 
                        (
                            select 
		                        ROW_NUMBER() over (partition by DivisionFinancialTarget_DivisionId order by DivisionFinancialTarget_Id desc) rr,
		                        DivisionFinancialTarget_Id,
		                        DivisionFinancialTarget_DivisionId,
		                        DivisionFinancialTarget_Year,
		                        DivisionFinancialTarget_YearTarget,
							    DivisionFinancialTarget_Q1Target,
							    DivisionFinancialTarget_Q1Achivment,
							    DivisionFinancialTarget_Q2Target,
							    DivisionFinancialTarget_Q2Achivment,
							    DivisionFinancialTarget_Q3Target,
							    DivisionFinancialTarget_Q3Achivment,
							    DivisionFinancialTarget_Q4Target,
							    DivisionFinancialTarget_Q4Achivment
                            from tbl_DivisionFinancialTarget
                            where DivisionFinancialTarget_Status = 1  
                        ) tbl_DivisionFinancialTarget on Division_Id = DivisionFinancialTarget_DivisionId and tbl_DivisionFinancialTarget.rr = 1  
                        where Division_Status = 1 and Circle_Status = 1 and Zone_Status = 1 Zone_IdCond Circle_IdCond Division_IdCond 
                        order by replace(Division_Name, 'UNIT - ', '') ";
        }
        if (Zone_Id != 0)
        {
            strQuery = strQuery.Replace("Zone_IdCond", " and Zone_Id = '" + Zone_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Zone_IdCond", " ");
        }
        if (Circle_Id != 0)
        {
            strQuery = strQuery.Replace("Circle_IdCond", " and Circle_Id = '" + Circle_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Circle_IdCond", " ");
        }
        if (Division_Id != 0)
        {
            strQuery = strQuery.Replace("Division_IdCond", " and Division_Id = '" + Division_Id + "'");
        }
        else
        {
            strQuery = strQuery.Replace("Division_IdCond", " ");
        }
        
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Update JalPrahari Details
    public bool Update_JalPrahari_Basic_Details(Bidders_Info obj_Bidders_Info)
    {
        string strQuery = "";
        bool rVal = false;
        strQuery = @"set dateformat dmy; 
                    update tbl_JalPrahariBidderInfo set JalPrahariBidderInfo_ModifiedBy = '" + obj_Bidders_Info.Added_By + "', JalPrahariBidderInfo_ModifiedOn = getdate(), JalPrahariBidderInfo_BidderName = '" + obj_Bidders_Info.Bidders_FirmName + "', JalPrahariBidderInfo_BidderPAN = '" + obj_Bidders_Info.Bidders_PAN + "', JalPrahariBidderInfo_GSTIN = '" + obj_Bidders_Info.Bidders_GSTIN + "' where JalPrahariBidderInfo_Id = '" + obj_Bidders_Info.JalPrahariBidderInfo_Id + "'";
        try
        {
            ExecuteSelectQuery(strQuery);
            rVal = true;
        }
        catch
        {
            rVal = false;
        }
        return rVal;
    }

    public bool Delete_tbl_JalPrahariBidder_Order(int JalPrahariBidder_Order_Id, int Person_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            string sql = "";
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                sql = "update tbl_JalPrahariBidder_Order set JalPrahariBidder_Order_Status = 0, JalPrahariBidder_Order_ModifiedBy = '" + Person_Id + "', JalPrahariBidder_Order_ModifiedOn = getdate() where JalPrahariBidder_Order_Id = '" + JalPrahariBidder_Order_Id + "' and JalPrahariBidder_Order_Status = 1";
                ExecuteSelectQuerywithTransaction(cn, sql, trans);

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    public bool Replace_tbl_JalPrahariBidder_Order_Doc(int JalPrahariBidder_Order_Id, int Person_Id, byte[] FileBytes, string FileExtention, string FileType)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            string sql = "";
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                if (FileType == "Order")
                {
                    if (FileBytes != null && FileBytes.Length > 0)
                    {
                        fileName = DateTime.Now.Ticks.ToString("x") + "." + FileExtention;
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari"))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari");
                        }
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString()))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString());
                        }
                        string JalPrahariBidder_Order_OrderPath = "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName, FileBytes);

                        sql = "update tbl_JalPrahariBidder_Order set JalPrahariBidder_Order_OrderPath = '" + JalPrahariBidder_Order_OrderPath + "' where JalPrahariBidder_Order_Id = '" + JalPrahariBidder_Order_Id + "' and JalPrahariBidder_Order_Status = 1";
                        ExecuteSelectQuerywithTransaction(cn, sql, trans);
                    }
                }
                if (FileType == "Verification")
                {
                    if (FileBytes != null && FileBytes.Length > 0)
                    {
                        fileName = DateTime.Now.Ticks.ToString("x") + "." + FileExtention;
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari"))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari");
                        }
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString()))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString());
                        }
                        string JalPrahariBidder_Order_VerificationPath = "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName, FileBytes);

                        sql = "update tbl_JalPrahariBidder_Order set JalPrahariBidder_Order_VerificationPath = '" + JalPrahariBidder_Order_VerificationPath + "' where JalPrahariBidder_Order_Id = '" + JalPrahariBidder_Order_Id + "' and JalPrahariBidder_Order_Status = 1";
                        ExecuteSelectQuerywithTransaction(cn, sql, trans);
                    }
                }
                if (FileType == "Letter")
                {
                    if (FileBytes != null && FileBytes.Length > 0)
                    {
                        fileName = DateTime.Now.Ticks.ToString("x") + "." + FileExtention;
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari"))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari");
                        }
                        if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString()))
                        {
                            Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString());
                        }
                        string JalPrahariBidder_Order_VerificationLetterPath = "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidder_Order_Id.ToString() + "\\" + fileName, FileBytes);

                        sql = "update tbl_JalPrahariBidder_Order set JalPrahariBidder_Order_VerificationLetterPath = '" + JalPrahariBidder_Order_VerificationLetterPath + "' where JalPrahariBidder_Order_Id = '" + JalPrahariBidder_Order_Id + "' and JalPrahariBidder_Order_Status = 1";
                        ExecuteSelectQuerywithTransaction(cn, sql, trans);
                    }
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    public bool Delete_tbl_JalPrahariBidderDoc(int JalPrahariBidderDoc_Id, int Person_Id)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            string sql = "";
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                sql = "update tbl_JalPrahariBidderDoc set JalPrahariBidderDoc_Status = 0, JalPrahariBidderDoc_ModifiedBy = '" + Person_Id + "', JalPrahariBidderDoc_ModifiedOn = getdate() where JalPrahariBidderDoc_Id = '" + JalPrahariBidderDoc_Id + "' and JalPrahariBidderDoc_Status = 1";
                ExecuteSelectQuerywithTransaction(cn, sql, trans);

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }

    public bool Replace_tbl_JalPrahariBidderDoc(int JalPrahariBidderDoc_Id, int Person_Id, byte[] FileBytes, string FileExtention)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            string sql = "";
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                string fileName = "";

                fileName = DateTime.Now.Ticks.ToString("x") + "." + FileExtention;
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari"))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari");
                }
                if (!Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidderDoc_Id.ToString()))
                {
                    Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidderDoc_Id.ToString());
                }
                string JalPrahariBidderDoc_Path = "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidderDoc_Id.ToString() + "\\" + fileName;
                File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\JalPrahari\\" + JalPrahariBidderDoc_Id.ToString() + "\\" + fileName, FileBytes);

                sql = "update tbl_JalPrahariBidderDoc set JalPrahariBidderDoc_Path = '" + JalPrahariBidderDoc_Path + "' where JalPrahariBidderDoc_Id = '" + JalPrahariBidderDoc_Id + "' and JalPrahariBidderDoc_Status = 1";
                ExecuteSelectQuerywithTransaction(cn, sql, trans);

                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    #endregion

    #region Jal Prahari Bidder Order
    public bool Insert_tbl_JalPrahariBidder_Order(List<tbl_ProjectDPR_Bidder_Order> obj_tbl_ProjectDPR_Bidder_Order_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Update_tbl_ProjectDPR_Bidder_Order(obj_tbl_ProjectDPR_Bidder_Order_Li[0].ProjectDPR_Bidder_Order_AddedBy, obj_tbl_ProjectDPR_Bidder_Order_Li[0].ProjectDPR_Bidder_Order_DPRBidder_Id, trans, cn);
                for (int i = 0; i < obj_tbl_ProjectDPR_Bidder_Order_Li.Count; i++)
                {
                    if (!Directory.Exists(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString()))
                    {
                        Directory.CreateDirectory(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString());
                    }

                    string fileName = "1_" + DateTime.Now.Ticks.ToString("x") + ".pdf";
                    if (obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_OrderBytes != null && obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_OrderBytes.Length > 0)
                    {
                        obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_OrderPath = "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName, obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_OrderBytes);
                    }

                    fileName = "2_" + DateTime.Now.Ticks.ToString("x") + ".pdf";
                    if (obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationByts != null && obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationByts.Length > 0)
                    {
                        obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationPath = "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName, obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationByts);
                    }

                    fileName = "3_" + DateTime.Now.Ticks.ToString("x") + ".pdf";
                    if (obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts != null && obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts.Length > 0)
                    {
                        obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterPath = "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName, obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts);
                    }

                    fileName = "4_" + DateTime.Now.Ticks.ToString("x") + ".pdf";
                    if (obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts1 != null && obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts1.Length > 0)
                    {
                        obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterPath1 = "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName, obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts1);
                    }

                    fileName = "5_" + DateTime.Now.Ticks.ToString("x") + ".pdf";
                    if (obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts2 != null && obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts2.Length > 0)
                    {
                        obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterPath2 = "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName;
                        File.WriteAllBytes(Server.MapPath(".") + "\\Downloads\\DPR\\" + obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_DPR_Id.ToString() + "\\" + fileName, obj_tbl_ProjectDPR_Bidder_Order_Li[i].ProjectDPR_Bidder_Order_VerificationLetterByts2);
                    }

                    Insert_tbl_JalPrahariBidder_Order(obj_tbl_ProjectDPR_Bidder_Order_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_JalPrahariBidder_Order(tbl_ProjectDPR_Bidder_Order obj_tbl_ProjectDPR_Bidder_Order, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_JalPrahariBidder_Order ( [JalPrahariBidder_Order_AddedBy],[JalPrahariBidder_Order_AddedOn],[JalPrahariBidder_Order_Amount],[JalPrahariBidder_Order_Amount_After_Inflation],[JalPrahariBidder_Order_Comissioned],[JalPrahariBidder_Order_Comments],[JalPrahariBidder_Order_Completed],[JalPrahariBidder_Order_EndDate],[JalPrahariBidder_Order_Inflation],[JalPrahariBidder_Order_JV_Contract_Value],[JalPrahariBidder_Order_JV_Share],[JalPrahariBidder_Order_Name_Of_Work],[JalPrahariBidder_Order_Simmilar_Nature],[JalPrahariBidder_Order_StartDate],[JalPrahariBidder_Order_Status], [JalPrahariBidder_Order_OrderPath], [JalPrahariBidder_Order_VerificationPath], [JalPrahariBidder_Order_VerificationLetterPath], [JalPrahariBidder_Order_VerificationLetterDate], [JalPrahariBidder_Order_VerificationLetterPath1], [JalPrahariBidder_Order_VerificationLetterDate1], [JalPrahariBidder_Order_VerificationLetterPath2], [JalPrahariBidder_Order_VerificationLetterDate2], [JalPrahariBidder_Order_ReminderCount], [JalPrahariBidder_Order_DPR_Id], [JalPrahariBidder_Order_BidderInfo_Id], [JalPrahariBidder_Order_BidderType]) values ('" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_AddedBy + "',getdate(),'" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Amount + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Amount_After_Inflation + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Comissioned + "',N'" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Comments + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Completed + "', convert(date, '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_EndDate + "', 103),'" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Inflation + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_JV_Contract_Value + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_JV_Share + "',N'" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Name_Of_Work + "','" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Simmilar_Nature + "', convert(date, '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_StartDate + "', 103),'" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_Status + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_OrderPath + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationPath + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterPath + "', convert(date, '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterDate + "', 103), '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterPath1 + "', convert(date, '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterDate1 + "', 103), '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterPath2 + "', convert(date, '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_VerificationLetterDate2 + "', 103), '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_ReminderCount + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_DPR_Id + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_DPRBidder_Id + "', '" + obj_tbl_ProjectDPR_Bidder_Order.ProjectDPR_Bidder_Order_BidderType + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region CM Dashboard
    public DataSet get_CM_Dashboard_View(string Project_Id, int District_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        if (Project_Id == "1013")
        {
            strQuery = @"set dateformat dmy;
                        select 
	                        Total_Projects = count(*),
	                        Projects_Completed = sum(case when isnull(Physical_Progress, 0) >= 100 then 1 else 0 end),
	                        Projects_onGoing = sum(case when isnull(Physical_Progress, 0) < 100 then 1 else 0 end),
	                        Projects_Completing = sum(case when (isnull(tTarget.ProjectWorkFinancialTarget_ProjectWork_Id, 0) > 0 and month(getdate()) = ProjectWorkFinancialTarget_Month and year(getdate()) = ProjectWorkFinancialTarget_Year) then 1 else 0 end),
	                        Projects_Completing_Next = sum(case when (isnull(tTarget.ProjectWorkFinancialTarget_ProjectWork_Id, 0) > 0 and month(DATEADD(MM, 1, getdate())) = ProjectWorkFinancialTarget_Month and year(DATEADD(MM, 1, getdate())) = ProjectWorkFinancialTarget_Year) then 1 else 0 end),
	                        Building_Works = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 22 then 1 else 0 end),
	                        Drainage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 23 then 1 else 0 end),
	                        Sewerage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 24 then 1 else 0 end),
	                        Solid_Waste = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 25 then 1 else 0 end),
	                        Water_Supply = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 26 then 1 else 0 end),
	                        Septage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 27 then 1 else 0 end) 
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                        * 
	                        from tbl_Darpan_Temp_Data
                        ) tbl_Darpan_Temp_Data 
                        join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                        left join tbl_Division on Division_Id = tbl_ProjectWork.ProjectWork_DivisionId
                        left join tbl_Circle on Circle_Id = Division_CircleId
                        left join tbl_Zone on Zone_Id = Circle_ZoneId
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkPhysicalTarget_Target,
                                ProjectWorkFinancialTarget_Month, 
                                ProjectWorkFinancialTarget_Year
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1  
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1 
                        where tbl_Darpan_Temp_Data.rr = 1 ";
        }
        else
        {
            strQuery = @"set dateformat dmy;
                        select 
	                        Total_Projects = count(*),
	                        Projects_Completed = sum(case when isnull(Physical_Progress, 0) >= 100 then 1 else 0 end),
	                        Projects_onGoing = sum(case when isnull(Physical_Progress, 0) < 100 then 1 else 0 end),
	                        Projects_Completing = sum(case when (isnull(tTarget.ProjectWorkFinancialTarget_ProjectWork_Id, 0) > 0 and month(getdate()) = ProjectWorkFinancialTarget_Month and year(getdate()) = ProjectWorkFinancialTarget_Year) then 1 else 0 end),
	                        Projects_Completing_Next = sum(case when (isnull(tTarget.ProjectWorkFinancialTarget_ProjectWork_Id, 0) > 0 and month(DATEADD(MM, 1, getdate())) = ProjectWorkFinancialTarget_Month and year(DATEADD(MM, 1, getdate())) = ProjectWorkFinancialTarget_Year) then 1 else 0 end),
	                        Building_Works = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 41 then 1 else 0 end),
	                        Drainage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 42 then 1 else 0 end),
	                        Sewerage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 43 then 1 else 0 end),
	                        Solid_Waste = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 44 then 1 else 0 end),
	                        Water_Supply = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 45 then 1 else 0 end),
	                        Septage = sum(case when isnull(ProjectWork_ProjectType_Id, 0) = 46 then 1 else 0 end) 
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                        * 
	                        from tbl_Darpan_Temp_Data2
                        ) tbl_Darpan_Temp_Data 
                        join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                        left join tbl_Division on Division_Id = tbl_ProjectWork.ProjectWork_DivisionId
                        left join tbl_Circle on Circle_Id = Division_CircleId
                        left join tbl_Zone on Zone_Id = Circle_ZoneId
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkPhysicalTarget_Target,
                                ProjectWorkFinancialTarget_Month, 
                                ProjectWorkFinancialTarget_Year
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1  
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1 
                        where tbl_Darpan_Temp_Data.rr = 1 ";
        }

        if (District_Id != 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DistrictId = '" + District_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectWork_CM_Dashboard(string Scheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        if (Scheme_Id == "1013")
        {
            strQuery = @"set dateformat dmy; 
					    select 
	                        tbl_ProjectWork.ProjectWork_DistrictId, 
	                        M_Jurisdiction.Jurisdiction_Name_Eng, 
	                        Total_Projects = count(*), 
	                        Sanction_Cost = sum(isnull(ProjectWork_Budget, 0)),
	                        tender_cost = sum(isnull(tender_cost, 0)), 
	                        Expenditure = sum(isnull(Financial_Progress, 0)), 
	                        AVG_Physical_Progress = sum(isnull(Physical_Progress, 0)),
	                        AVG_Financial_Progress = convert(decimal(18, 2), sum(isnull(Financial_Progress, 0)) / count(*)), 
	                        Financial_Progress_Per = case when sum(isnull(tender_cost, 0)) > 0 then convert(decimal(18, 2), (sum(isnull(Financial_Progress, 0)) * 100) / sum(isnull(tender_cost, 0))) else 0 end
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                        * 
	                        from tbl_Darpan_Temp_Data
                        ) tbl_Darpan_Temp_Data 
                        join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                        left join M_Jurisdiction on M_Jurisdiction_Id = tbl_ProjectWork.ProjectWork_DistrictId
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkPhysicalTarget_Target,
                                ProjectWorkFinancialTarget_Month, 
                                ProjectWorkFinancialTarget_Year
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1  
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1 
                        where tbl_Darpan_Temp_Data.rr = 1
                        group by tbl_ProjectWork.ProjectWork_DistrictId, M_Jurisdiction.Jurisdiction_Name_Eng
                        order by M_Jurisdiction.Jurisdiction_Name_Eng";
        }
        else
        {
            strQuery = @"set dateformat dmy; 
					    select 
	                        tbl_ProjectWork.ProjectWork_DistrictId, 
	                        M_Jurisdiction.Jurisdiction_Name_Eng, 
	                        Total_Projects = count(*), 
	                        Sanction_Cost = sum(isnull(ProjectWork_Budget, 0)),
	                        tender_cost = sum(isnull(tender_cost, 0)), 
	                        Expenditure = sum(isnull(Financial_Progress, 0)), 
	                        AVG_Physical_Progress = sum(isnull(Physical_Progress_Weitage, 0)),
	                        AVG_Financial_Progress = convert(decimal(18, 2), sum(isnull(Financial_Progress, 0)) / count(*)), 
	                        Financial_Progress_Per = case when sum(isnull(tender_cost, 0)) > 0 then convert(decimal(18, 2), (sum(isnull(Financial_Progress, 0)) * 100) / sum(isnull(tender_cost, 0))) else 0 end
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                        * 
	                        from tbl_Darpan_Temp_Data2
                        ) tbl_Darpan_Temp_Data 
                        join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                        left join M_Jurisdiction on M_Jurisdiction_Id = tbl_ProjectWork.ProjectWork_DistrictId
                        left join 
                        (
                            select 
                                row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                                ProjectWorkFinancialTarget_ProjectWork_Id, 
                                ProjectWorkPhysicalTarget_Target,
                                ProjectWorkFinancialTarget_Month, 
                                ProjectWorkFinancialTarget_Year
                            from tbl_ProjectWorkFinancialTarget
                            where ProjectWorkFinancialTarget_Status = 1  
                        ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1 
                        where tbl_Darpan_Temp_Data.rr = 1
                        group by tbl_ProjectWork.ProjectWork_DistrictId, M_Jurisdiction.Jurisdiction_Name_Eng
                        order by M_Jurisdiction.Jurisdiction_Name_Eng";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }

    public DataSet get_tbl_ProjectWork_CM_District(int District_Id, string Scheme_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        if (Scheme_Id == "1013")
        {
            strQuery = @"set dateformat dmy; 
                    select 
                        tbl_ProjectWork.ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        tbl_ProjectWork.ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(tbl_ProjectWork.ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(tbl_ProjectWork.ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(tbl_ProjectWork.ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
						ProjectWork_StartDate = convert(char(10), ProjectWork_StartDate, 103), 
						ProjectWork_EndDate = convert(char(10), ProjectWork_EndDate, 103), 
                        ProjectWork_GO_No,
                        ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        ProjectWork_ProjectType_Id,
						ULB_Name, 
						M_Jurisdiction.Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						tbl_ProjectWork.ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
						tbl_Darpan_Temp_Data.tender_cost,
						tender_cost_1 = tbl_Darpan_Temp_Data.tender_cost,
						ProjectWorkPkg_Due_Date, 
						ProjectWorkPkg_Start_Date, 
						ProjectWorkPkg_Agreement_Date,
                        Agreement_Extended = ProjectWorkPkg_End_Date_Extended, 
						Financial_Progress,
                        Physical_Progress,
                        Physical_Progress_Weitage
                    from 
                    (
	                    select 
		                    ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                    * 
	                    from tbl_Darpan_Temp_Data
                    ) tbl_Darpan_Temp_Data 
                    join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = tbl_ProjectWork.ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    where tbl_Darpan_Temp_Data.rr = 1 and ProjectWork_Status = 1 and ProjectWork_Project_Id = Scheme_IdCond and tbl_ProjectWork.ProjectWork_Id not in (1267, 2829) ";
        }
        else
        {
            strQuery = @"set dateformat dmy; 
                    select 
                        tbl_ProjectWork.ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        tbl_ProjectWork.ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(tbl_ProjectWork.ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(tbl_ProjectWork.ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(tbl_ProjectWork.ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
						ProjectWork_StartDate = convert(char(10), ProjectWork_StartDate, 103), 
						ProjectWork_EndDate = convert(char(10), ProjectWork_EndDate, 103), 
                        ProjectWork_GO_No,
                        ProjectWork_Budget = isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0),
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        ProjectWork_ProjectType_Id,
						ULB_Name, 
						M_Jurisdiction.Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						tbl_ProjectWork.ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
						tbl_Darpan_Temp_Data.tender_cost,
						tender_cost_1 = tbl_Darpan_Temp_Data.tender_cost,
						ProjectWorkPkg_Due_Date, 
						ProjectWorkPkg_Start_Date, 
						ProjectWorkPkg_Agreement_Date,
                        Agreement_Extended = ProjectWorkPkg_End_Date_Extended, 
						Financial_Progress,
                        Physical_Progress,
                        Physical_Progress_Weitage
                    from 
                    (
	                    select 
		                    ROW_NUMBER() over (partition by ProjectWork_Id order by (convert(date, '01/' + RIGHT('00' + convert(varchar, Month), 2) + '/' + convert(varchar, Year))) desc) rr, 
		                    * 
	                    from tbl_Darpan_Temp_Data2
                    ) tbl_Darpan_Temp_Data 
                    join tbl_ProjectWork on tbl_ProjectWork.ProjectWork_Id = tbl_Darpan_Temp_Data.ProjectWork_Id 
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = tbl_ProjectWork.ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    where tbl_Darpan_Temp_Data.rr = 1 and ProjectWork_Status = 1 and ProjectWork_Project_Id = Scheme_IdCond and tbl_ProjectWork.ProjectWork_Id not in (1267, 2829) ";
        }
        strQuery = strQuery.Replace("Scheme_IdCond", Scheme_Id);
        if (District_Id > 0)
        {
            strQuery += " and tbl_ProjectWork.ProjectWork_DistrictId = '" + District_Id + "'";
        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Physical Financial Target CM Dashboard
    public DataSet get_tbl_ProjectTarget(int ProjectWork_Id, string StartDate, string EndDate)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectTarget_ProjectWork_Id,
	                    Display_Nonth_Year = MonthName + ' - ' + convert(varchar, MonthYear),  
	                    MonthName,
	                    MonthNumber,
	                    MonthYear,
	                    LastDayOfMonth,
	                    Date, 
	                    Physical_Target = isnull(ProjectTarget_PhysicalTarget, 0), 
	                    Financial_Target = isnull(ProjectTarget_FinancialTarget, 0) 
                    from dbo.Month_Between_Dates(convert(date, 'StartDateCond', 103), convert(date, 'EndDateCond', 103))
                    left join tbl_ProjectTarget on ProjectTarget_MonthName = MonthName and ProjectTarget_MonthNumber = MonthNumber and ProjectTarget_MonthYear = MonthYear and ProjectTarget_LastDayOfMonth = LastDayOfMonth and convert(date, ProjectTarget_Date, 103) = convert(date, Date, 103) and ProjectTarget_ProjectWork_Id = '" + ProjectWork_Id + "' and ProjectTarget_Status = 1 order by convert(date, Date, 103)";

        strQuery = strQuery.Replace("StartDateCond", StartDate);
        strQuery = strQuery.Replace("EndDateCond", EndDate);
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_ProjectTarget(List<tbl_ProjectTarget> obj_tbl_ProjectTarget_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Update_tbl_ProjectTarget(obj_tbl_ProjectTarget_Li[0].ProjectTarget_ProjectWork_Id, obj_tbl_ProjectTarget_Li[0].ProjectTarget_AddedBy, trans, cn);
                for (int i = 0; i < obj_tbl_ProjectTarget_Li.Count; i++)
                {
                    Insert_tbl_ProjectTarget(obj_tbl_ProjectTarget_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_ProjectTarget(tbl_ProjectTarget obj_tbl_ProjectTarget, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_ProjectTarget ( [ProjectTarget_AddedBy],[ProjectTarget_AddedOn],[ProjectTarget_Date],[ProjectTarget_FinancialTarget],[ProjectTarget_LastDayOfMonth],[ProjectTarget_MonthName],[ProjectTarget_MonthNumber],[ProjectTarget_MonthYear],[ProjectTarget_PhysicalTarget],[ProjectTarget_ProjectWork_Id],[ProjectTarget_Status] ) values ('" + obj_tbl_ProjectTarget.ProjectTarget_AddedBy + "', getdate(), convert(date, '" + obj_tbl_ProjectTarget.ProjectTarget_Date + "', 103), '" + obj_tbl_ProjectTarget.ProjectTarget_FinancialTarget + "', '" + obj_tbl_ProjectTarget.ProjectTarget_LastDayOfMonth + "', '" + obj_tbl_ProjectTarget.ProjectTarget_MonthName + "', '" + obj_tbl_ProjectTarget.ProjectTarget_MonthNumber + "', '" + obj_tbl_ProjectTarget.ProjectTarget_MonthYear + "', '" + obj_tbl_ProjectTarget.ProjectTarget_PhysicalTarget + "', '" + obj_tbl_ProjectTarget.ProjectTarget_ProjectWork_Id + "', '" + obj_tbl_ProjectTarget.ProjectTarget_Status + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_ProjectTarget(int ProjectWork_Id, int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;update tbl_ProjectTarget set [ProjectTarget_ModifiedBy] = '" + Added_By + "', [ProjectTarget_ModifiedOn] = getdate(), [ProjectTarget_Status] = 0 where [ProjectTarget_Status] = 1 and [ProjectTarget_ProjectWork_Id] = '" + ProjectWork_Id + "'";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Public View
    public DataSet get_tbl_ProjectWorkPublic_View(string Project_Id, int District_Id, int Zone_Id, int Circle_Id, int Division_Id, int ULB_Id, string Status, int ProjectType_Id, string ProjectCode, int ProjectWork_Id, string Vendor_Name, string Vendor_PAN, string Vendor_GSTIN)
    {
        string FP = "";

        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        string SanctionedCost = "";
        if (Client == "CNDS")
        {
            SanctionedCost = "ProjectWork_Budget = convert(decimal(18, 3), isnull(ProjectWork_Budget, 0)),";
        }
        else
        {
            SanctionedCost = "ProjectWork_Budget = convert(decimal(18, 3), isnull(ProjectWork_Budget, 0) + isnull(ProjectWork_Centage, 0)),";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
                        ProjectWork_Id, 
                        ProjectWork_Project_Id, 
                        Project_Name, 
                        ProjectWork_ProjectCode, 
                        ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_Name_Code = isnull(ProjectWork_ProjectCode, '') + ' - ' + REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''),
                        ProjectWork_Description = REPLACE(REPLACE(ProjectWork_Description, CHAR(13),''), CHAR(10),''), 
                        ProjectWork_GO_Path,
                        ProjectWork_GO_Date = convert(char(10), ProjectWork_GO_Date, 103), 
						ProjectWork_StartDate = convert(char(10), ProjectWork_StartDate, 103), 
						ProjectWork_EndDate = convert(char(10), ProjectWork_EndDate, 103), 
                        ProjectWork_GO_No,
                        SanctionedCostCond
                        ProjectWork_AddedOn, 
                        ProjectWork_AddedBy, 
                        ProjectWork_ModifiedOn = convert(char(10), convert(date, ProjectWork_ModifiedOn, 103), 103), 
                        ProjectWork_ModifiedBy, 
                        ProjectWork_Status, 
                        ProjectWork_ProjectType_Id,
						ULB_Name, 
						Jurisdiction_Name_Eng, 
						Division_Name, 
						Circle_Name, 
						Zone_Name, 
						ProjectWork_DistrictId, 
                        ProjectWork_BlockId,
                        ProjectWork_DPR_Id, 
                        ProjectWork_ADPCost, 
						ProjectWork_ULB_Id, 
						ProjectWork_DivisionId, 
						Division_CircleId, 
						tender_cost = convert(decimal(18, 3), isnull(tender_cost, 0)),
						tender_cost_1 = convert(decimal(18, 3), isnull(tender_cost_1, 0)),
                        Total_Release = convert(decimal(18, 3), isnull(Total_Release, 0)),
                        Total_Expenditure = convert(decimal(18, 3), isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)),
						ProjectWorkPkg_Due_Date, 
                        ProjectWorkPkg_Start_Date,
						ProjectWorkPkg_Agreement_Date,
                        Target_Date_Agreement_Extended = convert(char(10), ProjectWorkPkg_End_Date_Extended, 103), 
						Step_Count = isnull(Step_1, 0) + isnull(Step_2, 0) + isnull(Step_3, 0) + isnull(Step_4, 0) + isnull(Step_5, 0) + isnull(Step_6, 0) + isnull(Step_7, 0), 
						FPCond
                        Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)), 
                        ProjectWork_NodalDepartment_Id, 
                        ProjectWork_NodalDeptScheme_Id,
                        Vendor = REPLACE(REPLACE(REPLACE(REPLACE(tVendor.List_Vendor, CHAR(13),''), CHAR(10),''), char(92), ''), char(39), ''),
                        Issue = REPLACE(REPLACE((case when ltrim(rtrim(isnull(tIssue.Issue_1, '') + isnull(tIssue.SubIssue_1, '') + isnull(tIssue.Comments_1, ''))) != '' then (isnull(tIssue.Issue_1, '') + ': ' + isnull(tIssue.SubIssue_1, '') + ': ' + isnull(tIssue.Comments_1, '')) else '' end) 
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_2, '') + isnull(tIssue.SubIssue_2, '') + isnull(tIssue.Comments_2, ''))) != '' then (isnull(tIssue.Issue_2, '') + ': ' + isnull(tIssue.SubIssue_2, '') + ': ' + isnull(tIssue.Comments_2, '')) else '' end)
						+ CHAR(13) + CHAR(10) +
								(case when ltrim(rtrim(isnull(tIssue.Issue_3, '') + isnull(tIssue.SubIssue_3, '') + isnull(tIssue.Comments_3, ''))) != '' then (isnull(tIssue.Issue_3, '') + ': ' + isnull(tIssue.SubIssue_3, '') + ': ' + isnull(tIssue.Comments_3, '')) else '' end), CHAR(13),''), CHAR(10),'')
                    from tbl_ProjectWork
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
					left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
					left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
					left join tbl_Division on Division_Id = ProjectWork_DivisionId
					left join tbl_Circle on Circle_Id = Division_CircleId
					left join tbl_Zone on Zone_Id = Circle_ZoneId
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
					left join 
					(
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
					) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
                    (
                        select 
                            row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkFinancialTarget_Id desc) rrT,
                            ProjectWorkFinancialTarget_ProjectWork_Id, 
                            ProjectWorkFinancialTarget_Target, 
                            ProjectWorkPhysicalTarget_Target
                        from tbl_ProjectWorkFinancialTarget
                        where ProjectWorkFinancialTarget_Status = 1   
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and rrT = 1
                    left join
					(
						select 
							ProjectWorkPkg_Work_Id, 
							Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
							GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
						from tbl_PackageInvoice
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
						where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
						group by ProjectWorkPkg_Work_Id
					) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
							ProjectWorkPkg_Work_Id,
							Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
						from tbl_Package_ADP
						inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
						group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
					left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice = count(*), 
							Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
							Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
						from tbl_PackageInvoice 
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
								PackageInvoiceApproval_Next_Designation_Id,
								PackageInvoiceApproval_Next_Organisation_Id,
								PackageInvoiceApproval_Comments,
								PackageInvoiceApproval_AddedBy,
								PackageInvoiceApproval_AddedOn,
								PackageInvoiceApproval_Status_Id,
								PackageInvoiceApproval_Package_Id,
								PackageInvoiceApproval_PackageInvoice_Id,
								InvoiceStatus_Name,
								PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
								PackageInvoiceApproval_Id
							from tbl_PackageInvoiceApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
							where PackageInvoiceApproval_Status = 1
						) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
						where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    left join 
                    (
                        select 
	                        ProjectWorkIssueDetails_WorkId, 
	                        Issue_1 = max(case when rr = 1 then ProjectIssue_Name else null end),
                            SubIssue_1 = max(case when rr = 1 then Dependency_Name else null end),
	                        Issue_Id_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_1 = max(case when rr = 1 then ProjectWorkIssueDetails_Comments else null end),

	                        Issue_2 = max(case when rr = 2 then ProjectIssue_Name else null end),
                            SubIssue_2 = max(case when rr = 2 then Dependency_Name else null end),
                            Issue_Id_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_2 = max(case when rr = 2 then ProjectWorkIssueDetails_Comments else null end),

	                        Issue_3 = max(case when rr = 3 then ProjectIssue_Name else null end),
                            SubIssue_3 = max(case when rr = 3 then Dependency_Name else null end),
                            Issue_Id_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Issue_Id else null end),
	                        Comments_3 = max(case when rr = 3 then ProjectWorkIssueDetails_Comments else null end)
                        from 
                        (
	                        select 
		                        ROW_NUMBER() over (partition by ProjectWorkIssueDetails_WorkId order by ProjectWorkIssueDetails_Id desc) rr,
		                        ProjectWorkIssueDetails_Issue_Id,
		                        ProjectWorkIssueDetails_Category,
		                        ProjectWorkIssueDetails_Dependency_Id,
		                        ProjectWorkIssueDetails_Date = convert(char(10), ProjectWorkIssueDetails_Date, 103),
		                        ProjectWorkIssueDetails_Comments = REPLACE(REPLACE(ProjectWorkIssueDetails_Comments, CHAR(13),''), CHAR(10),''),
		                        ProjectWorkIssueDetails_WorkId, 
		                        Dependency_Name = REPLACE(REPLACE(Dependency_Name, CHAR(13),''), CHAR(10),''), 
		                        ProjectIssue_Name = REPLACE(REPLACE(ProjectIssue_Name, CHAR(13),''), CHAR(10),'')
	                        from tbl_ProjectWorkIssueDetails 
	                        left join tbl_ProjectIssue on ProjectIssue_Id = ProjectWorkIssueDetails_Issue_Id
	                        left join tbl_Dependency on Dependency_Id = ProjectWorkIssueDetails_Dependency_Id
	                        where ProjectWorkIssueDetails_Status = 1  and isnull(ProjectWorkIssueDetails_Issue_Id, 0) > 0
                        ) tIssue where rr < 4
                        group by ProjectWorkIssueDetails_WorkId
                    ) tIssue on tIssue.ProjectWorkIssueDetails_WorkId = tbl_ProjectWork.ProjectWork_Id
					left join
					(
						SELECT	
							ProjectWorkPkg_Work_Id,
							STUFF((SELECT ', ' + CAST(isnull(Person_Name, '') + ', Mob: ' + isnull(Person_Mobile1, '') AS VARCHAR(3000)) [text()]
							from tbl_ProjectWorkPkg
							join tbl_PersonDetail on Person_Id = ProjectWorkPkg_Vendor_Id
							WHERE tbl_ProjectWorkPkg.ProjectWorkPkg_Work_Id = t.ProjectWorkPkg_Work_Id and ProjectWorkPkg_Status = 1
							FOR XML PATH(''), TYPE)
							.value('.','NVARCHAR(MAX)'),1,2,' ') as List_Vendor
						FROM tbl_ProjectWorkPkg t
						join tbl_PersonDetail t1 on t1.Person_Id = t.ProjectWorkPkg_Vendor_Id
						where t.ProjectWorkPkg_Status = 1
						GROUP BY ProjectWorkPkg_Work_Id
					) tVendor on tVendor.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    where ProjectWork_Status = 1 ";

        strQuery = strQuery.Replace("FPCond", FP);
        strQuery = strQuery.Replace("SanctionedCostCond", SanctionedCost);

        string finalWhere = "";
        string tempWhereName = "";
        string tempWherePAN = "";
        string tempWhereGSTIN = "";
        if (Vendor_Name != "")
        {
            tempWhereName += " Person_Name like '%" + Vendor_Name + "%' or PersonJuridiction_Firm_Name like '%" + Vendor_Name + "%'";
        }
        if (Vendor_PAN != "")
        {
            tempWherePAN += " PersonJuridiction_PAN like '%" + Vendor_PAN + "%'";
        }
        if (Vendor_GSTIN != "")
        {
            tempWhereGSTIN += " PersonJuridiction_GSTIN like '%" + Vendor_GSTIN + "%'";
        }
        if (tempWhereName != "")
        {
            if (finalWhere == "")
            {
                finalWhere += "where " + tempWhereName;
            }
            else
            {
                finalWhere += " or " + tempWhereName;
            }
        }
        if (tempWherePAN != "")
        {
            if (finalWhere == "")
            {
                finalWhere += "where " + tempWherePAN;
            }
            else
            {
                finalWhere += "or " + tempWherePAN;
            }
        }
        if (tempWhereGSTIN != "")
        {
            if (finalWhere == "")
            {
                finalWhere += "where " + tempWhereGSTIN;
            }
            else
            {
                finalWhere += "or " + tempWhereGSTIN;
            }
        }
        if (finalWhere != "")
        {
            strQuery += " and ProjectWork_Id in (select distinct ProjectWorkPkg_Work_Id from tbl_ProjectWorkPkg join tbl_PersonDetail on Person_Id = ProjectWorkPkg_Vendor_Id join tbl_PersonJuridiction on PersonJuridiction_PersonId = Person_Id " + finalWhere + ")";
        }
        if (Project_Id != "" && Project_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in ( " + Project_Id + ")";
        }
        if (ProjectWork_Id != 0)
        {
            strQuery += " and ProjectWork_Id = '" + ProjectWork_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (Zone_Id != 0)
        {
            strQuery += " and Circle_ZoneId = '" + Zone_Id + "'";
        }
        if (Circle_Id != 0)
        {
            strQuery += " and Division_CircleId = '" + Circle_Id + "'";
        }
        if (Division_Id != 0)
        {
            strQuery += " and ProjectWork_DivisionId = '" + Division_Id + "'";
        }
        if (ProjectType_Id != 0)
        {
            strQuery += " and ProjectWork_ProjectType_Id = '" + ProjectType_Id + "'";
        }
        if (ProjectCode != "")
        {
            strQuery += " and ProjectWork_ProjectCode like '%" + ProjectCode + "%'";
        }
        if (Status == "Ongoing")
        {
            strQuery += " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100 ";
        }
        else if (Status == "Completed")
        {
            strQuery += " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100 ";
        }
        else
        {

        }
        strQuery += " order by Jurisdiction_Name_Eng, Zone_Name, Circle_Name, Division_Name, ProjectWork_ProjectCode";
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion

    #region Project Salient Features
    public DataSet get_tbl_ProjectSalientFeatures(int ProjectWork_Id)
    {
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    ProjectSalientFeatures_Id,
                        ProjectSalientFeatures_ProjectWork_Id,
                        ProjectSalientFeatures_Comments,
                        ProjectSalientFeatures_Heading
                    from tbl_ProjectSalientFeatures
                    where ProjectSalientFeatures_Status = 1 and ProjectSalientFeatures_ProjectWork_Id = '" + ProjectWork_Id + "'";

        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    public bool Insert_tbl_ProjectSalientFeatures(List<tbl_ProjectSalientFeatures> obj_tbl_ProjectSalientFeatures_Li)
    {
        bool flag = false;
        DataSet ds = new DataSet();
        using (SqlConnection cn = new SqlConnection(ConStr))
        {
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            SqlTransaction trans = cn.BeginTransaction();
            try
            {
                Update_tbl_ProjectSalientFeatures(obj_tbl_ProjectSalientFeatures_Li[0].ProjectSalientFeatures_ProjectWork_Id, obj_tbl_ProjectSalientFeatures_Li[0].ProjectSalientFeatures_AddedBy, trans, cn);
                for (int i = 0; i < obj_tbl_ProjectSalientFeatures_Li.Count; i++)
                {
                    Insert_tbl_ProjectSalientFeatures(obj_tbl_ProjectSalientFeatures_Li[i], trans, cn);
                }
                trans.Commit();
                cn.Close();
                flag = true;
            }
            catch
            {
                trans.Rollback();
                cn.Close();
                flag = false;
            }
        }
        return flag;
    }
    private void Insert_tbl_ProjectSalientFeatures(tbl_ProjectSalientFeatures obj_tbl_ProjectSalientFeatures, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy;insert into tbl_ProjectSalientFeatures([ProjectSalientFeatures_AddedBy],[ProjectSalientFeatures_AddedOn],[ProjectSalientFeatures_Comments],[ProjectSalientFeatures_Heading],[ProjectSalientFeatures_ProjectWork_Id],[ProjectSalientFeatures_Status]) values ('" + obj_tbl_ProjectSalientFeatures.ProjectSalientFeatures_AddedBy + "', getdate(), N'" + obj_tbl_ProjectSalientFeatures.ProjectSalientFeatures_Comments + "',N'" + obj_tbl_ProjectSalientFeatures.ProjectSalientFeatures_Heading + "','" + obj_tbl_ProjectSalientFeatures.ProjectSalientFeatures_ProjectWork_Id + "','" + obj_tbl_ProjectSalientFeatures.ProjectSalientFeatures_Status + "');Select @@Identity";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }

    private void Update_tbl_ProjectSalientFeatures(int ProjectWork_Id, int Added_By, SqlTransaction trans, SqlConnection cn)
    {
        string strQuery = "";
        strQuery = " set dateformat dmy; update tbl_ProjectSalientFeatures set [ProjectSalientFeatures_ModifiedBy] = '" + Added_By + "', [ProjectSalientFeatures_ModifiedOn] = getdate(), [ProjectSalientFeatures_Status] = 0 where [ProjectSalientFeatures_ProjectWork_Id] = '" + ProjectWork_Id + "' and [ProjectSalientFeatures_Status] = 1";
        if (trans == null)
        {
            try
            {
                ExecuteSelectQuery(strQuery);
            }
            catch
            {
            }
        }
        else
        {
            ExecuteSelectQuerywithTransaction(cn, strQuery, trans);
        }
    }
    #endregion

    #region Field Visit CNDS
    public DataSet get_Project_Work_FieldVisit(string Scheme_Id, int Zone_Id, int Circle_Id, int Division_Id, int District_Id, int ULB_Id, bool ShowPicAvailable, string ProjectType)
    {
        string FP = "";
        string Client = ConfigurationManager.AppSettings.Get("Client");
        if (Client == "CNDS")
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tGO.Total_Release, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tGO.Total_Release, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        else
        {
            FP = "Financial_Progress = convert(decimal(18, 2), (case when isnull(tProjectWorkPkg.tender_cost, 0) > 0 then (((isnull(tInvoice.Total_Invoice_Value, 0) + isnull(tPrevInvoiceADP.Amount, 0) + isnull(tADP.Total_Value_ADP, 0) + isnull(tPrevInvoice.Amount, 0)) * 100) / (isnull(tProjectWorkPkg.tender_cost, 0) + isnull(ProjectWork_ADPCost, 0))) else 0 end)), ";
        }
        string strQuery = "";
        DataSet ds = new DataSet();
        strQuery = @"set dateformat dmy; 
                    select 
	                    tbl_ProjectWork.ProjectWork_Id, 
	                    ProjectWork_Project_Id, 
                        ProjectWork_DistrictId,
	                    Project_Name, 
	                    ProjectWork_ProjectCode, 
	                    ProjectWork_Name = REPLACE(REPLACE(ProjectWork_Name, CHAR(13),''), CHAR(10),''), 
	                    Jurisdiction_Name_Eng, 
	                    Division_Name, 
	                    Circle_Name, 
	                    Zone_Name,
	                    Physical_Progress = convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)), 
	                    FPCond
                        Total_Visit = isnull(tVisit.Total_Visits, 0), 
                        LastVisit_On, 
                        LastVisit_By
                    from tbl_ProjectWork
                    left join
                    (
	                    select 
		                    ProjectWorkGO_Work_Id, 
                            Total_Release = sum(isnull(ProjectWorkGO_TotalRelease, 0)) / 100000 
	                    from tbl_ProjectWorkGO 
	                    where ProjectWorkGO_Status = 1 
	                    group by ProjectWorkGO_Work_Id
                    ) tGO on tGO.ProjectWorkGO_Work_Id = ProjectWork_Id
                    left join 
                    (
                        select 
	                        ProjectWorkPkg_Work_Id,
	                        tender_cost = sum(isnull(tender_cost_With_GST, 0)), 
	                        tender_cost_1 = sum(isnull(tender_cost_WithOut_GST, 0)), 
	                        ProjectWorkPkg_Due_Date = convert(char(10), max(ProjectWorkPkg_Due_Date), 103),
	                        ProjectWorkPkg_Start_Date = convert(char(10), min(ProjectWorkPkg_Start_Date), 103),
	                        ProjectWorkPkg_Agreement_Date = convert(char(10), min(ProjectWorkPkg_Agreement_Date), 103), 
	                        ProjectWorkPkg_End_Date_Extended = convert(char(10), max(case when ProjectWorkPkg_ExtendDate is null then ProjectWorkPkg_Due_Date else ProjectWorkPkg_ExtendDate end), 103)
                        from (
                        select 
                            ProjectWorkPkg_Work_Id,
                            tender_cost_With_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then (isnull(ProjectWorkPkg_AgreementAmount, 0) * (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) else ProjectWorkPkg_AgreementAmount end) else isnull(Tender_Cost_Include_GST, 0) end, 
	                        tender_cost_WithOut_GST = case when isnull(ProjectWorkPkg_Id_TC, 0) = 0 then (case when isnull(ProjectWorkPkg_GST, 'Exclude GST') = 'Exclude GST' then ISNULL(ProjectWorkPkg_AgreementAmount, 0) else (isnull(ProjectWorkPkg_AgreementAmount, 0) / (1 + isnull(ProjectWorkPkg_Percent, 18) / 100)) end) else isnull(Tender_Cost_Exclude_GST, 0) end,
	                        ProjectWorkPkg_Due_Date,
                            ProjectWorkPkg_Start_Date, 
	                        ProjectWorkPkg_Agreement_Date, 
                            ProjectWorkPkg_ExtendDate, 
                            ProjectWorkPkg_Percent, 
	                        ProjectWorkPkg_Id_TC = isnull(ProjectWorkPkg_Id_TC, 0), 
	                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
	                        Tender_Cost_Include_GST = isnull(Tender_Cost_Include_GST, 0)
                        from tbl_ProjectWorkPkg 
                        left join 
                        (
	                        select 
		                        ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id, 
		                        Tender_Cost_Exclude_GST = isnull(Tender_Cost_Exclude_GST, 0),
		                        Tender_Cost_Include_GST = isnull(Final_Tender_Cost, 0)
	                        from tbl_Tender_Cost_Pkg_Wise_Automated
                        ) tTenderCost_Auto on tTenderCost_Auto.ProjectWorkPkg_Id_TC = ProjectWorkPkg_Id
                        where ProjectWorkPkg_Status = 1	
                        ) tData
                        group by ProjectWorkPkg_Work_Id
                    ) tProjectWorkPkg  on tProjectWorkPkg.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
	                    select 
		                    row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id order by ProjectWorkPhysicalTarget_Target desc, ProjectWorkFinancialTarget_Id desc) rrT,
		                    * 
	                    from (
	                    select 
		                    row_number() over (partition by ProjectWorkFinancialTarget_ProjectWork_Id, ProjectWorkPhysicalTarget_Target order by ProjectWorkPhysicalTarget_Target, ProjectWorkFinancialTarget_Id) rrV,
		                    ProjectWorkFinancialTarget_Id,
		                    ProjectWorkFinancialTarget_ProjectWork_Id, 
		                    ProjectWorkFinancialTarget_Target, 
		                    ProjectWorkPhysicalTarget_Target, 
		                    ProjectWorkFinancialTarget_Month,
		                    ProjectWorkFinancialTarget_Year,
		                    ProjectWorkFinancialTarget_AddedOn,
		                    ProjectWorkFinancialTarget_TargetMonth
	                    from tbl_ProjectWorkFinancialTarget
	                    where ProjectWorkFinancialTarget_Status = 1 
	                    ) tData where tData.rrV = 1
                    ) tTarget on tTarget.ProjectWorkFinancialTarget_ProjectWork_Id = tbl_ProjectWork.ProjectWork_Id and tTarget.rrT = 1
                    left join
                    (
	                    select 
		                    ProjectWorkPkg_Work_Id, 
		                    Total_Amount = sum(cast((ISNULL(FinancialTrans_TransAmount,0) / 100000) as decimal(18,2))), 
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,2))), 
		                    GST = sum(cast((ISNULL(FinancialTrans_GST,0) / 100000) as decimal(18,2))) 
	                    from tbl_PackageInvoice
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id=PackageInvoice_Id
	                    where PackageInvoice_Status = 1 and FinancialTrans_EntryType = 'Fund Allocated' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1 and PackageInvoice_Id not in (select PackageInvoiceEMBMasterLink_Invoice_Id from tbl_PackageInvoiceEMBMasterLink where PackageInvoiceEMBMasterLink_Status=1) 
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoice on tPrevInvoice.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join
                    (
                        select 
		                    ProjectWorkPkg_Work_Id,
		                    Amount = sum(cast((ISNULL(FinancialTrans_Amount,0) / 100000) as decimal(18,4))) 
	                    from tbl_Package_ADP
	                    inner join tbl_FinancialTrans on FinancialTrans_Invoice_Id = Package_ADP_Id 
	                    join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
	                    where Package_ADP_Status = 1 and FinancialTrans_EntryType = 'ADP' and FinancialTrans_TransType = 'C' and ProjectWorkPkg_Status = 1
	                    group by ProjectWorkPkg_Work_Id
                    ) tPrevInvoiceADP on tPrevInvoiceADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id
                    left join 
                    (
				        select 
					        ProjectWorkPkg_Work_Id,
					        Total_Invoice = count(*), 
					        Total_Invoice_Value = sum(isnull(InvoiceAmount, 0)) / 100000, 
					        Last_Invoice_Date = max(PackageInvoice_Date),
					        Deffered_Value = sum(case when (isnull(PackageInvoiceApproval_Next_Designation_Id, 0) = 0 and isnull(PackageInvoiceApproval_Next_Organisation_Id, 0) = 0 and  PackageInvoiceApproval_Status_Id not in (1, 6)) then isnull(InvoiceAmount, 0) else 0 end) / 100000
				        from tbl_PackageInvoice 
				        join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = PackageInvoice_Package_Id
				        join 
				        (
					        select 
						        ROW_NUMBER() over (partition by PackageInvoiceApproval_PackageInvoice_Id order by PackageInvoiceApproval_Id desc) rrrrr,
						        PackageInvoiceApproval_Next_Designation_Id,
						        PackageInvoiceApproval_Next_Organisation_Id,
						        PackageInvoiceApproval_Comments,
						        PackageInvoiceApproval_AddedBy,
						        PackageInvoiceApproval_AddedOn,
						        PackageInvoiceApproval_Status_Id,
						        PackageInvoiceApproval_Package_Id,
						        PackageInvoiceApproval_PackageInvoice_Id,
						        InvoiceStatus_Name,
						        PackageInvoiceApproval_Date = convert(char(10), PackageInvoiceApproval_Date, 103),
						        PackageInvoiceApproval_Id
					        from tbl_PackageInvoiceApproval
					        left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageInvoiceApproval_Status_Id
					        where PackageInvoiceApproval_Status = 1
				        ) tInvoiceApproval on tInvoiceApproval.PackageInvoiceApproval_PackageInvoice_Id = PackageInvoice_Id and tInvoiceApproval.rrrrr = 1
				        where PackageInvoice_Status = 1 and ProjectWorkPkg_Status = 1  
				        group by ProjectWorkPkg_Work_Id
                    ) tInvoice on tInvoice.ProjectWorkPkg_Work_Id = ProjectWork_Id 
                    left join 
					(
						select 
							ProjectWorkPkg_Work_Id,
							Total_Invoice_ADP = count(*), 
							Total_Value_ADP = sum(isnull(Package_ADP_ADPTotalAmount, 0)) / 100000
						from tbl_Package_ADP 
                        join
                        (
                            select
                                Package_ADP_Item_Package_ADP_Id,
		                        Total_Line_Items = count(*),
		                        Total_Amount = sum(isnull(Package_ADP_Item_TotalAmount, 0))
                            from tbl_Package_ADP_Item
                            where Package_ADP_Item_Status = 1
                            group by Package_ADP_Item_Package_ADP_Id
                        ) tPackageInvoiceItem on Package_ADP_Item_Package_ADP_Id = Package_ADP_Id
						join tbl_ProjectWorkPkg on ProjectWorkPkg_Id = Package_ADP_Package_Id
						join 
						(
							select 
								ROW_NUMBER() over (partition by PackageADPApproval_Package_ADP_Id order by PackageADPApproval_Id desc) rrrrr,
								PackageADPApproval_Next_Designation_Id,
								PackageADPApproval_Next_Organisation_Id,
								PackageADPApproval_Comments,
								PackageADPApproval_AddedBy,
								PackageADPApproval_AddedOn = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Status_Id,
								PackageADPApproval_Package_Id,
								PackageADPApproval_Package_ADP_Id,
								InvoiceStatus_Name,
								PackageADPApproval_Date = convert(char(10), PackageADPApproval_AddedOn, 103),
								PackageADPApproval_Id
							from tbl_PackageADPApproval
							left join tbl_InvoiceStatus on InvoiceStatus_Id = PackageADPApproval_Status_Id
							where PackageADPApproval_Status = 1
						) tADPApproval on tADPApproval.PackageADPApproval_Package_ADP_Id = Package_ADP_Id and tADPApproval.rrrrr = 1
						where Package_ADP_Status = 1 and ProjectWorkPkg_Status = 1  
						group by ProjectWorkPkg_Work_Id
					) tADP on tADP.ProjectWorkPkg_Work_Id = tbl_ProjectWork.ProjectWork_Id 
                    left join 
                    (
	                    select 
	                        ROW_NUMBER() over (partition by ProjectVisit_ProjectWork_Id order by ProjectVisit_SubmitionDate desc, ProjectVisit_Id desc) tRRVisit,
	                        ROW_NUMBER() over (partition by ProjectVisit_ProjectWork_Id order by ProjectVisit_SubmitionDate asc, ProjectVisit_Id asc) Total_Visits,
	                        ProjectVisit_ProjectWork_Id, 
	                        LastVisit_On = convert(char(10), ProjectVisit_SubmitionDate, 103),
	                        LastVisit_By = Designation_DesignationName + ' > ' + Person_Name
                        from tbl_ProjectVisit
                        join tbl_PersonDetail on Person_Id = ProjectVisit_AddedBy
                        join tbl_PersonJuridiction on PersonJuridiction_PersonId = ProjectVisit_AddedBy
                        join tbl_Designation ON Designation_Id = PersonJuridiction_DesignationId
                        where ProjectVisit_Status = 1
                    ) tVisit on tVisit.ProjectVisit_ProjectWork_Id = ProjectWork_Id and tRRVisit = 1 
                    left join tbl_Project on Project_Id = ProjectWork_Project_Id
                    left join M_Jurisdiction on M_Jurisdiction_Id = ProjectWork_DistrictId
                    left join tbl_ULB on ULB_Id = ProjectWork_ULB_Id
                    left join tbl_Division on Division_Id = ProjectWork_DivisionId
                    left join tbl_Circle on Circle_Id = Division_CircleId
                    left join tbl_Zone on Zone_Id = Circle_ZoneId
                    where ProjectWork_Status = 1 ";
        strQuery = strQuery.Replace("FPCond", FP);
        if (Scheme_Id != "" && Scheme_Id != "0")
        {
            strQuery += " and ProjectWork_Project_Id in (" + Scheme_Id + ")";
        }
        if (Zone_Id > 0)
        {
            strQuery += " and Zone_Id = '" + Zone_Id + "'";
        }
        if (Circle_Id > 0)
        {
            strQuery += " and Circle_Id = '" + Circle_Id + "'";
        }
        if (Division_Id > 0)
        {
            strQuery += " and Division_Id = '" + Division_Id + "'";
        }
        if (District_Id != 0)
        {
            strQuery += " and ProjectWork_DistrictId = '" + District_Id + "'";
        }
        if (ULB_Id != 0)
        {
            strQuery += " and ProjectWork_ULB_Id = '" + ULB_Id + "'";
        }
        if (ShowPicAvailable)
        {
            strQuery += " and isnull(ProjectVisit_ProjectWork_Id, 0) = 0 ";
        }
        else
        {
            strQuery += " and isnull(ProjectVisit_ProjectWork_Id, 0) > 0 ";
        }
        if (ProjectType == "O")
        {
            strQuery += " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) < 100";
        }
        else if (ProjectType == "C")
        {
            strQuery += " and convert(decimal(18, 2), isnull(tTarget.ProjectWorkPhysicalTarget_Target, 0)) >= 100";
        }
        else
        {

        }
        try
        {
            ds = ExecuteSelectQuery(strQuery);
        }
        catch
        {
            ds = null;
        }
        return ds;
    }
    #endregion
}